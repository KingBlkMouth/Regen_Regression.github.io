---
title: "9 RF Reg"
execute: 
  freeze: auto
---

# Intro

1. Checking on the RF imputation results when only numeric variables are used. 
2. Plotting error statistics. 
3. Playing with parameters, mtry and ntree. 




*Libraries*
```{r}
#| label: Libraries
#| message: false
#| warning: false
#| code-fold: true
#| output: false

rm(list = ls())                                                      
gc()                                                                                 

# Data tidying and access
library(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   
library(RSQLite)                      # Access SQLite dbs   
library(magrittr)                     # Pipes and math functions    
# library(readxl)                     # Read xlsx 
# library(writexl)                    # write xlsx     
# library(BAMMtools)                    # Natural Breaks
# library(fedmatch)                     # Clean strings
# library(janitor)                      # Clean headers

# yaImpute and related                           
library(yaImpute)                     # RF imputation     
library(vegan)                        # Something to do the yaImpute 
library(randomForest)                 # RF package that yaImpute uses                                   
                                                     
# plots and tables                          
# library(esquisse)                     # Quick data visualization   
library(knitr)                        # Better html tables
# library(DT)                           # Data tables for Java script tables in HTML
                                                   
library(kableExtra)                   # Better html tables, change sizes
# library(feather)                      # Faster data retrieval    

# Geography
# library(sf)                           # Simple Features/vector data
# library(terra)                        # Raster functions
# library(spatstat)                     # Spatial stats


library(tcltk)                        # Fix file paths

# No sci-notation. 
options(scipen = 999)
options(width = 125)
```

*Functions*
```{r}
#| code-fold: true
#| label: Functions

clean_mem <- function() {
  x <- ls(envir = .GlobalEnv)
  # ls()[!(ls() %in% keep)]
  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)
  gc()
}

clean_na_cols <- function(df){
  df <- df[, colSums(is.na(df)) < nrow(df)]
}

# path <- r"(C:\RxFire\Regen\FVS\regen_080724_1644\regen_080724_1644.db)"
clean_paths <- function(path) {
  str_replace_all(path, "\\\\", "/")
}

db_list <- function(df, CN_col){
  name <- NULL
  name <- df |> select({{CN_col}})
  name <- name |> mutate(CN_col = str_c("'", {{CN_col}}, "'")) 
  name <- str_flatten_comma(name$CN_col)
  # name <- str_flatten_comma(name[, CN_col])
  name
}

nas_to_zeroes <- function(df){
  df <- df |> mutate_all(~replace(., is.na(.), 0))
  df
}

keep <- c("keep", "clean_mem", "clean_na_cols", "clean_paths", "db_list", "nas_to_zeroes")

keep <- append(keep, 
               c("imp_data_nc"))
```



___


```{r}
#| include: false
#| eval: false

rstudioapi::getSourceEditorContext()$path %>% basename()
```


**Created on**
```{r}
#| echo: false

ymd_hms(file.info("./9_RF_Regression.qmd")$ctime, tz = "America/Los_Angeles")
```

**Last updated on**
```{r}
#| echo: false

ymd_hms(file.info("./9_RF_Regression.qmd")$atime, tz = "America/Los_Angeles")
```


___







# RF regression

*yai setup*
```{r}
#| code-fold: true

# This will be how the yai object is saved later. 
run_name <- "rf_reg_noclass_sept18"
run_name <- str_c("./data/", run_name, ".R")

con <- dbConnect(RSQLite::SQLite(), clean_paths(r"(C:\RxFire\Regen\Regeneration_2_16Sept24\data/homemade_fvs_db_17sept24.db)"))
imp_data <- dbGetQuery(con, "select * from imp_data")
dbDisconnect(con)


imp_data_nc <- imp_data |> filter(EcoRegion == "M242D" & TRAIN == T) |> select(-c(EcoRegion, ECO_NAME, eco_code, 
                                 STAND_CN, TRAIN, largest_1, largest_2, largest_3, max_spp1, max_spp2, max_spp3, FPAG))

imp_data_nc <- imp_data_nc |> filter(total_TD != 0)


y_resp <- imp_data_nc |> select(STANDPLOT_CN, contains("TD"))
x_pred <- imp_data_nc |> select(STANDPLOT_CN, !contains("TD"))


# Y vars
y <- y_resp
CNs <- imp_data_nc |> select(STANDPLOT_CN)
y <- y %>% select_if(~ !is.numeric(.) || sum(.) != 0)

# X Variables
x <- left_join(CNs, x_pred, join_by(STANDPLOT_CN))
x <- x %>% select_if(~ !is.numeric(.) || sum(.) != 0)

x <- as.data.frame(x)
y <- as.data.frame(y)

x <- x |> column_to_rownames("STANDPLOT_CN")
y <- y |> column_to_rownames("STANDPLOT_CN")

y <- droplevels(y)
x <- droplevels(x)
```

## yai

*Run yai*
```{r}
#| eval: false
#| warning: false
#| code-fold: true

# n = 0
# while(n != 10){
#     rf <- try(
#       yai(x = x, y = y, method = "randomForest", k = 1, bootstrap = T, rfMode = "regression"), 
#       silent = T)
#     
#     if (class(rf) == "try-error") {
#       print(n)     
#       cat("ERROR1: ", rf, "\n")
#       n <- n + 1
#       } else {
#         break
#       }
# }
# 
# rf_reg_noclass <- rf

run_name <- str_c("./data/", run_name, ".R")
# save(rf, file = run_name)

rf_ntree_24.50s_6.5s <- rf
```

```{r}
#| code-fold: true

load(run_name)
```


This is a default run, ntree is set to 50. 

*Loading yai results to save time when rendering*
```{r}
#| code-fold: true

# save(rf_reg_noclass, file = "./rf_reg_noclass_spet18.R")

load(file = "./data/rf_reg_noclass_sept18.R")

rf_reg_summary <- yaiRFsummary(rf_reg_noclass)

t <- rf_reg_summary$forestAttributes

t %>% kable() %>%
  kable_styling("striped", full_width = F) %>% 
 scroll_box(width = "1100px", height = "400px")
```


```{r}
#| code-fold: true

oobe <- rf_reg_summary$forestAttributes
oobe <- oobe %>% rownames_to_column("SYMBL") %>% 
  select(SYMBL, var_exp = error)
```




```{r}
#| code-fold: true

rf_reg_noclass_imp <- impute(rf_reg_noclass)
rf_reg_noclass_imp <- rf_reg_noclass_imp |> 
  drop_na() |> 
  select(order(colnames(rf_reg_noclass_imp))) |> 
  select(contains("TD"))
```

```{r}
#| code-fold: true

rmsd <- rmsd(rf_reg_noclass_imp)
rmsd <- rmsd %>% rownames_to_column("SYMBL")
```









## error v. n plots


```{r}
#| code-fold: true

cols_tds <- imp_data_nc %>% select(contains("_TD")) %>% select_if(~ sum(.)>0) %>% names()

df <- tribble(
  ~SYMBL, ~n_plots
)


for (i in 1:length(cols_tds)) {  ## length(cols_tds)
  t <- imp_data_nc %>% select(STANDPLOT_CN, cols_tds[i]) %>% filter(!!sym(cols_tds[i]) > 0)
  
  tdf <- tribble(
  ~SYMBL, ~ n_plots, 
  cols_tds[i], nrow(t)
  )
  
  df <- add_row(df, tdf)
}
```

```{r}
#| message: false
#| code-fold: true


error <- left_join(df, oobe, join_by(SYMBL))
error <- left_join(error, rmsd, join_by(SYMBL))
error  %>% kable() %>%
  kable_styling("striped", full_width = F) %>% 
 scroll_box(width = "1100px", height = "400px")
```


```{r}
#| code-fold: true

error %>% filter(!is.na(var_exp)) %>% ggplot() + 
  aes(x = reorder(SYMBL, -n_plots), y = var_exp, size = n_plots) + 
  geom_point() +
  guides(x =  guide_axis(angle = 60)) + 
  labs(title = "Variation Explained") + 
  xlab("Species")

error %>% filter(is.na(var_exp))
```

```{r}
#| code-fold: true

error %>% filter(!is.na(rmsd)) %>% ggplot() + 
  aes(x = reorder(SYMBL, -n_plots), y = rmsd, size = n_plots) + 
  geom_point() +
  guides(x =  guide_axis(angle = 60)) + 
  labs(title = "RMSD") + 
  xlab("Species")

```

```{r}
#| code-fold: true

cols_tds <- imp_data_nc %>% select(contains("_TD")) %>% select_if(~ sum(.)>0) %>% names()

df <- tribble(
  ~SYMBL, ~std_dev
)


for (i in 1:length(cols_tds)) {  ## length(cols_tds)
  t <- imp_data_nc %>% select(STANDPLOT_CN, cols_tds[i]) %>% filter(!!sym(cols_tds[i]) > 0)
  
  tdf <- tribble(
  ~SYMBL, ~std_dev, 
  cols_tds[i], sd(t[,2])
  )
  
  df <- add_row(df, tdf)
}

error <- left_join(error, df, join_by(SYMBL))
```

```{r}
#| code-fold: true

error %>% filter(!is.na(std_dev)) %>% ggplot() + 
  aes(x = reorder(SYMBL, -n_plots), y = std_dev, size = n_plots) + 
  geom_point() +
  guides(x =  guide_axis(angle = 60)) + 
  labs(title = "Standard Deviation") + 
  xlab("Species")

```

### yai-var importance

```{r}
#| code-fold: true

yaiVarImp(rf_reg_noclass)
```

#### Which variables is yaiVarImp choosing

**The documentation says that it defaults to providing all of the y-variables.**

```{r}
importance_10 <- yaiVarImp(rf_reg_noclass, plot = F, ntop = 38)
importance_10 %>% names()
```


```{r}
vars(rf_reg_noclass)
```







```{r}
#| warning: false

stacked_imp <- stack(importance_10)

ggplot(stacked_imp) + 
  aes(x = values, y = ind, fill = ind) + 
  geom_boxplot() + 
  xlim(-3,3) + 
  labs(title = "eco") +
  geom_vline(xintercept = 0)

# yaiVarImp(rf_reg_noclass)
```
```{r}
#| warning: false
#| fig-width: 8
#| fig-asp: .618
#| column: screen-inset-left

x <- rf_reg_noclass %>% yaiRFsummary()
x <- x$scaledImportance

stacked_imp <- stack(x)

ggplot(stacked_imp) + 
  aes(x = values, y = ind, fill = ind) + 
  geom_boxplot() + 
  xlim(-2.5,2.5) + 
  labs(title = "RF Regression") +
  geom_vline(xintercept = 0) + 
  guides(
    fill = "none"
  )

```

```{r}
#| code-fold: true

error
```




```{r}
#| code-fold: true

error
```

```{r}
#| warning: false
#| fig-width: 8
#| code-fold: true


# error %>% ggplot() + 
#   aes(x = n_plots, y = var_exp, colour = reorder(SYMBL, -n_plots)) + 
#   geom_point() + 
#   guides(color = guide_legend(title = "Species", ncol = 2))

error %>% ggplot() + 
  aes(x = n_plots, y = var_exp) + 
  geom_point() + 
  labs(title = "Variation Explained v. # of subplots")
```











# ntree 50 and 5

*yai setup*
```{r}
#| code-fold: true

# This will be how the yai object is saved later. 
run_name <- "rf_ntree_24.500_50s_6.5s"
run_name <- str_c("./data/", run_name, ".R")


imp_data_nc <- imp_data |> filter(EcoRegion == "M242D" & TRAIN == T) |> select(-c(EcoRegion, ECO_NAME, eco_code, 
                                 STAND_CN, TRAIN, largest_1, largest_2, largest_3, max_spp1, max_spp2, max_spp3, FPAG))

imp_data_nc <- imp_data_nc |> filter(total_TD != 0)

y_resp <- imp_data_nc |> select(STANDPLOT_CN, contains("TD"))

x_pred <- imp_data_nc |> select(STANDPLOT_CN, !contains("TD"))



# Prep
y <- y_resp

CNs <- imp_data_nc |> select(STANDPLOT_CN)

y <- y %>% select_if(~ !is.numeric(.) || sum(.) != 0)

# X Variables
x <- left_join(CNs, x_pred, join_by(STANDPLOT_CN))

x <- x %>% select_if(~ !is.numeric(.) || sum(.) != 0)
# No Oaks in BA either

x <- as.data.frame(x)
y <- as.data.frame(y)

x <- x |> column_to_rownames("STANDPLOT_CN")
y <- y |> column_to_rownames("STANDPLOT_CN")

y <- y[, names(sort(colSums(y), decreasing = T))]

y <- droplevels(y)
x <- droplevels(x)
```


## yai

*Run yai
```{r}
#| eval: false
#| warning: false
#| code-fold: true


rf <- yai(x = x, y = y, method = "randomForest", k = 1, bootstrap = T, 
          rfMode = "regression", 
          ntree = c(rep(50, 24), rep(5, 6)))

# length(c(rep(50, 24), rep(5, 6)))


save(rf, file = run_name)

# rf_ntree_24.50s_6.5s <- rf
```


*Loading yai results to save time when rendering*
```{r}
#| code-fold: true

# load(run_name)
load("./data/rf_ntree_24.50s_6.5s.R")
```



## error v. n plots

```{r}
#| code-fold: true

rf_summary <- yaiRFsummary(rf)

oobe <- rf_summary$forestAttributes
oobe <- oobe %>% rownames_to_column("SYMBL") %>% 
  select(-c(levels, type, errtag), var_exp = error)

cols_tds <- imp_data_nc %>% select(contains("_TD")) %>% select_if(~ sum(.)>0) %>% names()

df <- tribble(
  ~SYMBL, ~n_plots
)


for (i in 1:length(cols_tds)) {  ## length(cols_tds)
  t <- imp_data_nc %>% select(STANDPLOT_CN, cols_tds[i]) %>% filter(!!sym(cols_tds[i]) > 0)
  
  tdf <- tribble(
  ~SYMBL, ~ n_plots, 
  cols_tds[i], nrow(t)
  )
  
  df <- add_row(df, tdf)
}


rmsd <- rmsd(rf)
rmsd <- rmsd %>% rownames_to_column("SYMBL")


error <- left_join(df, oobe, join_by(SYMBL))
error <- left_join(error, rmsd, join_by(SYMBL))
# error  %>% kable() %>%
#   kable_styling("striped", full_width = F) %>% 
#  scroll_box(width = "1100px", height = "400px")
```


```{r}
#| code-fold: true

error %>% filter(!is.na(var_exp)) %>% ggplot() + 
  aes(x = reorder(SYMBL, -n_plots), y = var_exp, size = n_plots) + 
  geom_point() +
  guides(x =  guide_axis(angle = 60)) + 
  labs(title = "Variation Explained") + 
  xlab("Species") + 
  geom_hline(yintercept = 0)+ 
  ylim(-30, 100)
```

### RMSD

```{r}
#| code-fold: true

error %>% filter(!is.na(rmsd)) %>% ggplot() + 
  aes(x = reorder(SYMBL, -n_plots), y = rmsd, size = n_plots) + 
  geom_point() +
  guides(x =  guide_axis(angle = 60)) + 
  labs(title = "RMSD") + 
  xlab("Species") + 
  geom_hline(yintercept = 2000) + 
  ylim(0, 3000)

```

```{r}
#| code-fold: true

cols_tds <- imp_data_nc %>% select(contains("_TD")) %>% select_if(~ sum(.)>0) %>% names()

df <- tribble(
  ~SYMBL, ~std_dev
)


for (i in 1:length(cols_tds)) {  ## length(cols_tds)
  t <- imp_data_nc %>% select(STANDPLOT_CN, cols_tds[i]) %>% filter(!!sym(cols_tds[i]) > 0)
  
  tdf <- tribble(
  ~SYMBL, ~std_dev, 
  cols_tds[i], sd(t[,2])
  )
  
  df <- add_row(df, tdf)
}

error <- left_join(error, df, join_by(SYMBL))
```

```{r}
#| code-fold: true

error %>% filter(!is.na(std_dev)) %>% ggplot() + 
  aes(x = reorder(SYMBL, -n_plots), y = std_dev, size = n_plots) + 
  geom_point() +
  guides(x =  guide_axis(angle = 60)) + 
  labs(title = "Standard Deviation") + 
  xlab("Species")

```



```{r}
#| code-fold: true

yaiVarImp(rf_reg_noclass)
```

```{r}
#| code-fold: true

error
```

```{r}
#| warning: false
#| fig-width: 8
#| code-fold: true


# error %>% ggplot() + 
#   aes(x = n_plots, y = var_exp, colour = reorder(SYMBL, -n_plots)) + 
#   geom_point() + 
#   guides(color = guide_legend(title = "Species", ncol = 2))

error %>% ggplot() + 
  aes(x = n_plots, y = var_exp) + 
  geom_point() + 
  labs(title = "Variation Explained v. # of subplots")
```






## Repetition

### yai

*Run yai
```{r}
#| warning: false
#| code-fold: true
#| layout-ncol: 2
#| fig-width: 12
#| fig-asp: .618
#| column: screen-inset-left
#| eval: false



t_rep_error <- tribble(
  ~SYMBL, ~n_plots, ~ntree, ~var_exp, ~rmsd, ~run
)

for (i in 1:10) {
  
  rf <- yai(x = x, y = y, method = "randomForest", k = 1, bootstrap = T, 
            rfMode = "regression", 
            ntree = c(rep(50, 24), rep(5, 6)))
  
  
  rf_summary <- yaiRFsummary(rf)
  oobe <- rf_summary$forestAttributes
  oobe <- oobe %>% rownames_to_column("SYMBL") %>% 
    select(-c(levels, type, errtag), var_exp = error)

  
  cols_tds <- imp_data_nc %>% select(contains("_TD")) %>% select_if(~ sum(.)>0) %>% names()
  df <- tribble(~SYMBL, ~n_plots)
  for (i in 1:length(cols_tds)) {  ## length(cols_tds)
    t <- imp_data_nc %>% select(STANDPLOT_CN, cols_tds[i]) %>% filter(!!sym(cols_tds[i]) > 0)
    
    tdf <- tribble(
    ~SYMBL, ~ n_plots, 
    cols_tds[i], nrow(t)
    )
    
    df <- add_row(df, tdf)
  }
  
  
  rmsd <- rmsd(rf)
  rmsd <- rmsd %>% rownames_to_column("SYMBL")
  
  error <- left_join(df, oobe, join_by(SYMBL))
  error <- left_join(error, rmsd, join_by(SYMBL))
  error$run <- i
  
  t_rep_error <- add_row(t_rep_error, error)
  
  
  # p1 <- error %>% filter(!is.na(var_exp)) %>% ggplot() + 
  #   aes(x = reorder(SYMBL, -n_plots), y = var_exp, size = n_plots) + 
  #   geom_point() +
  #   guides(x =  guide_axis(angle = 60)) + 
  #   labs(title = "Variation Explained") + 
  #   xlab("Species") + 
  #   geom_hline(yintercept = 0)
  # 
  # 
  # p2 <- error %>% filter(!is.na(rmsd)) %>% ggplot() + 
  #   aes(x = reorder(SYMBL, -n_plots), y = rmsd, size = n_plots) + 
  #   geom_point() +
  #   guides(x =  guide_axis(angle = 60)) + 
  #   labs(title = "RMSD") + 
  #   xlab("Species")
  
  # print(p1)
  # print(p2)
}

# save(t_rep_error, file = "./data/t_rep_error.Rdata")
```

```{r}
#| code-fold: true


load(file = "./data/t_rep_error.Rdata")

t_rep_error$run <- rep(seq(1, 10), each = 30)

ave_error <- t_rep_error %>% group_by(SYMBL) %>%
  summarise(
    ave_var = mean(var_exp, na.rm = T), 
    med_var = median(var_exp, na.rm = T), 
    sd_var = sd(var_exp, na.rm = T)
    )

ave_error <- ave_error %>% mutate(
  lower = ave_var - sd_var, upper = ave_var + sd_var, 
  lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var
  )

t_rep_error <- t_rep_error %>% filter(!is.na(var_exp))

t_rep_error <- left_join(t_rep_error, ave_error, join_by(SYMBL))
t_rep_error <- t_rep_error %>% arrange(desc(n_plots))

t <- t_rep_error %>% select(SYMBL) %>% unique()
t$rib <- seq(1:30)

t_rep_error <- left_join(t_rep_error, t, join_by(SYMBL))

# ave_error <- ave_error %>% mutate(SYMBL = factor(SYMBL, levels = unique(t_rep_error$SYMBL)))

ggplot(t_rep_error) + 
  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +
  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = 1, color = "red")) +
  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = "red"), alpha = .3) +
  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = "red"), alpha = .2) +
  geom_hline(yintercept = 0) +
  guides(
    x = guide_axis(angle = 60), 
    color = "none", 
    fill = "none") + 
  labs(
    title = "Variation explained, Mean in red, ntree 50 & 5",
    subtitle = "Between the vertical lines there are between 10 and 486 subplots"
    ) + 
  geom_vline(xintercept = "PSME_TD") + 
  geom_vline(xintercept = "POBAT_TD") + 
  xlab("Species, Most to least plots, left to right")
  


 #  scale_color_gradient(low = "yellow", high = "blue")

# ave_error$lower
```

```{r}
#| code-fold: true

ggplot(t_rep_error) + 
  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +
  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = 1, color = "red")) +
  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = "red"), alpha = .3) +
  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = "red"), alpha = .2) +
  geom_hline(yintercept = 0) +
  guides(
    x = guide_axis(angle = 60), 
    color = "none", 
    fill = "none") + 
  labs(
    title = "Variation explained, Mean in red, ntree 50 & 5", 
    subtitle = "Between the vertical lines there are between 10 and 486 subplots"
    ) + 
  geom_vline(xintercept = "PSME_TD") + 
  geom_vline(xintercept = "POBAT_TD") + 
  xlab("Species, Most to least plots, left to right") + 
  ylim(-25, 100)
  


```

### RMSD

```{r}
#| code-fold: true

load(file = "./data/t_rep_error.Rdata")

t_rep_error$run <- rep(seq(1, 10), each = 30)

ave_error <- t_rep_error %>% group_by(SYMBL) %>%
  summarise(
    ave_rmsd = mean(rmsd, na.rm = T), 
    med_rmsd = median(rmsd, na.rm = T), 
    sd_rmsd = sd(rmsd, na.rm = T)
    )

# ave_error <- ave_error %>% mutate(
#   lower = ave_var - sd_var, upper = ave_var + sd_var, 
#   lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var
#   )

t_rep_error <- t_rep_error %>% filter(!is.na(rmsd))

t_rep_error <- left_join(t_rep_error, ave_error, join_by(SYMBL))
t_rep_error <- t_rep_error %>% arrange(desc(n_plots))

t <- t_rep_error %>% select(SYMBL) %>% unique()
t$rib <- seq(1:30)

t_rep_error <- left_join(t_rep_error, t, join_by(SYMBL))

# ave_error <- ave_error %>% mutate(SYMBL = factor(SYMBL, levels = unique(t_rep_error$SYMBL)))

ggplot(t_rep_error) + 
  geom_point(aes(x = reorder(SYMBL, -n_plots), y = rmsd)) +
  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_rmsd, group = 1, color = "red")) +
  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = "red"), alpha = .3) +
  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = "red"), alpha = .2) +
  geom_hline(yintercept = 2000) +
  guides(
    x = guide_axis(angle = 60), 
    color = "none", 
    fill = "none") + 
  labs(
    title = "Variation explained, Mean in red, ntree 50 & 5",
    subtitle = "Between the vertical lines there are between 10 and 486 subplots"
    ) + 
  geom_vline(xintercept = "PSME_TD") + 
  geom_vline(xintercept = "POBAT_TD") + 
  xlab("Species, Most to least plots, left to right") +
  ylim(-10, 3000) 
  


 #  scale_color_gradient(low = "yellow", high = "blue")

# ave_error$lower
```



```{r}
#| warning: false
#| fig-width: 8
#| code-fold: true


# error %>% ggplot() + 
#   aes(x = n_plots, y = var_exp, colour = reorder(SYMBL, -n_plots)) + 
#   geom_point() + 
#   guides(color = guide_legend(title = "Species", ncol = 2))

error %>% ggplot() + 
  aes(x = n_plots, y = var_exp) + 
  geom_point() + 
  labs(title = "Variation Explained v. # of subplots")
```





*yai setup*
```{r}
#| code-fold: true

# This will be how the yai object is saved later. 
run_name <- "rf_ntree_24.50s_6.5s"
run_name <- str_c("./data/", run_name, ".R")


imp_data_nc <- imp_data |> filter(EcoRegion == "M242D" & TRAIN == T) |> select(-c(EcoRegion, ECO_NAME, eco_code, 
                                 STAND_CN, TRAIN, largest_1, largest_2, largest_3, max_spp1, max_spp2, max_spp3, FPAG))

imp_data_nc <- imp_data_nc |> filter(total_TD != 0)

y_resp <- imp_data_nc |> select(STANDPLOT_CN, contains("TD"))

x_pred <- imp_data_nc |> select(STANDPLOT_CN, !contains("TD"))



# Prep
y <- y_resp

CNs <- imp_data_nc |> select(STANDPLOT_CN)

y <- y %>% select_if(~ !is.numeric(.) || sum(.) != 0)

# X Variables
x <- left_join(CNs, x_pred, join_by(STANDPLOT_CN))

x <- x %>% select_if(~ !is.numeric(.) || sum(.) != 0)
# No Oaks in BA either

x <- as.data.frame(x)
y <- as.data.frame(y)

x <- x |> column_to_rownames("STANDPLOT_CN")
y <- y |> column_to_rownames("STANDPLOT_CN")

y <- y[, names(sort(colSums(y), decreasing = T))]

y <- droplevels(y)
x <- droplevels(x)

################################################################################################
```






```{r}
#| include: false

clean_mem()
```





# ntree error

*Getting number of plots*
```{r}
#| code-fold: true

cols_tds <- imp_data_nc %>% select(contains("_TD")) %>% select_if(~ sum(.)>0) %>% names()
  df <- tribble(~SYMBL, ~n_plots)
  for (i in 1:length(cols_tds)) {  ## length(cols_tds)
    t <- imp_data_nc %>% select(STANDPLOT_CN, cols_tds[i]) %>% filter(!!sym(cols_tds[i]) > 0)
    
    tdf <- tribble(
    ~SYMBL, ~ n_plots, 
    cols_tds[i], nrow(t)
    )
    
    df <- add_row(df, tdf)
  }
  
df <- df %>% arrange(desc(n_plots))

cols_tds <- df$SYMBL %>% unique()

rm(t, tdf)
```


*yai setup*
```{r}
#| code-fold: true

y_resp <- imp_data_nc |> select(STANDPLOT_CN, contains("TD"))
x_pred <- imp_data_nc |> select(STANDPLOT_CN, !contains("TD"))


# Prep
y <- y_resp
CNs <- imp_data_nc |> select(STANDPLOT_CN)
y <- y %>% select_if(~ !is.numeric(.) || sum(.) != 0)

# X Variables
x <- left_join(CNs, x_pred, join_by(STANDPLOT_CN))
x <- x %>% select_if(~ !is.numeric(.) || sum(.) != 0)

# Formatting
x <- as.data.frame(x)
y <- as.data.frame(y)

x <- x |> column_to_rownames("STANDPLOT_CN")
y <- y |> column_to_rownames("STANDPLOT_CN")

y <- y[, names(sort(colSums(y), decreasing = T))]

rm(y_resp, x_pred, CNs)
```


## yai

*Run yai for loop*
```{r}
#| eval: false
#| warning: false
#| code-fold: true

# i <- 1
# j <- 1
# k <- 2
# grps <- 2
# repeats <- 2

ntree_error <- tribble(~SYMBL, ~n_plots, ~ntree, ~var_exp, ~rmsd, ~run)

grps <- 3
repeats <- 5

df2 <- NULL

for (i in 1:grps) {
  
  if (i == 1) {
    for (k in 1:repeats) {
    
        # ntrees <- rep((5), 30)
        ntrees <- rep((50), 30)
          # ntrees <- (50)
        # print(ntrees)
    
    rf <- yai(x = x, y = y, method = "randomForest", k = 1, bootstrap = T,
              rfMode = "regression",
              ntree = ntrees)
    
    oobe <- yaiRFsummary(rf)$forestAttributes
    oobe <- oobe %>% rownames_to_column("SYMBL") %>%
      select(-c(levels, type, errtag), var_exp = error)
    rmsd <- rmsd(rf)
    rmsd <- rmsd %>% rownames_to_column("SYMBL")
    
    df2 <- df
    
    error <- left_join(df2, oobe, join_by(SYMBL))
    error <- left_join(error, rmsd, join_by(SYMBL))
    error$run <- (i * 100) + k
    
    ntree_error <- add_row(ntree_error, error)
    }
  }
  
  
  if (i != 1) {
    for (j in 1:repeats) {
      
      # ntrees <- rep((2*i), 30)
      ntrees <- rep((75*i), 30)
      # ntrees <- (75*i)
      # print(ntrees)

    rf <- yai(x = x, y = y, method = "randomForest", k = 1, bootstrap = T,
              rfMode = "regression",
              ntree = ntrees)
    
      oobe <- yaiRFsummary(rf)$forestAttributes
      oobe <- oobe %>% rownames_to_column("SYMBL") %>%
        select(-c(levels, type, errtag), var_exp = error)
      rmsd <- rmsd(rf)
      rmsd <- rmsd %>% rownames_to_column("SYMBL")
      
      df2 <- df
      
      error <- left_join(df2, oobe, join_by(SYMBL))
      error <- left_join(error, rmsd, join_by(SYMBL))
      error$run <- (i * 100) + j
      
      ntree_error <- add_row(ntree_error, error)
    }
  }
}


# save(ntree_error, file = "./data/ntree_error_sept20_3_grps.Rdata")
ntree_error %>%
  filter(!is.na(var_exp))
  # filter(SYMBL == "total_TD")

# t <- ntree_error %>%
#   filter(SYMBL == "total_TD")
# t
```


```{r}
#| include: false

# load("./data/ntree_error_sept19_5.Rdata")
# load("./data/ntree_error_sept19_10.Rdata")
load("./data/ntree_error_sept20_3_grps_5.Rdata")
```



- ntree_error_sept19_5.Rdata has up to 500 trees. 
- ntree_error_sept19_10.Rdata has 1000 trees. 
- ntree_error_sept20_3_grps_5.Rdata has 5 runs for each ntree, and 3 sets of ntree values: 50, 150, 225. 


```{r}
#| code-fold: true

ntree_error %>% head()
```

```{r}
#| code-fold: true

error_spp_tree_grps <- ntree_error %>% group_by(SYMBL, ntree) %>% 
  summarise(
    .groups = "drop",
    mean_var = mean(var_exp, na.rm = T), 
    sd_var = sd(var_exp, na.rm = T), 
    mean_rmsd = mean(rmsd, na.rm = T),
    sd_rmsd = sd(rmsd, na.rm = T)
    )  
  
error_spp_tree_grps %>% ggplot() + 
  aes(x = ntree, y = mean_var, group = ntree) + 
  # geom_smooth()
  geom_boxplot() + 
  labs(
    title = "Average %Variation Explaied per Species vs. ntree",
    # subtitle = "PISI_TD, PSMA_TD, 2TB_TD, & ALRH2_TD often have NAs for variation explained."
  )
```









### 50, 150, 225 Plots

```{r}
#| fig-width: 8
#| code-fold: true


n <- ntree_error$ntree %>% unique() %>% sort()

for(i in 1:3) {

t_rep_error <- ntree_error[ntree_error$ntree == n[i],]
t_rep_error <- t_rep_error %>% filter(!is.na(var_exp))
t_rep_error <- t_rep_error %>% mutate(run2 = str_sub(run,-1,-1))

ave_error <- t_rep_error %>% group_by(SYMBL) %>%
  summarise(
    ave_var = mean(var_exp, na.rm = T), 
    med_var = median(var_exp, na.rm = T), 
    sd_var = sd(var_exp, na.rm = T)
    )

ave_error <- ave_error %>% mutate(
  lower = ave_var - sd_var, upper = ave_var + sd_var, 
  lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var
  )

t_rep_error <- t_rep_error %>% filter(!is.na(var_exp))

t_rep_error <- left_join(t_rep_error, ave_error, join_by(SYMBL))
t_rep_error <- t_rep_error %>% arrange(desc(n_plots))

t <- t_rep_error %>% select(SYMBL) %>% unique()
t$rib <- seq(1:30)

t_rep_error <- left_join(t_rep_error, t, join_by(SYMBL))

# ave_error <- ave_error %>% mutate(SYMBL = factor(SYMBL, levels = unique(t_rep_error$SYMBL)))

p <- ggplot(t_rep_error) + 
  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +  ## , color = run2
  # geom_boxplot(aes(x = reorder(SYMBL, -n_plots), y = var_exp, fill = SYMBL)) +
  # geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = SYMBL)) +
  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = "red"), alpha = .3) +
  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = "red"), alpha = .2) +
  
  geom_hline(yintercept = 0) +
  geom_hline(yintercept = 100) +
  
  guides(
    x = guide_axis(angle = 60), 
    # color = "none", 
    fill = "none"
    ) + 
  
  labs(
    title = str_c("Boxplots: 5 RF runs at ntree = ", n[i]),
    subtitle = "PISI_TD, ALRH2_TD, PSMA_TD, & 2TB_TD often have NAs for variation explained."
    ) + 
  xlab("Species") + 
  ylab("% Variation Explained") +
  ylim(-10, 100) 

print(p)
}
```


### RMSD


```{r}
#| fig-width: 8
#| code-fold: true


n <- ntree_error$ntree %>% unique() %>% sort()

for(i in 1:3) {

t_rep_error <- ntree_error[ntree_error$ntree == n[i],]
# t_rep_error <- t_rep_error %>% filter(!is.na(var_exp))
t_rep_error <- t_rep_error %>% mutate(run2 = str_sub(run,-1,-1))

ave_error <- t_rep_error %>% group_by(SYMBL) %>%
  summarise(
    ave_rmsd = mean(rmsd, na.rm = T), 
    med_rmsd = median(rmsd, na.rm = T), 
    sd_rmsd = sd(rmsd, na.rm = T)
    )

# ave_error <- ave_error %>% mutate(
#   lower = ave_var - sd_var, upper = ave_var + sd_var, 
#   lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var
#   )

t_rep_error <- t_rep_error %>% filter(!is.na(rmsd))

t_rep_error <- left_join(t_rep_error, ave_error, join_by(SYMBL))
t_rep_error <- t_rep_error %>% arrange(desc(n_plots))

t <- t_rep_error %>% select(SYMBL) %>% unique()
t$rib <- seq(1:30)

t_rep_error <- left_join(t_rep_error, t, join_by(SYMBL))

p <- ggplot(t_rep_error) + 
  geom_point(aes(x = reorder(SYMBL, -n_plots), y = rmsd)) +  ## , color = run2
  # geom_boxplot(aes(x = reorder(SYMBL, -n_plots), y = var_exp, fill = SYMBL)) +
  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_rmsd, group = 1, color = "red")) +
  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = "red"), alpha = .3) +
  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = "red"), alpha = .2) +
  
  geom_hline(yintercept = 0) +
  geom_hline(yintercept = 2000) +
  
  guides(
    x = guide_axis(angle = 60), 
    color = "none",
    fill = "none"
    ) + 
  
  labs(
    title = str_c("Boxplots: 5 RF runs at ntree = ", n[i]),
    subtitle = "PISI_TD, ALRH2_TD, PSMA_TD, & 2TB_TD often have NAs for variation explained."
    ) + 
  xlab("Species") + 
  ylab("% Variation Explained") +
  ylim(-10, 3000) 

print(p)
}
```



PISI_TD, PSMA_TD, 2TB_TD, & ALRH2_TD have 1 or 2 plots. They are sometimes left with NAs for variation explained. 






























# Scratch

From stack overflow, how to try doing loops in parallel. 

```{r}
#| eval: false
#| code-fold: true


library(foreach)
library(doParallel)

#setup parallel backend to use many processors
cores=detectCores()
cl <- makeCluster(cores[1]-3) #not to overload your computer
registerDoParallel(cl)

finalMatrix <- foreach(i=1:150000, .combine=cbind) %dopar% {
   tempMatrix = functionThatDoesSomething() #calling a function
   #do other things if you want

   tempMatrix #Equivalent to finalMatrix = cbind(finalMatrix, tempMatrix)
}
#stop cluster
stopCluster(cl)
```


```{r}
#| code-fold: true


t_rep_error <- ntree_error %>% filter(ntree == 50)

ave_error <- t_rep_error %>% group_by(SYMBL) %>%
  summarise(
    ave_var = mean(var_exp, na.rm = T), 
    med_var = median(var_exp, na.rm = T), 
    sd_var = sd(var_exp, na.rm = T)
    )

t_rep_error <- t_rep_error %>% filter(!is.na(var_exp))

t_rep_error <- left_join(t_rep_error, ave_error, join_by(SYMBL))
t_rep_error <- t_rep_error %>% arrange(desc(n_plots))

ggplot(t_rep_error) + 
  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +
  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = 1, color = "red")) +
  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = "red"), alpha = .3) +
  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = "red"), alpha = .2) +
  geom_hline(yintercept = 0) +
  guides(
    x = guide_axis(angle = 60), 
    color = "none", 
    fill = "none") + 
  labs(
    title = "Variation explained, Mean in red, ntree = 50 for all", 
    subtitle = "Between the vertical lines there are between 10 and 486 subplots"
    ) + 
  geom_vline(xintercept = "PSME_TD") + 
  geom_vline(xintercept = "POBAT_TD") + 
  xlab("Species, Most to least plots, left to right") + 
  ylim(-25, 100)
```


```{r}
#| code-fold: true


t_rep_error <- ntree_error %>% filter(ntree == 150)

ave_error <- t_rep_error %>% group_by(SYMBL) %>%
  summarise(
    ave_var = mean(var_exp, na.rm = T), 
    med_var = median(var_exp, na.rm = T), 
    sd_var = sd(var_exp, na.rm = T)
    )

t_rep_error <- t_rep_error %>% filter(!is.na(var_exp))

t_rep_error <- left_join(t_rep_error, ave_error, join_by(SYMBL))
t_rep_error <- t_rep_error %>% arrange(desc(n_plots))

ggplot(t_rep_error) + 
  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +
  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = 1, color = "red")) +
  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = "red"), alpha = .3) +
  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = "red"), alpha = .2) +
  geom_hline(yintercept = 0) +
  guides(
    x = guide_axis(angle = 60), 
    color = "none", 
    fill = "none") + 
  labs(
    title = "Variation explained, Mean in red, ntree = 225 for all", 
    subtitle = "Between the vertical lines there are between 10 and 486 subplots"
    ) + 
  geom_vline(xintercept = "PSME_TD") + 
  geom_vline(xintercept = "POBAT_TD") + 
  xlab("Species, Most to least plots, left to right") + 
  ylim(-25, 100)
  
  
```