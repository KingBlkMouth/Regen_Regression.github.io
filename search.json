[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Regeneration with Regression",
    "section": "",
    "text": "This is the second site published regarding regeneration for the project POC3.\nThe previous site covered the initial model exploration. Here, the initial steps have been refined and the model is being optimized. The input data has changed from the FIA’s FVS Ready data to a custom translation of raw FIA data to FVS Ready format. The imputation yaImpute is still being used, but the focus has changed to running the data with regression instead of classification."
  },
  {
    "objectID": "9_RF_Regression.html",
    "href": "9_RF_Regression.html",
    "title": "9 RF Reg",
    "section": "",
    "text": "04Sept24\n\nIntro\nTo run RF with the species grouped by species group code instead of species code, I will need to pull the imputation data before it is widened into seedling densities, convert the codes, then widen the data. I will need to do the same for the BAs. That work was first done in 3_rf_prep.\nLibraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and access\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \nlibrary(BAMMtools)                    # Natural Breaks\nlibrary(fedmatch)                     # Clean strings\nlibrary(janitor)                      # Clean headers\n\n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\n\n\n\n\nRF regression\n\ncon &lt;- dbConnect(RSQLite::SQLite(), clean_paths(r\"(C:\\RxFire\\Regen\\Regeneration_2_16Sept24\\homemade_fvs_db_17sept24.db)\"))\n\nimp_data &lt;- dbGetQuery(con, \"select * from imp_data\")\ndbDisconnect(con)\n\n\nimp_data_nc &lt;- imp_data |&gt; filter(EcoRegion == \"M242D\" & TRAIN == T) |&gt; select(-c(EcoRegion, ECO_NAME, eco_code, \n                                 STAND_CN, TRAIN, largest_1, largest_2, largest_3, max_spp1, max_spp2, max_spp3, FPAG))\n\nimp_data_nc &lt;- imp_data_nc |&gt; filter(total_TD != 0)\n\ny_resp &lt;- imp_data_nc |&gt; select(STANDPLOT_CN, contains(\"TD\"))\n\nx_pred &lt;- imp_data_nc |&gt; select(STANDPLOT_CN, !contains(\"TD\"))\n\n\n\n# Prep\ny &lt;- y_resp\n\nCNs &lt;- imp_data_nc |&gt; select(STANDPLOT_CN)\n\ny &lt;- y %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\n\n# X Variables\nx &lt;- left_join(CNs, x_pred, join_by(STANDPLOT_CN))\n\nx &lt;- x %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\n# No Oaks in BA either\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n################################################################################################\n\n# n = 0\n# while(n != 10){\n#     rf &lt;- try(\n#       yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T, rfMode = \"regression\"), \n#       silent = T)\n#     \n#     if (class(rf) == \"try-error\") {\n#       print(n)     \n#       cat(\"ERROR1: \", rf, \"\\n\")\n#       n &lt;- n + 1\n#       } else {\n#         break\n#       }\n# }\n# \n# rf_reg_noclass &lt;- rf\n\n\n# save(rf_reg_noclass, file = \"./rf_reg_noclass_spet18.R\")\n\nload(file = \"./rf_reg_noclass_spet18.R\")\n\nrf_reg_summary &lt;- yaiRFsummary(rf_reg_noclass)\n\nrf_reg_summary$forestAttributes\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nPIPO_TD\n50\n48.29\n%var explained\nNA\nregression\n\n\nABLA_TD\n50\n75.49\n%var explained\nNA\nregression\n\n\nTSME_TD\n50\n69.18\n%var explained\nNA\nregression\n\n\nPSME_TD\n50\n33.45\n%var explained\nNA\nregression\n\n\nABGR_TD\n50\n89.30\n%var explained\nNA\nregression\n\n\nLALY_TD\n50\n67.38\n%var explained\nNA\nregression\n\n\nPIEN_TD\n50\n58.00\n%var explained\nNA\nregression\n\n\nPICO_TD\n50\n42.62\n%var explained\nNA\nregression\n\n\nLAOC_TD\n50\n7.11\n%var explained\nNA\nregression\n\n\nACGL_TD\n50\n-0.92\n%var explained\nNA\nregression\n\n\nTABR2_TD\n50\n54.84\n%var explained\nNA\nregression\n\n\nCHNO_TD\n50\n39.73\n%var explained\nNA\nregression\n\n\nABAM_TD\n50\n67.32\n%var explained\nNA\nregression\n\n\nTHPL_TD\n50\n53.20\n%var explained\nNA\nregression\n\n\nTSHE_TD\n50\n19.11\n%var explained\nNA\nregression\n\n\nBEPA_TD\n50\n64.42\n%var explained\nNA\nregression\n\n\nPREM_TD\n50\n79.18\n%var explained\nNA\nregression\n\n\nALRU2_TD\n50\n15.51\n%var explained\nNA\nregression\n\n\nPOTR5_TD\n50\n54.75\n%var explained\nNA\nregression\n\n\nPIAL_TD\n50\n56.45\n%var explained\nNA\nregression\n\n\nABPR_TD\n50\n72.14\n%var explained\nNA\nregression\n\n\nPIMO3_TD\n50\n26.35\n%var explained\nNA\nregression\n\n\nACMA3_TD\n50\n83.41\n%var explained\nNA\nregression\n\n\nPRVI_TD\n50\n53.74\n%var explained\nNA\nregression\n\n\n2TB_TD\n50\nNaN\n%var explained\nNA\nregression\n\n\nPSMA_TD\n50\n-4.64\n%var explained\nNA\nregression\n\n\nPOBAT_TD\n50\n76.26\n%var explained\nNA\nregression\n\n\nALRH2_TD\n50\n-8.37\n%var explained\nNA\nregression\n\n\nPISI_TD\n50\n91.93\n%var explained\nNA\nregression\n\n\ntotal_TD\n50\n52.70\n%var explained\nNA\nregression\n\n\n\n\n\n\n\noobe &lt;- rf_reg_summary$forestAttributes\noobe &lt;- oobe %&gt;% rownames_to_column(\"SYMBL\") %&gt;% \n  select(SYMBL, var_exp = error)\noobe\n\n\n\n\n\nSYMBL\nvar_exp\n\n\n\n\nPIPO_TD\n48.29\n\n\nABLA_TD\n75.49\n\n\nTSME_TD\n69.18\n\n\nPSME_TD\n33.45\n\n\nABGR_TD\n89.30\n\n\nLALY_TD\n67.38\n\n\nPIEN_TD\n58.00\n\n\nPICO_TD\n42.62\n\n\nLAOC_TD\n7.11\n\n\nACGL_TD\n-0.92\n\n\nTABR2_TD\n54.84\n\n\nCHNO_TD\n39.73\n\n\nABAM_TD\n67.32\n\n\nTHPL_TD\n53.20\n\n\nTSHE_TD\n19.11\n\n\nBEPA_TD\n64.42\n\n\nPREM_TD\n79.18\n\n\nALRU2_TD\n15.51\n\n\nPOTR5_TD\n54.75\n\n\nPIAL_TD\n56.45\n\n\nABPR_TD\n72.14\n\n\nPIMO3_TD\n26.35\n\n\nACMA3_TD\n83.41\n\n\nPRVI_TD\n53.74\n\n\n2TB_TD\nNaN\n\n\nPSMA_TD\n-4.64\n\n\nPOBAT_TD\n76.26\n\n\nALRH2_TD\n-8.37\n\n\nPISI_TD\n91.93\n\n\ntotal_TD\n52.70\n\n\n\n\n\n\n\nrf_reg_noclass_imp &lt;- impute(rf_reg_noclass)\nrf_reg_noclass_imp &lt;- rf_reg_noclass_imp |&gt; \n  drop_na() |&gt; \n  select(order(colnames(rf_reg_noclass_imp))) |&gt; \n  select(contains(\"TD\"))\n\nrf_reg_noclass_imp |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2TB_TD\n2TB_TD.o\nABAM_TD\nABAM_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nACGL_TD\nACGL_TD.o\nACMA3_TD\nACMA3_TD.o\nALRH2_TD\nALRH2_TD.o\nALRU2_TD\nALRU2_TD.o\nBEPA_TD\nBEPA_TD.o\nCHNO_TD\nCHNO_TD.o\nLALY_TD\nLALY_TD.o\nLAOC_TD\nLAOC_TD.o\nPIAL_TD\nPIAL_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPISI_TD\nPISI_TD.o\nPOBAT_TD\nPOBAT_TD.o\nPOTR5_TD\nPOTR5_TD.o\nPREM_TD\nPREM_TD.o\nPRVI_TD\nPRVI_TD.o\nPSMA_TD\nPSMA_TD.o\nPSME_TD\nPSME_TD.o\nTABR2_TD\nTABR2_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965290010497_2\n0\n0\n0.00000\n0\n0.00000\n0.00000\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0.00000\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0\n0\n74.96528\n149.93057\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n149.93057\n0.00000\n0\n0\n0\n0\n224.89585\n149.93057\n0\n0\n0.00000\n0\n\n\n12965856010497_4\n0\n0\n0.00000\n0\n449.79170\n0.00000\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0.00000\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n74.96528\n299.86113\n0\n0\n0\n0\n524.75698\n299.86113\n0\n0\n0.00000\n0\n\n\n12967289010497_1\n0\n0\n0.00000\n0\n74.96528\n0.00000\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0.00000\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0\n0\n0.00000\n74.96528\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0.00000\n149.93057\n0\n0\n0\n0\n74.96528\n224.89585\n0\n0\n0.00000\n0\n\n\n12967289010497_3\n0\n0\n0.00000\n0\n0.00000\n74.96528\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0.00000\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0\n0\n74.96528\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n149.93057\n0.00000\n0\n0\n0\n0\n224.89585\n74.96528\n0\n0\n0.00000\n0\n\n\n12969073010497_1\n0\n0\n0.00000\n0\n0.00000\n0.00000\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0.00000\n0\n0\n0\n0\n149.9306\n0\n0\n0.0000\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0.00000\n149.93057\n0\n0\n0\n0\n149.93057\n149.93057\n0\n0\n0.00000\n0\n\n\n12970163010497_1\n0\n0\n0.00000\n0\n0.00000\n0.00000\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0.00000\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n224.8958\n0\n0\n0\n0\n0\n0.00000\n74.96528\n0\n0\n0\n0\n224.89585\n74.96528\n0\n0\n0.00000\n0\n\n\n12970308010497_2\n0\n0\n0.00000\n0\n0.00000\n0.00000\n0.00000\n74.96528\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n74.96528\n0\n0\n0\n0\n374.8264\n0\n0\n0.0000\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n374.82641\n149.93056\n0\n0\n0.00000\n0\n\n\n12970308010497_4\n0\n0\n0.00000\n0\n0.00000\n0.00000\n74.96528\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0.00000\n0\n0\n0\n0\n0.0000\n0\n0\n149.9306\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n74.96528\n149.93057\n0\n0\n0.00000\n0\n\n\n12988854010497_1\n0\n0\n824.61811\n0\n0.00000\n0.00000\n0.00000\n1724.20150\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n749.6528\n0\n0.00000\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n824.61811\n2473.85432\n0\n0\n0.00000\n0\n\n\n12988854010497_2\n0\n0\n74.96528\n0\n0.00000\n0.00000\n599.72226\n149.93057\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0.00000\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0\n0\n749.65282\n149.93057\n0\n0\n74.96528\n0\n\n\n\n\n\n\n\nrmsd &lt;- rmsd(rf_reg_noclass_imp)\nrmsd &lt;- rmsd %&gt;% rownames_to_column(\"SYMBL\")\n\nrmsd\n\n\n\n\n\nSYMBL\nrmsd\n\n\n\n\n2TB_TD\n0.00000\n\n\nABAM_TD\n870.13111\n\n\nABGR_TD\n232.14274\n\n\nABLA_TD\n389.09393\n\n\nABPR_TD\n2.88115\n\n\nACGL_TD\n28.22939\n\n\nACMA3_TD\n13.51379\n\n\nALRH2_TD\n2.88115\n\n\nALRU2_TD\n31.95350\n\n\nBEPA_TD\n19.11139\n\n\nCHNO_TD\n82.95510\n\n\nLALY_TD\n14.69104\n\n\nLAOC_TD\n467.46601\n\n\nPIAL_TD\n20.16805\n\n\nPICO_TD\n385.51465\n\n\nPIEN_TD\n950.01083\n\n\nPIMO3_TD\n59.46626\n\n\nPIPO_TD\n44.07312\n\n\nPISI_TD\n0.00000\n\n\nPOBAT_TD\n13.20309\n\n\nPOTR5_TD\n16.29824\n\n\nPREM_TD\n75.90067\n\n\nPRVI_TD\n37.34397\n\n\nPSMA_TD\n2.88115\n\n\nPSME_TD\n595.13705\n\n\nTABR2_TD\n83.65264\n\n\nTHPL_TD\n157.28017\n\n\ntotal_TD\n2147.02119\n\n\nTSHE_TD\n1252.59460\n\n\nTSME_TD\n168.86095\n\n\n\n\n\n\n\n\nerror v. n plots\n\ncols_tds &lt;- imp_data_nc %&gt;% select(contains(\"_TD\")) %&gt;% select_if(~ sum(.)&gt;0) %&gt;% names()\n\ndf &lt;- tribble(\n  ~SYMBL, ~n_plots\n)\n\n\nfor (i in 1:length(cols_tds)) {  ## length(cols_tds)\n  t &lt;- imp_data_nc %&gt;% select(STANDPLOT_CN, cols_tds[i]) %&gt;% filter(!!sym(cols_tds[i]) &gt; 0)\n  \n  tdf &lt;- tribble(\n  ~SYMBL, ~ n_plots, \n  cols_tds[i], nrow(t)\n  )\n  \n  df &lt;- add_row(df, tdf)\n}\ndf\n\n\n\n\n\nSYMBL\nn_plots\n\n\n\n\nPIPO_TD\n85\n\n\nABLA_TD\n317\n\n\nTSME_TD\n165\n\n\nPSME_TD\n353\n\n\nABGR_TD\n131\n\n\nLALY_TD\n20\n\n\nPIEN_TD\n96\n\n\nPICO_TD\n155\n\n\nLAOC_TD\n25\n\n\nACGL_TD\n16\n\n\nTABR2_TD\n32\n\n\nCHNO_TD\n47\n\n\nABAM_TD\n608\n\n\nTHPL_TD\n119\n\n\nTSHE_TD\n378\n\n\nBEPA_TD\n5\n\n\nPREM_TD\n28\n\n\nALRU2_TD\n10\n\n\nPOTR5_TD\n26\n\n\nPIAL_TD\n50\n\n\nABPR_TD\n4\n\n\nPIMO3_TD\n36\n\n\nACMA3_TD\n13\n\n\nPRVI_TD\n8\n\n\n2TB_TD\n2\n\n\nPSMA_TD\n2\n\n\nPOBAT_TD\n5\n\n\nALRH2_TD\n1\n\n\nPISI_TD\n1\n\n\ntotal_TD\n1775\n\n\n\n\n\n\n\nerror &lt;- left_join(df, oobe, join_by(SYMBL))\nerror &lt;- left_join(error, rmsd, join_by(SYMBL))\nerror %&gt;% head()\n\n\n\n\n\nSYMBL\nn_plots\nvar_exp\nrmsd\n\n\n\n\nPIPO_TD\n85\n48.29\n44.07312\n\n\nABLA_TD\n317\n75.49\n389.09393\n\n\nTSME_TD\n165\n69.18\n168.86095\n\n\nPSME_TD\n353\n33.45\n595.13705\n\n\nABGR_TD\n131\n89.30\n232.14274\n\n\nLALY_TD\n20\n67.38\n14.69104\n\n\n\n\n\n\n\nerror %&gt;% filter(!is.na(var_exp)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = var_exp, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"Variation Explained\") + \n  xlab(\"Species\")\n\n\n\n\n\n\n\nerror %&gt;% filter(is.na(var_exp))\n\n\n\n\n\nSYMBL\nn_plots\nvar_exp\nrmsd\n\n\n\n\n2TB_TD\n2\nNaN\n0\n\n\n\n\n\n\n\nerror %&gt;% filter(!is.na(rmsd)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = rmsd, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"RMSD\") + \n  xlab(\"Species\")\n\n\n\n\n\n\n\n\n\ncols_tds &lt;- imp_data_nc %&gt;% select(contains(\"_TD\")) %&gt;% select_if(~ sum(.)&gt;0) %&gt;% names()\n\ndf &lt;- tribble(\n  ~SYMBL, ~std_dev\n)\n\n\nfor (i in 1:length(cols_tds)) {  ## length(cols_tds)\n  t &lt;- imp_data_nc %&gt;% select(STANDPLOT_CN, cols_tds[i]) %&gt;% filter(!!sym(cols_tds[i]) &gt; 0)\n  \n  tdf &lt;- tribble(\n  ~SYMBL, ~std_dev, \n  cols_tds[i], sd(t[,2])\n  )\n  \n  df &lt;- add_row(df, tdf)\n}\ndf\n\n\n\n\n\nSYMBL\nstd_dev\n\n\n\n\nPIPO_TD\n142.37490\n\n\nABLA_TD\n734.44932\n\n\nTSME_TD\n375.27881\n\n\nPSME_TD\n1157.86634\n\n\nABGR_TD\n1366.79489\n\n\nLALY_TD\n336.55374\n\n\nPIEN_TD\n3152.80392\n\n\nPICO_TD\n1109.06819\n\n\nLAOC_TD\n2812.38729\n\n\nACGL_TD\n115.73176\n\n\nTABR2_TD\n413.61914\n\n\nCHNO_TD\n322.81252\n\n\nABAM_TD\n1240.23926\n\n\nTHPL_TD\n371.27002\n\n\nTSHE_TD\n1806.83546\n\n\nBEPA_TD\n170.94715\n\n\nPREM_TD\n353.68410\n\n\nALRU2_TD\n137.09518\n\n\nPOTR5_TD\n390.00795\n\n\nPIAL_TD\n107.77648\n\n\nABPR_TD\n106.01692\n\n\nPIMO3_TD\n168.46352\n\n\nACMA3_TD\n322.99601\n\n\nPRVI_TD\n204.07519\n\n\n2TB_TD\n106.01692\n\n\nPSMA_TD\n0.00000\n\n\nPOBAT_TD\n74.96528\n\n\nALRH2_TD\nNA\n\n\nPISI_TD\nNA\n\n\ntotal_TD\n1727.99460\n\n\n\n\n\nerror &lt;- left_join(error, df, join_by(SYMBL))\n\n\nerror %&gt;% filter(!is.na(std_dev)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = std_dev, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"Standard Deviation\") + \n  xlab(\"Species\")\n\n\n\n\n\n\n\n\n\nyaiVarImp(rf_reg_noclass)"
  },
  {
    "objectID": "7_RF_GroupSpp_and_Counts.html",
    "href": "7_RF_GroupSpp_and_Counts.html",
    "title": "7 RF Groups & Counts",
    "section": "",
    "text": "03Sept24\nLibraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and access\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \nlibrary(BAMMtools)                    # Natural Breaks\n\n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")"
  },
  {
    "objectID": "7_RF_GroupSpp_and_Counts.html#breaks",
    "href": "7_RF_GroupSpp_and_Counts.html#breaks",
    "title": "7 RF Groups & Counts",
    "section": "Breaks",
    "text": "Breaks\n\nsapply(y_resp_counts, n_distinct)\n\n     PIPO_TD      ABLA_TD      TSME_TD      PSME_TD      ABGR_TD      LALY_TD      PIEN_TD      PICO_TD      LAOC_TD \n           9           36           20           18           24            7           16           22           12 \n     ACGL_TD     TABR2_TD      CHNO_TD      ABAM_TD      THPL_TD      TSHE_TD      BEPA_TD      PREM_TD     POTR5_TD \n           6           12           12           57           16           35            4            7            6 \n     PIAL_TD     ALRU2_TD      ABPR_TD     PIMO3_TD      PRVI_TD     Other_TD     ACMA3_TD      PSMA_TD     ALRH2_TD \n           7            5            3            7            7            3            6            2            2 \n    POBAT_TD      PISI_TD     total_TD STANDPLOT_CN    largest_1    largest_2    largest_3     max_spp1     max_spp2 \n           4            2           81         2739           76           26           10           27           26 \n    max_spp3 \n          21 \n\n\nFor N.Cascades, only total_td has enough distinct counts to need groupings that would avoid the yaImpute factor limit.\n\nggplot(y_resp_counts) + \n  aes(x = total_TD) + \n  geom_histogram(bins = 30)\n\n\n\n\n\n\n\n\n\nNatural jenks\nFinding the values of Total_TD that will be classed as high TD\n\nn &lt;- 49\n\nt &lt;- unique(y_resp_counts$total_TD)\nt &lt;- t |&gt; sort()\nt[n]\n\n[1] 50\n\nt &lt;- t[t &gt; n]\n\nFinding the natural breaks for those values that exceed the 53 class limit\n\nbreaks &lt;- getJenksBreaks(t, 4)\nbreaks\n\n[1]  50 124 211 362\n\n\nPlotting the values that will be classed as three classes of high.\n\nggplot() + \n  aes(x = t) + \n  geom_histogram(bins = 100) + \n  geom_vline(xintercept = breaks)\n\n\n\n\n\n\n\n\nChanging the values inside the breaks\n\nbreaks\n\n[1]  50 124 211 362\n\ny_resp_counts_grouped &lt;- y_resp_counts |&gt; \n  mutate(\n    total_TD = ifelse(total_TD &gt;= breaks[1] & total_TD &lt; breaks[2], breaks[1], total_TD), \n    total_TD = ifelse(total_TD &gt;= breaks[2] & total_TD &lt; breaks[3], breaks[2], total_TD), \n    total_TD = ifelse(total_TD &gt;= breaks[3], breaks[4], total_TD), \n    total_TD = as.integer(total_TD)\n    )\n\nt &lt;- y_resp_counts_grouped |&gt; select(total_TD)\n\nShowing the difference in histograms between the dataframes with and without grouping by breaks.\nggplot(t) + \n  aes(x = total_TD) + \n  geom_histogram(bins = 30) + \n  labs(title = \"With Breaks\")\n  # geom_vline(xintercept = breaks)\n\n\nggplot(y_resp_counts) + \n  aes(x = total_TD) + \n  geom_histogram(bins = 30) + \n  labs(title = \"With Out Breaks\")\n\n\n\n\n\n\n\n\n\n\nRemoving Columns\n\ny_resp_counts_grouped &lt;- y_resp_counts_grouped |&gt; select(-c(largest_3, max_spp3))\nnames &lt;- y_resp_counts_grouped |&gt; names()\nnames\n\n [1] \"PIPO_TD\"      \"ABLA_TD\"      \"TSME_TD\"      \"PSME_TD\"      \"ABGR_TD\"      \"LALY_TD\"      \"PIEN_TD\"      \"PICO_TD\"     \n [9] \"LAOC_TD\"      \"ACGL_TD\"      \"TABR2_TD\"     \"CHNO_TD\"      \"ABAM_TD\"      \"THPL_TD\"      \"TSHE_TD\"      \"BEPA_TD\"     \n[17] \"PREM_TD\"      \"POTR5_TD\"     \"PIAL_TD\"      \"ALRU2_TD\"     \"ABPR_TD\"      \"PIMO3_TD\"     \"PRVI_TD\"      \"Other_TD\"    \n[25] \"ACMA3_TD\"     \"PSMA_TD\"      \"ALRH2_TD\"     \"POBAT_TD\"     \"PISI_TD\"      \"total_TD\"     \"STANDPLOT_CN\" \"largest_1\"   \n[33] \"largest_2\"    \"max_spp1\"     \"max_spp2\"    \n\n\nSetting all columns to factors\n\nt &lt;- y_resp_counts_grouped |&gt; mutate_if(is.integer, as.factor)\nt &lt;- t |&gt; mutate_if(is.character, as.factor)\ny_resp_factors &lt;-  t\n\ny_resp_factors |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPIPO_TD\nABLA_TD\nTSME_TD\nPSME_TD\nABGR_TD\nLALY_TD\nPIEN_TD\nPICO_TD\nLAOC_TD\nACGL_TD\nTABR2_TD\nCHNO_TD\nABAM_TD\nTHPL_TD\nTSHE_TD\nBEPA_TD\nPREM_TD\nPOTR5_TD\nPIAL_TD\nALRU2_TD\nABPR_TD\nPIMO3_TD\nPRVI_TD\nOther_TD\nACMA3_TD\nPSMA_TD\nALRH2_TD\nPOBAT_TD\nPISI_TD\ntotal_TD\nSTANDPLOT_CN\nlargest_1\nlargest_2\nmax_spp1\nmax_spp2\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12964449010497_1\n0.0000\n0.00000\nzero\nzero\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12964449010497_3\n0.0000\n0.00000\nzero\nzero\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12964449010497_4\n0.0000\n0.00000\nzero\nzero\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12964657010497_1\n0.0000\n0.00000\nzero\nzero\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n12965290010497_2\n149.9306\n0.00000\nPIPO_TD\nzero\n\n\n0\n2\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n12965572010497_4\n149.9306\n74.96528\nABLA_TD\nTSME_TD\n\n\n\n\n\n\n\nsummary(y_resp_factors)\n\n    PIPO_TD        ABLA_TD        TSME_TD        PSME_TD        ABGR_TD     LALY_TD      PIEN_TD        PICO_TD    \n 0      :2682   0      :2447   0      :2586   0      :2464   0      :2629   0 :2723   0      :2659   0      :2671  \n 1      :  42   1      :  61   1      :  55   1      : 143   1      :  30   1 :   7   1      :  32   1      :  32  \n 2      :   7   2      :  58   2      :  28   2      :  45   2      :  17   2 :   3   2      :  11   2      :   8  \n 4      :   3   4      :  26   3      :  23   3      :  31   3      :  16   3 :   2   3      :   8   4      :   4  \n 3      :   1   6      :  23   4      :  13   4      :  13   4      :  11   4 :   2   4      :   6   3      :   3  \n 6      :   1   3      :  21   6      :   7   5      :  12   6      :   7   7 :   1   5      :   5   8      :   3  \n (Other):   3   (Other): 103   (Other):  27   (Other):  31   (Other):  29   21:   1   (Other):  18   (Other):  18  \n    LAOC_TD     ACGL_TD     TABR2_TD       CHNO_TD        ABAM_TD        THPL_TD        TSHE_TD     BEPA_TD  PREM_TD \n 0      :2721   0:2725   0      :2709   0      :2696   0      :2162   0      :2634   0      :2407   0:2736   0:2724  \n 1      :   5   1:   9   1      :  13   1      :  14   1      : 113   1      :  50   1      :  91   1:   1   1:   8  \n 3      :   4   2:   2   3      :   4   2      :   8   2      :  66   2      :  25   2      :  43   3:   1   2:   1  \n 2      :   1   3:   1   4      :   4   3      :   6   6      :  51   3      :   9   3      :  43   6:   1   3:   1  \n 5      :   1   5:   1   8      :   2   5      :   4   3      :  48   4      :   4   6      :  36            4:   2  \n 6      :   1   6:   1   2      :   1   10     :   3   4      :  43   5      :   3   5      :  23            5:   1  \n (Other):   6            (Other):   6   (Other):   8   (Other): 256   (Other):  14   (Other):  96            6:   2  \n POTR5_TD  PIAL_TD  ALRU2_TD ABPR_TD  PIMO3_TD  PRVI_TD  Other_TD ACMA3_TD  PSMA_TD  ALRH2_TD POBAT_TD PISI_TD \n 0 :2724   0:2693   0:2731   0:2737   0 :2709   0:2733   0:2737   0 :2730   0:2737   0:2738   0:2736   0:2738  \n 1 :   6   1:  26   1:   3   2:   1   1 :  23   1:   1   1:   1   1 :   3   1:   2   1:   1   1:   1   1:   1  \n 2 :   4   2:  10   2:   3   4:   1   2 :   3   2:   1   3:   1   2 :   2                     2:   1           \n 3 :   2   3:   6   3:   1            3 :   1   4:   1            4 :   2                     3:   1           \n 6 :   2   4:   2   7:   1            5 :   1   6:   1            6 :   1                                      \n 27:   1   5:   1                     6 :   1   7:   1            14:   1                                      \n           7:   1                     13:   1   8:   1                                                         \n    total_TD              STANDPLOT_CN    largest_1          largest_2          max_spp1       max_spp2   \n 0      :1241   12964449010497_1:   1   Min.   :    0.00   Min.   :   0.00   zero   :1241   zero   :2135  \n 1      : 313   12964449010497_3:   1   1st Qu.:    0.00   1st Qu.:   0.00   ABAM_TD: 444   ABAM_TD: 114  \n 2      : 182   12964449010497_4:   1   Median :   74.97   Median :   0.00   ABLA_TD: 240   TSHE_TD:  98  \n 3      : 138   12964657010497_1:   1   Mean   :  378.90   Mean   :  53.12   TSHE_TD: 206   TSME_TD:  74  \n 4      : 106   12965290010497_2:   1   3rd Qu.:  299.86   3rd Qu.:   0.00   PSME_TD: 188   PSME_TD:  64  \n 6      : 103   12965572010497_4:   1   Max.   :25338.26   Max.   :6596.94   ABGR_TD:  94   THPL_TD:  47  \n (Other): 656   (Other)         :2733                                        (Other): 326   (Other): 207  \n\n\nThe largest count in North Cascades is 328 seedlings for a single species and 362 of all species on a subplot.\n# i &lt;- 1\nfor (i in 30:length(td_names)) { \n  \n  t &lt;- y_resp |&gt; select(td_names[i])\n  t &lt;- t |&gt; rename(x = td_names[i])\n  p3 &lt;- t |&gt; ggplot() +\n    aes(x = x) + \n    geom_histogram(\n      # y = after_stat(count), \n      bins = 30\n      ) + \n    labs(title = str_c(\"Raw \", td_names[i]))\n  \n  \n  \n  t &lt;- y_resp_factors |&gt; select(td_names[i])\n  t &lt;- t |&gt; rename(x = td_names[i])\n  p &lt;- t |&gt; ggplot() +\n    aes(x = x, fill = x) + \n    geom_bar(\n      # y = after_stat(count)\n      ) + \n    labs(title = str_c(\"Factor \", td_names[i])) + \n    scale_x_discrete(guide = guide_axis(angle = 90)) + \n    theme(legend.position=\"none\")\n  \n  t &lt;- y_resp_counts_grouped |&gt; select(td_names[i])\n  t &lt;- t |&gt; rename(x = td_names[i])\n  p2 &lt;- t |&gt; ggplot() +\n    aes(x = x) + \n    geom_histogram(\n      # y = after_stat(count), \n      bins = 53\n      ) + \n    labs(title = str_c(\"Counts \", td_names[i]))\n  \n  print(p)\n  print(p2)\n  print(p3)\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny_resp_factors$total_TD |&gt; n_distinct()\n\n[1] 51"
  },
  {
    "objectID": "7_RF_GroupSpp_and_Counts.html#regression-variation",
    "href": "7_RF_GroupSpp_and_Counts.html#regression-variation",
    "title": "7 RF Groups & Counts",
    "section": "Regression variation",
    "text": "Regression variation\n\nrf_imp &lt;- rf_yai |&gt; impute()\nrf_imp &lt;- rf_imp |&gt; select(contains(\"_TD\")) \nrf_imp &lt;- rf_imp |&gt; select(order(colnames(rf_imp)))\n\n\nABAM_TD 32.32 %var explained\n\nt &lt;- rf_imp[, 1:2]\n\nt &lt;- t |&gt; mutate(\n  # sq_dev = (ABAM_TD - ABAM_TD.o)^2, \n  ssr = (ABAM_TD.o - ABAM_TD)^2,\n  sst = (ABAM_TD.o - mean(t$ABAM_TD.o))^2\n  )\n\n# Root Meaning the squared difference\n# sqrt(mean(t$sq_dev))\n\nssr &lt;- sum(t$ssr)\nsst &lt;- sum(t$sst)\n\n1 - ssr/sst\n\n\nt &lt;- t |&gt; drop_na()|&gt; mutate(\n  \n  # ssres = (y_i - f_i)^2,\n  ssres = (ABAM_TD.o - ABAM_TD)^2,\n  \n  # sstot = (y_i - mean(t$y_i))^2,\n  sstot = (ABAM_TD.o - mean(t$ABAM_TD.o))^2, \n  \n  # ssreg = (f_i - mean(t$y_i))^2,\n  ssreg = (ABAM_TD - mean(t$ABAM_TD.o))^2,\n  \n  # st = ssres + ssreg, \n  st = ssres + ssreg\n  )\n\nr2 &lt;- sum(t$ssreg)/sum(t$st)\n\nmean(t$ssreg)/mean(t$st)"
  },
  {
    "objectID": "5_TD_Imp.html",
    "href": "5_TD_Imp.html",
    "title": "5 TD Imp",
    "section": "",
    "text": "26AUG24\nLibraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")"
  },
  {
    "objectID": "5_TD_Imp.html#rf",
    "href": "5_TD_Imp.html#rf",
    "title": "5 TD Imp",
    "section": "RF",
    "text": "RF\nAdjust n1 and n2 to get RF to work.\n\nn1 is the number from max_spp1 to remove\nn2 is the number from max_spp2 to keep.\n3 and 19 are working in N.C.\n\nRun RandomForest\n\nn1 &lt;- 3\nn2 &lt;- 19\n\n# Prep\ny_above0 &lt;- yfull |&gt; filter(total_TD &gt; 0)\n\nCNs_wRegen &lt;- y_above0 |&gt; select(STANDPLOT_CN)\n\n# X Variables\nx_above0 &lt;- left_join(CNs_wRegen, x_pred, join_by(STANDPLOT_CN))\n\nx &lt;- x_above0 |&gt; \n  select(-c(a,g)) |&gt; \n  mutate(\n    f = factor(f), \n    p = factor(p)\n  ) |&gt; \n  relocate(f, p, .after = BAp) |&gt; \n  select(!all_of(remove))\n\n\n# Y variables\n\nt &lt;- y_above0 |&gt; group_by(max_spp1) |&gt; \n  summarise(\n    n = n(), \n    tpa = sum(largest_1)\n  ) |&gt; \n  arrange(n)\n\ntd_remove &lt;- t[1:n1,]$max_spp1 |&gt; as.character()\n\n\ny_rare &lt;- y_above0 |&gt; select(all_of(td_remove))\n\ny_rare &lt;- y_rare |&gt; mutate(\n  rare_TD = rowSums(y_rare[grep(\"_TD\", names(y_rare))])\n)\n\ny_above0$rare_TD &lt;- y_rare$rare_TD\n\ny_above0 &lt;- y_above0 |&gt; select(!all_of(td_remove))\n\n\n\n\n\ny &lt;- y_above0 |&gt; select(STANDPLOT_CN, max_spp1, max_spp2, largest_1, largest_2, total_TD)\n\ny_vars &lt;- names(y)\n\nspp2_list &lt;- y |&gt; group_by(max_spp2) |&gt; summarise(\n  n = n()\n) |&gt; arrange(desc(n))\n\nspp2_list &lt;- spp2_list$max_spp2[1:n2]\n\ny &lt;- y |&gt; mutate(\n  max_spp1 = ifelse(\n    max_spp1 %in% td_remove, \"rare\", max_spp1\n  ),\n  \n  max_spp2 = ifelse(\n    max_spp2 %in% spp2_list, max_spp2, \"Other\"\n  )\n)\n\ny &lt;- y |&gt; mutate(\n  max_spp1 = factor(max_spp1),\n  max_spp2 = factor(max_spp2)\n  )\n\n\n\n\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# save(rf_yai, file = str_c(\"RF_26AUG24_original_Y\", \".Rdata\"))\nload(str_c(\"RF_26AUG24_original_Y\", \".Rdata\"))"
  },
  {
    "objectID": "5_TD_Imp.html#ancillary-data",
    "href": "5_TD_Imp.html#ancillary-data",
    "title": "5 TD Imp",
    "section": "Ancillary data",
    "text": "Ancillary data\nCopying the St.Joe example in the yaImpute paper, I am adding the original TDs back onto the imputation.\n\ny_ancil &lt;- y_above0\n\ny_ancil &lt;- y_ancil |&gt; mutate(\n  max_spp1 = factor(max_spp1), \n  max_spp2 = factor(max_spp2)\n) |&gt; select(-c(max_spp3, largest_3))\n\ny_ancil &lt;- y_ancil |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny_ancil &lt;- y_ancil |&gt; as.data.frame()\n\nrf_imp_ancillary &lt;- impute(rf_yai, ancillaryData = y_ancil) |&gt; drop_na()\n# rf_imp_ancillary |&gt; head()\nrf_imp_ancillary |&gt; select(order(colnames(rf_imp_ancillary))) |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_TD\nABAM_TD.o\nABCO_TD\nABCO_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nACGL_TD\nACGL_TD.o\nACMA3_TD\nACMA3_TD.o\nALRU2_TD\nALRU2_TD.o\nBEOC2_TD\nBEOC2_TD.o\nBEPA_TD\nBEPA_TD.o\nCHLA_TD\nCHLA_TD.o\nCHNO_TD\nCHNO_TD.o\nCONU4_TD\nCONU4_TD.o\nLALY_TD\nLALY_TD.o\nLAOC_TD\nLAOC_TD.o\nlargest_1\nlargest_1.o\nlargest_2\nlargest_2.o\nMAFU_TD\nMAFU_TD.o\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\nOther_TD\nOther_TD.o\nPIAL_TD\nPIAL_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPISI_TD\nPISI_TD.o\nPOTR5_TD\nPOTR5_TD.o\nPREM_TD\nPREM_TD.o\nPRPE2_TD\nPRPE2_TD.o\nPRVI_TD\nPRVI_TD.o\nPSME_TD\nPSME_TD.o\nQUGA4_TD\nQUGA4_TD.o\nrare_TD\nrare_TD.o\nTABR2_TD\nTABR2_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965290010497_2\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0\n0\n74.96528\n149.93057\n0.0000\n0.00000\n0\n0\nPIPO_TD\nPIPO_TD\nzero\nzero\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n74.96528\n149.9306\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0\n0\n0\n74.96528\n149.93057\n0\n0\n0\n0\n\n\n12965856010497_1\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\nPOBAT_TD\nPSME_TD\nzero\nzero\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n74.96528\n0\n0\n74.96528\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0\n0\n0\n0\n\n\n12967289010497_3\n0\n0\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\nABGR_TD\nABGR_TD\nzero\nzero\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0\n0\n0\n0\n\n\n12970163010497_1\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\nPSME_TD\nPSME_TD\nzero\nzero\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0\n0\n0.00000\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0\n0\n0\n0\n\n\n12970308010497_2\n0\n0\n0\n0\n0.00000\n0.00000\n449.7917\n74.96528\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n74.96528\n0\n0\n449.79170\n74.96528\n0.0000\n74.96528\n0\n0\nABLA_TD\nABLA_TD\nzero\nLALY_TD\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0\n0\n0\n449.79170\n149.93056\n0\n0\n0\n0\n\n\n12970308010497_4\n0\n0\n0\n0\n0.00000\n0.00000\n224.8958\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n149.9306\n0.00000\n0\n0\n224.89585\n149.93057\n149.9306\n0.00000\n0\n0\nABLA_TD\nPIEN_TD\nLALY_TD\nzero\n0\n0\n0\n0\n0\n0\n0\n149.9306\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0\n0\n0\n374.82641\n149.93057\n0\n0\n0\n0\n\n\n\n\n\n\n\nrmsd(rf_imp_ancillary) |&gt; head(n =10)\n\n\n\n\n\n\nrmsd\n\n\n\n\nPIPO_TD\n44.94914\n\n\nABLA_TD\n289.32679\n\n\nTSME_TD\n186.02935\n\n\nPSME_TD\n657.62816\n\n\nABGR_TD\n454.06698\n\n\nLALY_TD\n47.69618\n\n\nPIEN_TD\n261.37194\n\n\nPICO_TD\n267.14061\n\n\nLAOC_TD\n322.04298\n\n\nACGL_TD\n18.79321\n\n\n\n\n\n\n\nVar importance\n\nx |&gt; names()\n\n [1] \"CC\"       \"SDI\"      \"LAT\"      \"LON\"      \"ELEV\"     \"Northing\" \"Easting\"  \"SLOPE\"    \"BAp\"      \"f\"        \"p\"       \n[12] \"PIPO_BA\"  \"PSME_BA\"  \"ABAM_BA\"  \"TSME_BA\"  \"ABGR_BA\"  \"PICO_BA\"  \"LALY_BA\"  \"PIAL_BA\"  \"PIEN_BA\"  \"ABLA_BA\"  \"LAOC_BA\" \n[23] \"THPL_BA\"  \"ALRU2_BA\" \"TSHE_BA\"  \"TABR2_BA\" \"CHNO_BA\"  \"POBAT_BA\" \"ABPR_BA\"  \"BEPA_BA\"  \"PREM_BA\"  \"POTR5_BA\" \"PIMO3_BA\"\n[34] \"ACGL_BA\"  \"ACMA3_BA\" \"Other_BA\" \"ALRH2_BA\" \"PRVI_BA\" \n\n\n\nyaiVarImp(rf_yai)\n\n\n\n\n\n\n\n\n\n\nTerminal Buckets\n\nload(\"example_imputation.Rdata\")\n# a &lt;- t[8:9,]\n# a &lt;-  a %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_BA\nABAM_BA.o\nBAp\nBAp.o\nCC\nCC.o\nEasting\nEasting.o\nELEV\nELEV.o\nlargest_1\nlargest_1.o\nlargest_2\nlargest_2.o\nLAT\nLAT.o\nLON\nLON.o\nNorthing\nNorthing.o\nSDI\nSDI.o\nSLOPE\nSLOPE.o\ntotal_TD\ntotal_TD.o\nTSME_BA\nTSME_BA.o\nf\nf.o\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\np\np.o\n\n\n\n\n12990036010497_1\n16.90395\n33.80122\n47.81995\n61.28085\n24\n21\n-0.4848096\n-0.5877853\n4500\n4500\n449.7917\n374.8264\n449.7917\n149.9306\n48.95221\n48.95221\n-121.8302\n-121.8302\n0.8746197\n0.8090170\n154\n161\n55\n53\n899.5834\n524.7570\n30.86558\n17.08986\nC\nC\nTSME_TD\nABAM_TD\nABAM_TD\nTSME_TD\nM\nM\n\n\n12990036010497_4\n33.80122\n16.90395\n61.28085\n47.81995\n21\n24\n-0.5877853\n-0.4848096\n4500\n4500\n374.8264\n449.7917\n149.9306\n449.7917\n48.95221\n48.95221\n-121.8302\n-121.8302\n0.8090170\n0.8746197\n161\n154\n53\n55\n524.7570\n899.5834\n17.08986\n30.86558\nC\nC\nABAM_TD\nTSME_TD\nTSME_TD\nABAM_TD\nM\nM\n\n\n\n\n\n\nThe above example shows why I think that the CNs are in the terminal buckets. These two CNs are nearest neighbors in real and Random Forest’s Space. Each has been selected as the others nearest neighbor(assuming), and all of the observed values from one are written as the imputed values for the other and vice versa."
  },
  {
    "objectID": "5_TD_Imp.html#heat-maps",
    "href": "5_TD_Imp.html#heat-maps",
    "title": "5 TD Imp",
    "section": "Heat maps",
    "text": "Heat maps\n\nMax spp 1\n\n\nCode\nrf_imp_test |&gt; select(max_spp1, max_spp1.o) |&gt; \n                  mutate(\n                    max_spp1 =  as.character(max_spp1), \n                    max_spp1.o =  as.character(max_spp1.o),\n                    num = 1) |&gt;\n              group_by(max_spp1, max_spp1.o) |&gt;\n              summarise(\n                     num = sum(num),\n                     .groups = \"drop\") |&gt;\n  drop_na() |&gt;\n  arrange(max_spp1, max_spp1.o) |&gt; \n  ggplot() +\n      aes(x = max_spp1, y = max_spp1.o, fill = num) +\n  # aes(x = max_spp1, y = max_spp1.o, fill = max_spp1.o) +\n      \n  geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\nMax spp 2\n\n\nCode\nrf_imp_test |&gt; select(max_spp2, max_spp2.o) |&gt; \n                  mutate(\n                    max_spp2 =  as.character(max_spp2), \n                    max_spp2.o =  as.character(max_spp2.o),\n                    equal = 1) |&gt;  \n              group_by(max_spp2, max_spp2.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  arrange(max_spp2, max_spp2.o) |&gt; \n  ggplot() +\n      aes(x = max_spp2, y = max_spp2.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  # scale_fill_gradient2(low = \"white\", mid = \"yellow\", high = \"red\", midpoint = 100) +\n  scale_fill_gradientn(\n                       colors = c(\"white\", \"red\"),\n                       # values = c(0, 15, 75, 855)\n                       ) +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\nSame as above, but without zero\n\n\nCode\nrf_imp_test |&gt; select(max_spp2, max_spp2.o) |&gt; \n                  mutate(\n                    max_spp2 =  as.character(max_spp2), \n                    max_spp2.o =  as.character(max_spp2.o),\n                    equal = 1) |&gt;  \n              group_by(max_spp2, max_spp2.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  arrange(max_spp2, max_spp2.o) |&gt; \n  filter(max_spp2 != \"zero\" & max_spp2.o != \"zero\") |&gt; \n  ggplot() +\n      aes(x = max_spp2, y = max_spp2.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  # scale_fill_gradient2(low = \"white\", mid = \"yellow\", high = \"red\", midpoint = 100) +\n  scale_fill_gradientn(\n                       colors = c(\"white\", \"red\"),\n                       # values = c(0, 15, 75, 855)\n                       ) +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\nCode\nrf_imp_test |&gt; select(f, f.o) |&gt; \n                  mutate(\n                    f =  as.character(f), \n                    f.o =  as.character(f.o),\n                    equal = 1) |&gt;  \n              group_by(f, f.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  ggplot() +\n      aes(x = f, y = f.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\np\n\n\nCode\nrf_imp_test |&gt; select(p, p.o) |&gt; \n                  mutate(\n                    p =  as.character(p), \n                    p.o =  as.character(p.o),\n                    equal = 1) |&gt;  \n              group_by(p, p.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt; \n  ggplot() +\n      aes(x = p, y = p.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\nunique(as.character(rf_imp_test$p)) |&gt; noquote()\n\n [1] D    &lt;NA&gt; A    M    H    F    Q    E    W    C    P   \n\n\n\nD doug fir\nA Alpine\nM Mountain Hemlock\nF Silver fir\nQ Probably Oak(Quercus), this isn’t in the Wenatchee guide\nE Sub-alpine fir\nW Grand Fir\nC W. Hemlock\nP Ponderosa\n\nThe graphs were perhaps a waste of time, but I thought I could perhaps show something.\nIt could be interesting to see what happens when using the species groups as opposed to actual seedlings."
  },
  {
    "objectID": "5_TD_Imp.html#ancillary-data-1",
    "href": "5_TD_Imp.html#ancillary-data-1",
    "title": "5 TD Imp",
    "section": "Ancillary data",
    "text": "Ancillary data\n\ny_ancil &lt;- y_above0\n\ny_ancil &lt;- y_ancil |&gt; mutate(\n  max_spp1 = factor(max_spp1), \n  max_spp2 = factor(max_spp2)\n) |&gt; select(-c(max_spp3, largest_3))\n\ny_ancil &lt;- y_ancil |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny_ancil &lt;- y_ancil |&gt; as.data.frame()\n\nrf_imp_ancillary &lt;- impute(rf_yai, ancillaryData = y_ancil) |&gt; drop_na()\ny_ancillary_imp &lt;- rf_imp_ancillary |&gt; select(order(colnames(rf_imp_ancillary))) \ny_ancillary_imp |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_TD\nABAM_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nlargest_1\nlargest_1.o\nlargest_2\nlargest_2.o\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\nOther_TD\nOther_TD.o\nPISI_TD\nPISI_TD.o\nPSME_TD\nPSME_TD.o\nrare_TD\nrare_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965856010497_1\n0\n0\n0.00000\n0.00000\n0\n0.00000\n0\n0\n149.93057\n74.96528\n0.00000\n0.00000\nPOTR5_TD\nPSME_TD\nzero\nzero\n0\n0\n0\n0\n0.0000\n74.96528\n149.93057\n0.00000\n149.93057\n74.96528\n0\n0\n0\n0\n\n\n12967289010497_1\n0\n0\n74.96528\n0.00000\n0\n0.00000\n0\n0\n74.96528\n149.93057\n0.00000\n74.96528\nABGR_TD\nPSME_TD\nzero\nPIPO_TD\n0\n0\n0\n0\n0.0000\n149.93057\n0.00000\n74.96528\n74.96528\n224.89585\n0\n0\n0\n0\n\n\n12967289010497_2\n0\n0\n0.00000\n224.89585\n0\n0.00000\n0\n0\n149.93057\n224.89585\n74.96528\n0.00000\nPSME_TD\nABGR_TD\nPIPO_TD\nzero\n0\n0\n0\n0\n149.9306\n0.00000\n74.96528\n0.00000\n224.89585\n224.89585\n0\n0\n0\n0\n\n\n12967289010497_3\n0\n0\n0.00000\n74.96528\n0\n0.00000\n0\n0\n149.93057\n74.96528\n74.96528\n0.00000\nPSME_TD\nABGR_TD\nPIPO_TD\nzero\n0\n0\n0\n0\n149.9306\n0.00000\n74.96528\n0.00000\n224.89585\n74.96528\n0\n0\n0\n0\n\n\n12970163010497_1\n0\n0\n0.00000\n0.00000\n0\n0.00000\n0\n0\n149.93057\n74.96528\n0.00000\n0.00000\nPSME_TD\nPSME_TD\nzero\nzero\n0\n0\n0\n0\n149.9306\n74.96528\n0.00000\n0.00000\n149.93057\n74.96528\n0\n0\n0\n0\n\n\n12970308010497_3\n0\n0\n0.00000\n0.00000\n0\n74.96528\n0\n0\n149.93057\n524.75698\n74.96528\n74.96528\nLALY_TD\nLALY_TD\nPIAL_TD\nABLA_TD\n0\n0\n0\n0\n0.0000\n0.00000\n224.89585\n524.75698\n224.89585\n599.72226\n0\n0\n0\n0\n\n\n\n\n\ny_ancillary_imp |&gt; nrow()\n\n[1] 1106\n\n\nJust looking at an example to see what is imputed where\n\ny_ancillary_imp |&gt; \n  rownames_to_column(\"sCN\") |&gt; \n  mutate(CN = str_sub(sCN, 1, 15)) |&gt; \n  filter(CN == \"13199766010497_\") %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsCN\nABAM_TD\nABAM_TD.o\nlargest_1\nlargest_1.o\nlargest_2\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\nPSME_TD\ntotal_TD\ntotal_TD.o\nTSHE_TD\nCN\n\n\n\n\n13199766010497_1\n149.9306\n74.96528\n149.93057\n74.96528\n0.00000\nABAM_TD\nABAM_TD\nzero\nzero\n0.00000\n149.9306\n74.96528\n0.00000\n13199766010497_\n\n\n13199766010497_2\n0.0000\n449.79170\n74.96528\n449.79170\n74.96528\nPSME_TD\nABAM_TD\nTSHE_TD\nzero\n74.96528\n149.9306\n449.79170\n74.96528\n13199766010497_\n\n\n13199766010497_3\n149.9306\n1274.40980\n149.93057\n1274.40980\n0.00000\nABAM_TD\nABAM_TD\nzero\nzero\n0.00000\n149.9306\n1274.40980\n0.00000\n13199766010497_\n\n\n13199766010497_4\n149.9306\n1124.47924\n149.93057\n1124.47924\n0.00000\nABAM_TD\nABAM_TD\nzero\nzero\n0.00000\n149.9306\n1124.47924\n0.00000\n13199766010497_\n\n\n\n\n\n\nIt looks like subplots 1, 3, & 4 were all imputed to the same stand. The imputed values are all the same for this set, except subplot 2.\n\nChecking RMSD\nRMSD is calculated from the data that does not contain NAs.\nThe ancillary data was added to the yai object, and a new imputation was performed on the old prediction tree. The resulting dataframe uses the same distance measures from the original yai run, but contains the y data that we are actually interested in.\nThe replicates and bootstrap variables that were left out in the original run (and therefore the ancillary imputation) come out as NAs in the imputed data. For each variable, if it was used in the trees that best predicted that subplot as being in the same terminal node(bucket) as itself, it comes out as a value in the imputed data. If not, it comes out as an NA.\nThe RMSD of each variable is calculated from the full list of observed and imputed values for that variable. In the example case, there were ~1106 rows of subplots and bootstrap replicates that contained values and ~900 where that variable was left out of the tree.\nThe RMSD for this variable was calcuted on the 1106 rows that contained values.\n\n# Selecting the first and second columns, ABAM imputed and observed\nt &lt;- y_ancillary_imp[,1:2]\n# Finding the squared difference\nt &lt;- t |&gt; mutate(sq_dev = (ABAM_TD - ABAM_TD.o)^2)\n# Root Meaning the squared difference\nsqrt(mean(t$sq_dev))\n\n[1] 819.4351\n\n\nPulling the RMSD from the yaImpute\n\nt3 &lt;- rmsd(rf_imp_ancillary) |&gt; rownames_to_column(\"spp\")\nt3 |&gt; filter(spp == \"ABAM_TD\")\n\n\n\n\n\nspp\nrmsd\n\n\n\n\nABAM_TD\n819.4351\n\n\n\n\n\n\nPulling an example\n\nt  |&gt; rownames_to_column(\"CN\") |&gt; filter(str_detect(CN, \"^40220711010497\"))\n\n\n\n\n\nCN\nABAM_TD\nABAM_TD.o\nsq_dev\n\n\n\n\n40220711010497_1\n1499.306\n7271.632\n33319756\n\n\n40220711010497_2\n7271.632\n2473.854\n23018674\n\n\n40220711010497_3\n7271.632\n1499.306\n33319756\n\n\n40220711010497_4\n7271.632\n2323.924\n24479821\n\n\n\n\n\n\nSubplots 2, 3, & 4 were all imputed from 1 at 1’s observed value. 1 was imputed from somewhere else.\nLooking at the CNs used to impute to each plot, (I think)\n\nt &lt;- foruse(rf_yai, kth = 1, targetsOnly = T)\nt &lt;- t |&gt; rownames_to_column(\"CN\") |&gt; as.data.frame()\nt3 &lt;- NULL\nt3 &lt;- data.frame(CN = t$CN, \n                 use = t$use,\n                 dist = t$dist)\n\nt3 %&gt;% head()\n\n\n\n\n\nCN\nuse\ndist\n\n\n\n\n12965290010497_2\n24155367010900_2\n0.2853333\n\n\n12965572010497_4\n22954580010497_3\n0.4693333\n\n\n12965856010497_4\n22398195010497_4\n0.2320000\n\n\n12966246010497_1\n174763517020004_2\n0.2640000\n\n\n12969073010497_1\n29883211010497_3\n0.2773333\n\n\n12970308010497_2\n22827625010497_2\n0.1946667\n\n\n\n\n\n\n\na &lt;- y_ancillary_imp |&gt; \n  rownames_to_column(\"CN\") |&gt; \n  filter(CN == \"24155367010900_2\" | CN == \"12965290010497_2\") %&gt;% \n  select_if(~ !is.numeric(.) || sum(.) != 0) \n\nb &lt;- c(\"Used\", \"Imputed\")\ncbind(b,a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\nCN\nABLA_TD\nABLA_TD.o\nlargest_1\nlargest_1.o\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\nrare_TD\nrare_TD.o\ntotal_TD\ntotal_TD.o\n\n\n\n\nUsed\n24155367010900_2\n0.00000\n74.96528\n74.96528\n74.96528\nPREM_TD\nABLA_TD\nzero\nzero\n74.96528\n0.0000\n74.96528\n74.96528\n\n\nImputed\n12965290010497_2\n74.96528\n0.00000\n74.96528\n149.93057\nABLA_TD\nPIPO_TD\nzero\nzero\n0.00000\n149.9306\n74.96528\n149.93057\n\n\n\n\n\n\nI think that yaImpute is using the standplot_cns in the terminal buckets. That would mean that the margin function is determining the if each tree is correct by whether or not the proportion of of each bucket that is the correct CN is larger than the proportion of the largest incorrect CN.\nThese appear to be the out of bag stands used for OOBe.\nI am not sure if yaImpute is using the TDs from all species for each selected nearest neighbor stand, or if they are being recomputed for each species, but it seems like the former.\nThere also appears to be something going on with the stands that are not being used to impute. In the table above, the Used row has imputed values. These pseudo imputations remind me of something I read in the documentation, but I can’t remember the specifics right now.\n\n\nVar importance\n\nx |&gt; names()\n\n [1] \"CC\"       \"SDI\"      \"LAT\"      \"LON\"      \"ELEV\"     \"Northing\" \"Easting\"  \"SLOPE\"    \"BAp\"      \"f\"        \"p\"       \n[12] \"PIPO_BA\"  \"PSME_BA\"  \"ABAM_BA\"  \"TSME_BA\"  \"ABGR_BA\"  \"PICO_BA\"  \"LALY_BA\"  \"PIAL_BA\"  \"PIEN_BA\"  \"ABLA_BA\"  \"LAOC_BA\" \n[23] \"THPL_BA\"  \"ALRU2_BA\" \"TSHE_BA\"  \"TABR2_BA\" \"CHNO_BA\"  \"POBAT_BA\" \"ABPR_BA\"  \"BEPA_BA\"  \"PREM_BA\"  \"POTR5_BA\" \"PIMO3_BA\"\n[34] \"ACGL_BA\"  \"ACMA3_BA\" \"Other_BA\" \"ALRH2_BA\" \"PRVI_BA\" \n\n\n\nyaiVarImp(rf_yai)"
  },
  {
    "objectID": "5_TD_Imp.html#heat-maps-1",
    "href": "5_TD_Imp.html#heat-maps-1",
    "title": "5 TD Imp",
    "section": "Heat maps",
    "text": "Heat maps\n\nMax spp 1\n\n\nCode\nrf_imp_test |&gt; select(max_spp1, max_spp1.o) |&gt; \n                  mutate(\n                    max_spp1 =  as.character(max_spp1), \n                    max_spp1.o =  as.character(max_spp1.o),\n                    num = 1) |&gt;\n              group_by(max_spp1, max_spp1.o) |&gt;\n              summarise(\n                     num = sum(num),\n                     .groups = \"drop\") |&gt;\n  drop_na() |&gt;\n  arrange(max_spp1, max_spp1.o) |&gt; \n  ggplot() +\n      aes(x = max_spp1, y = max_spp1.o, fill = num) +\n  # aes(x = max_spp1, y = max_spp1.o, fill = max_spp1.o) +\n      \n  geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\nMax spp 2\n\n\nCode\nrf_imp_test |&gt; select(max_spp2, max_spp2.o) |&gt; \n                  mutate(\n                    max_spp2 =  as.character(max_spp2), \n                    max_spp2.o =  as.character(max_spp2.o),\n                    equal = 1) |&gt;  \n              group_by(max_spp2, max_spp2.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  arrange(max_spp2, max_spp2.o) |&gt; \n  ggplot() +\n      aes(x = max_spp2, y = max_spp2.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  # scale_fill_gradient2(low = \"white\", mid = \"yellow\", high = \"red\", midpoint = 100) +\n  scale_fill_gradientn(\n                       colors = c(\"white\", \"red\"),\n                       # values = c(0, 15, 75, 855)\n                       ) +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\nSame as above, but without zero\n\n\nCode\nrf_imp_test |&gt; select(max_spp2, max_spp2.o) |&gt; \n                  mutate(\n                    max_spp2 =  as.character(max_spp2), \n                    max_spp2.o =  as.character(max_spp2.o),\n                    equal = 1) |&gt;  \n              group_by(max_spp2, max_spp2.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  arrange(max_spp2, max_spp2.o) |&gt; \n  filter(max_spp2 != \"zero\" & max_spp2.o != \"zero\") |&gt; \n  ggplot() +\n      aes(x = max_spp2, y = max_spp2.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  # scale_fill_gradient2(low = \"white\", mid = \"yellow\", high = \"red\", midpoint = 100) +\n  scale_fill_gradientn(\n                       colors = c(\"white\", \"red\"),\n                       # values = c(0, 15, 75, 855)\n                       ) +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\nCode\nrf_imp_test |&gt; select(f, f.o) |&gt; \n                  mutate(\n                    f =  as.character(f), \n                    f.o =  as.character(f.o),\n                    equal = 1) |&gt;  \n              group_by(f, f.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  ggplot() +\n      aes(x = f, y = f.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\np\n\n\nCode\nrf_imp_test |&gt; select(p, p.o) |&gt; \n                  mutate(\n                    p =  as.character(p), \n                    p.o =  as.character(p.o),\n                    equal = 1) |&gt;  \n              group_by(p, p.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt; \n  ggplot() +\n      aes(x = p, y = p.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)"
  },
  {
    "objectID": "3_RandomForests_Prep.html",
    "href": "3_RandomForests_Prep.html",
    "title": "3 RF Prep",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nadd_commas &lt;- function(n) {\n  t &lt;- prettyNum(n, \",\",scientific=FALSE)\n  return(noquote(t))\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\", \"add_commas\")"
  },
  {
    "objectID": "3_RandomForests_Prep.html#northing-and-easting",
    "href": "3_RandomForests_Prep.html#northing-and-easting",
    "title": "3 RF Prep",
    "section": "Northing and Easting",
    "text": "Northing and Easting\n\npreds &lt;- preds |&gt; mutate(\n  Northing = round(cos(ASPECT * pi/180), 8), \n  Easting = round(sin(ASPECT * pi/180), 8)\n    ) |&gt; relocate(Northing, Easting, .after = ASPECT) \n\nglimpse(preds)\n\nRows: 10,430\nColumns: 15\n$ CC           &lt;dbl&gt; 13, 4, 10, 22, 9, 9, 7, 27, 21, 10, 10, 9, 13, 15, 13, 6,…\n$ BAp          &lt;dbl&gt; 35.052090, 5.396815, 18.791683, 36.032566, 20.009798, 16.…\n$ SDI          &lt;int&gt; 49, 10, 31, 69, 50, 48, 54, 99, 74, 29, 20, 26, 53, 52, 4…\n$ FPAG         &lt;chr&gt; \"CDS6\", \"CDS6\", \"CDS6\", \"CDS6\", \"CDS6\", \"CAS3\", \"CDG1\", \"…\n$ LAT          &lt;dbl&gt; 47.41590, 47.41590, 47.41590, 47.40076, 47.58130, 47.7065…\n$ LON          &lt;dbl&gt; -120.6538, -120.6538, -120.6538, -120.4951, -120.3399, -1…\n$ ELEV         &lt;int&gt; 3300, 3300, 3300, 2300, 3900, 5700, 2100, 2100, 3300, 310…\n$ ASPECT       &lt;int&gt; 175, 171, 70, 357, 338, 10, 280, 236, 55, 44, 136, 10, 31…\n$ Northing     &lt;dbl&gt; -0.99619470, -0.98768834, 0.34202014, 0.99862953, 0.92718…\n$ Easting      &lt;dbl&gt; 0.08715574, 0.15643447, 0.93969262, -0.05233596, -0.37460…\n$ SLOPE        &lt;int&gt; 72, 62, 76, 58, 55, 92, 30, 36, 33, 11, 20, 6, 62, 45, 47…\n$ EcoRegion    &lt;chr&gt; \"M242D\", \"M242D\", \"M242D\", \"M242D\", \"M242D\", \"M242D\", \"M2…\n$ Tpa          &lt;dbl&gt; 16.032845, 12.036092, 19.053326, 80.232971, 168.983902, 3…\n$ STANDPLOT_CN &lt;chr&gt; \"12964449010497_1\", \"12964449010497_3\", \"12964449010497_4…\n$ STAND_CN     &lt;chr&gt; \"12964449010497\", \"12964449010497\", \"12964449010497\", \"12…"
  },
  {
    "objectID": "3_RandomForests_Prep.html#ba-wider",
    "href": "3_RandomForests_Prep.html#ba-wider",
    "title": "3 RF Prep",
    "section": "BA wider",
    "text": "BA wider\n\nba_trees &lt;- trees_L |&gt; group_by(STANDPLOT_CN, SYMBL) |&gt; \n  summarise(\n    n = n(), \n    BA = sum(BAac),\n    .groups = \"drop\"\n    )\n\nn_distinct(ba_trees$STANDPLOT_CN)\n\n[1] 10105\n\nba_wide &lt;- ba_trees |&gt; select(-n) |&gt; pivot_wider(names_from = SYMBL, \n                 values_from = BA,\n                 values_fill = 0,\n                 names_glue = \"{SYMBL}_{'BA'}\") \nba_wide %&gt;% head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nPIPO_BA\nPSME_BA\nABAM_BA\nTSME_BA\nABGR_BA\nPICO_BA\nLALY_BA\nPIAL_BA\nPIEN_BA\nABLA_BA\nALRU2_BA\nTSHE_BA\nABPR_BA\nLAOC_BA\nTHPL_BA\nTABR2_BA\nCHNO_BA\nPOBAT_BA\nBEPA_BA\nPREM_BA\nCONU4_BA\nPOTR5_BA\nPIMO3_BA\nACGL_BA\nFRLA_BA\nACMA3_BA\nMAFU_BA\nPRVI_BA\n2TREE_BA\nALRH2_BA\nQUGA4_BA\nPISI_BA\nABCO_BA\nJUHI_BA\nARME_BA\nSESE3_BA\nBEOC2_BA\nPRAV_BA\n\n\n\n\n12964449010497_1\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\ny &lt;- preds |&gt; select(STANDPLOT_CN, EcoRegion) \nba_wide &lt;- left_join(ba_wide, y, join_by(STANDPLOT_CN))\nba_wide &lt;- ba_wide |&gt; relocate(EcoRegion, .after = STANDPLOT_CN)\n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nEcoRegion\nPIPO_BA\nPSME_BA\nABAM_BA\nTSME_BA\nABGR_BA\nPICO_BA\nLALY_BA\nPIAL_BA\nPIEN_BA\nABLA_BA\nALRU2_BA\nTSHE_BA\nABPR_BA\nLAOC_BA\nTHPL_BA\nTABR2_BA\nCHNO_BA\nPOBAT_BA\nBEPA_BA\nPREM_BA\nCONU4_BA\nPOTR5_BA\nPIMO3_BA\nACGL_BA\nFRLA_BA\nACMA3_BA\nMAFU_BA\nPRVI_BA\n2TREE_BA\nALRH2_BA\nQUGA4_BA\nPISI_BA\nABCO_BA\nJUHI_BA\nARME_BA\nSESE3_BA\nBEOC2_BA\nPRAV_BA\n\n\n\n\n12964449010497_1\nM242D\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\nM242D\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\nM242D\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\nM242D\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\nM242D\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\nM242D\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nba_wide &lt;- left_join(ba_wide, preds, join_by(STANDPLOT_CN, EcoRegion)) |&gt; \n  relocate(STANDPLOT_CN, CC, SDI, FPAG, EcoRegion, LAT, LON, ELEV, ASPECT, Northing, Easting, SLOPE, BAp) |&gt; \n  select(-c(Tpa, STAND_CN))\n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nCC\nSDI\nFPAG\nEcoRegion\nLAT\nLON\nELEV\nASPECT\nNorthing\nEasting\nSLOPE\nBAp\nPIPO_BA\nPSME_BA\nABAM_BA\nTSME_BA\nABGR_BA\nPICO_BA\nLALY_BA\nPIAL_BA\nPIEN_BA\nABLA_BA\nALRU2_BA\nTSHE_BA\nABPR_BA\nLAOC_BA\nTHPL_BA\nTABR2_BA\nCHNO_BA\nPOBAT_BA\nBEPA_BA\nPREM_BA\nCONU4_BA\nPOTR5_BA\nPIMO3_BA\nACGL_BA\nFRLA_BA\nACMA3_BA\nMAFU_BA\nPRVI_BA\n2TREE_BA\nALRH2_BA\nQUGA4_BA\nPISI_BA\nABCO_BA\nJUHI_BA\nARME_BA\nSESE3_BA\nBEOC2_BA\nPRAV_BA\n\n\n\n\n12964449010497_1\n13\n49\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n175\n-0.9961947\n0.0871557\n72\n35.052090\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\n4\n10\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n171\n-0.9876883\n0.1564345\n62\n5.396815\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\n10\n31\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n70\n0.3420201\n0.9396926\n76\n18.791683\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\n22\n69\nCDS6\nM242D\n47.40076\n-120.4951\n2300\n357\n0.9986295\n-0.0523360\n58\n36.032566\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\n9\n50\nCDS6\nM242D\n47.58130\n-120.3399\n3900\n338\n0.9271839\n-0.3746066\n55\n20.009798\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\n9\n48\nCAS3\nM242D\n47.70658\n-120.8548\n5700\n10\n0.9848078\n0.1736482\n92\n16.703291\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nba_wide |&gt; nrow()\n\n[1] 10105\n\n\nThis is good. All that is left, is to join the large trees and seedlings together. Then, clean up the zeroes. Afterwards, I can run RF."
  },
  {
    "objectID": "3_RandomForests_Prep.html#add-plants",
    "href": "3_RandomForests_Prep.html#add-plants",
    "title": "3 RF Prep",
    "section": "Add Plants",
    "text": "Add Plants\n\ncon &lt;- dbConnect(\n  RSQLite::SQLite(), \"C:\\\\RxFire\\\\Data\\\\_FIADB_WA.db\"\n  )\n\n# Pulling in the species reference table\nplants_ref &lt;- dbGetQuery(\n  con, \"select SPECIES_SYMBOL, SPCD, COMMON_NAME, W_SPGRPCD from REF_SPECIES\"\n  )\nplant_gr_ref &lt;- dbGetQuery(\n  con, \"select SPGRPCD, NAME from REF_SPECIES_GROUP\"\n  )\ndbDisconnect(con)\n\n\n# Cleaning Species reference up\nplants_ref &lt;- plants_ref |&gt; rename(SPGRPCD = W_SPGRPCD, SYMBL = SPECIES_SYMBOL)\nplants_ref &lt;- left_join(plants_ref, plant_gr_ref, by = join_by(SPGRPCD)) |&gt; rename(grp_name = NAME)\n\nba_spp &lt;- imp_data %&gt;% select(contains(\"BA\")) %&gt;% names() \ntd_spp &lt;- imp_data %&gt;% select(contains(\"TD\")) %&gt;% names()\n\nspp_list &lt;- append(ba_spp, td_spp) %&gt;% str_remove(\"_TD\") %&gt;% str_remove(\"_BA\") %&gt;% unique()\nspp_list &lt;- spp_list[spp_list != \"BAp\"] %&gt;% sort()\n\nplants_ref &lt;- plants_ref |&gt; select(SYMBL, SPCD, COMMON_NAME, SPGRPCD)\n\nplants_ref &lt;- plants_ref %&gt;% filter(SYMBL %in% spp_list)\n\n\n# con &lt;- dbConnect(RSQLite::SQLite(), db_path)\n# dbWriteTable(con, value = plants_ref, name = \"plants_ref\", overwrite=T)\n# dbDisconnect(con)"
  },
  {
    "objectID": "3_RandomForests_Prep.html#add-econames",
    "href": "3_RandomForests_Prep.html#add-econames",
    "title": "3 RF Prep",
    "section": "Add Econames",
    "text": "Add Econames\n\neco_names &lt;- tribble(~Eco3, ~ECO_NAME, ~eco_code, \n        \"242A\",  \"Puget Tr.\",    \"PT\", \n        \"342I\",  \"Columbia B.\",  \"CB\",\n        \"M242B\", \"W.Cascades\",   \"WC\",\n        \"M242C\", \"E.Cascades\",   \"EC\",\n        \"M242D\", \"N.Cascades\",   \"NC\",\n        \"M333A\", \"Ok. High\",      \"OH\")\n\n\n# con &lt;- dbConnect(RSQLite::SQLite(), db_path)\n# dbWriteTable(con, value = eco_names, name = \"eco_names\", overwrite=T)\n# dbDisconnect(con)"
  },
  {
    "objectID": "3_RandomForests_Prep.html#max_spp",
    "href": "3_RandomForests_Prep.html#max_spp",
    "title": "3 RF Prep",
    "section": "Max_spp",
    "text": "Max_spp\n\n# Function for finding the nth most prevalent species by TD.\n## Where b is the sorted list of all species by TD. \nn_largest &lt;- function(x = b, n) {\n  \n  # In descending order, prevelance\n  x1 &lt;- sort(x, decreasing = TRUE)\n  # Select the nth most prevelant. \n  x1[n]\n}\n\ny_resp &lt;- imp_data %&gt;% select(STANDPLOT_CN, EcoRegion, contains(\"TD\"))\nx_pred &lt;- imp_data %&gt;% select(!contains(\"TD\"))\n\ny &lt;- y_resp |&gt; select(-STANDPLOT_CN, -EcoRegion)\nb &lt;- names(y)\n\n# For the i through nth most trees in each subplot\nfor (i in 1:3) {\n    # set the new column name to largest_n\n    c_value &lt;- str_c(\"largest_\", i)\n    \n    # For each subplot the largest_n is the nth place in a descending list by TD unless all are zero. \n    y &lt;- y %&gt;%\n      rowwise() %&gt;%\n      mutate(!!c_value := n_largest(c_across(all_of(b)), i)) |&gt;\n      ungroup()\n}\n\n\n\n# The name of the species with the largest TD is the column name where the TD matches the largest_n\ny$max_spp1 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_1[x])][1])\ny$max_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][1])\n# The largest is always the largest or zero, but the second sometimes matches the first where either are zero or equal. \n# The alternate second and third replace the incorrect species names with the second name in the list.\n# So, where spp1 and spp2 are both 75, spp1 is the first name in the list, and spp2 is the second name in the list. \ny$alt_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][2])\ny$max_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][1])\ny$alt_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][2])\n\n\n# Replace the species names where they are equal with the alternates\ny &lt;- y |&gt; mutate(\n  max_spp2 = if_else(largest_1 == largest_2, alt_spp2, max_spp2),\n  max_spp3 = if_else(largest_2 == largest_3, alt_spp3, max_spp3)\n  ) |&gt; select(-c(alt_spp2, alt_spp3))#, alt_spp3\n\n# Set the species names to zero if there were no trees counted for that nth largest. \nyfull &lt;- y |&gt; mutate(\n  max_spp1 = ifelse(largest_1 == 0, \"zero\", max_spp1),\n  max_spp2 = ifelse(largest_2 == 0, \"zero\", max_spp2),\n  max_spp3 = ifelse(largest_3 == 0, \"zero\", max_spp3)\n  )\n# Replace the CNs\nyfull$STANDPLOT_CN &lt;- y_resp$STANDPLOT_CN\n\n# Put it back in front\nyfull &lt;- yfull |&gt; relocate(STANDPLOT_CN)\n\n# Look at one full example\n# yfull |&gt; filter(STANDPLOT_CN == \"22954484010497_4\") \n# Look at some examples of the results. \nyfull[4:8, 36:ncol(yfull)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBEOC2_TD\nPRPE2_TD\nPISI_TD\nCHLA_TD\nPRAV_TD\nlargest_1\nlargest_2\nlargest_3\nmax_spp1\nmax_spp2\nmax_spp3\n\n\n\n\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\nzero\nzero\nzero\n\n\n0\n0\n0\n0\n0\n149.93057\n0.00000\n0\nPIPO_TD\nzero\nzero\n\n\n0\n0\n0\n0\n0\n149.93057\n74.96528\n0\nABLA_TD\nTSME_TD\nzero\n\n\n0\n0\n0\n0\n0\n74.96528\n0.00000\n0\nPSME_TD\nzero\nzero\n\n\n0\n0\n0\n0\n0\n299.86113\n0.00000\n0\nPSME_TD\nzero\nzero\n\n\n\n\n\nyfull &lt;- yfull |&gt; mutate(\n  total_TD = rowSums(yfull[grep(\"_TD\", names(yfull))])\n)\n\nimp_data_fixed &lt;- left_join(x_pred, yfull, join_by(STANDPLOT_CN))\ntrain_v_test &lt;- standlist %&gt;% select(-INVYR)\n\nimp_data_fixed &lt;- left_join(train_v_test, imp_data_fixed, join_by(STANDPLOT_CN))\n\n\n# con &lt;- dbConnect(RSQLite::SQLite(), db_path)\n# dbWriteTable(con, value = imp_data_fixed, name = \"imp_data\", overwrite=T)\n# dbDisconnect(con)"
  },
  {
    "objectID": "3_RandomForests_Prep.html#add-eco_code",
    "href": "3_RandomForests_Prep.html#add-eco_code",
    "title": "3 RF Prep",
    "section": "Add eco_code",
    "text": "Add eco_code\n\nimp_data_fixed &lt;- left_join(imp_data_fixed, eco_names, join_by(EcoRegion == Eco3)) %&gt;% \n  relocate(TRAIN, EcoRegion, ECO_NAME, eco_code, .after = STAND_CN)\n\n\n# con &lt;- dbConnect(RSQLite::SQLite(), db_path)\n# dbWriteTable(con, value = imp_data_fixed, name = \"imp_data\", overwrite=T)\n# dbDisconnect(con)"
  },
  {
    "objectID": "3_RandomForests_Prep.html#plots-cc-others",
    "href": "3_RandomForests_Prep.html#plots-cc-others",
    "title": "3 RF Prep",
    "section": "Plots, CC & others",
    "text": "Plots, CC & others\n\nCode\nt &lt;- imp_data |&gt; select_if(is.numeric)\nt &lt;- t |&gt; select(-c(LAT,LON))\n# names(t)\n\n\nfor(i in names(t[,1:6])) {\n  # print(mean(t[[i]]))\n  hist(\n    t[[i]], \n    main = i, \n    xlab = i)\n} \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnames(t)\n\n [1] \"CC\"        \"BAp\"       \"SDI\"       \"ELEV\"      \"Northing\"  \"Easting\"  \n [7] \"SLOPE\"     \"PIPO_BA\"   \"PSME_BA\"   \"ABAM_BA\"   \"TSME_BA\"   \"ABGR_BA\"  \n[13] \"PICO_BA\"   \"LALY_BA\"   \"PIAL_BA\"   \"PIEN_BA\"   \"ABLA_BA\"   \"ALRU2_BA\" \n[19] \"TSHE_BA\"   \"ABPR_BA\"   \"LAOC_BA\"   \"THPL_BA\"   \"TABR2_BA\"  \"CHNO_BA\"  \n[25] \"POBAT_BA\"  \"BEPA_BA\"   \"PREM_BA\"   \"CONU4_BA\"  \"POTR5_BA\"  \"PIMO3_BA\" \n[31] \"ACGL_BA\"   \"FRLA_BA\"   \"ACMA3_BA\"  \"MAFU_BA\"   \"PRVI_BA\"   \"2TREE_BA\" \n[37] \"ALRH2_BA\"  \"QUGA4_BA\"  \"PISI_BA\"   \"ABCO_BA\"   \"JUHI_BA\"   \"ARME_BA\"  \n[43] \"SESE3_BA\"  \"BEOC2_BA\"  \"PRAV_BA\"   \"PIPO_TD\"   \"ABLA_TD\"   \"TSME_TD\"  \n[49] \"PSME_TD\"   \"ABGR_TD\"   \"LALY_TD\"   \"PIEN_TD\"   \"PICO_TD\"   \"LAOC_TD\"  \n[55] \"ACGL_TD\"   \"TABR2_TD\"  \"CHNO_TD\"   \"ABAM_TD\"   \"THPL_TD\"   \"TSHE_TD\"  \n[61] \"BEPA_TD\"   \"PREM_TD\"   \"ALRU2_TD\"  \"POTR5_TD\"  \"PIAL_TD\"   \"ABPR_TD\"  \n[67] \"PIMO3_TD\"  \"ACMA3_TD\"  \"PRVI_TD\"   \"2TB_TD\"    \"CONU4_TD\"  \"QUGA4_TD\" \n[73] \"MAFU_TD\"   \"ABCO_TD\"   \"FRLA_TD\"   \"PSMA_TD\"   \"POBAT_TD\"  \"ALRH2_TD\" \n[79] \"ILOP_TD\"   \"BEOC2_TD\"  \"PRPE2_TD\"  \"PISI_TD\"   \"CHLA_TD\"   \"PRAV_TD\"  \n[85] \"largest_1\" \"largest_2\" \"largest_3\" \"total_TD\""
  },
  {
    "objectID": "3_RandomForests_Prep.html#plots-maj-species",
    "href": "3_RandomForests_Prep.html#plots-maj-species",
    "title": "3 RF Prep",
    "section": "Plots, Maj Species",
    "text": "Plots, Maj Species\n\nCode\nba_cols &lt;- imp_data %&gt;% select(contains(\"_BA\")) %&gt;% names()\n\nfor(i in names(t[,ba_cols])) {\n  # print(mean(t[[i]]))\n  hist(\n    t[[i]], \n    main = str_c(i), \n    xlab = i)\n  \n  hist(\n    log(t[[i]]), \n    main = str_c(\"log of \",i), \n    xlab = i)\n}"
  },
  {
    "objectID": "3_RandomForests_Prep.html#plots-maj-species-1",
    "href": "3_RandomForests_Prep.html#plots-maj-species-1",
    "title": "3 RF Prep",
    "section": "Plots, Maj Species",
    "text": "Plots, Maj Species\n\nCode\ntds_cols &lt;- imp_data %&gt;% select(contains(\"_TD\")) %&gt;% names()\n\nfor(i in names(t[,tds_cols])) {\n  # print(mean(t[[i]]))\n  hist(\n    t[[i]], \n    main = str_c(i), \n    xlab = i)\n  \n  hist(\n    log(t[[i]]), \n    main = str_c(\"log of \",i), \n    xlab = i)\n}"
  },
  {
    "objectID": "12_Error_Map.html",
    "href": "12_Error_Map.html",
    "title": "12 Error Map",
    "section": "",
    "text": "12Sept24\nLibraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(randomForest)                 # RF package that yaImpute uses\nlibrary(yaImpute)                     # RF imputation\nlibrary(vegan)                        # Something to do the yaImpute\n\n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n# library(stars)\nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\nlibrary(sf)                           # Simple Features/vector data\nlibrary(terra)                        # Raster functions\nlibrary(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nrmsd_spp &lt;-spprmsd_spp &lt;- function(imp_df, spp) {\n  \n  rmsd_t &lt;- imp_df %&gt;% drop_na() %&gt;% select(contains(spp)) %&gt;% select(contains(\"TD\"))\n  \n  v1 &lt;- rmsd_t %&gt;% select(ends_with(\"TD\")) %&gt;% names()\n  v2 &lt;- rmsd_t %&gt;% select(ends_with(\".o\")) %&gt;% names()\n  \n  rmsd_t &lt;- rmsd_t %&gt;% mutate(sq_dev = (rmsd_t[,v1] - rmsd_t[,v2])^2) \n  \n  return(sqrt(mean(rmsd_t$sq_dev)))\n}\n\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\", \"rmsd_spp\") %&gt;% unique()\nCreated on\nymd(as_date(file.info(\"10_Error_Map.qmd\")$ctime))\n\n[1] NA\nLast modified on\nymd(as_date(file.info(\"10_Error_Map.qmd\")$atime))\n\n[1] NA"
  },
  {
    "objectID": "12_Error_Map.html#rmsd-calc",
    "href": "12_Error_Map.html#rmsd-calc",
    "title": "12 Error Map",
    "section": "RMSD Calc",
    "text": "RMSD Calc\nIn the rmsd function, rmsd is calculated after dropping the NA values from the full dataframe.\nIn 5_TD_Imp.qmd, I matched the imputations RMSD, but I had done so after dropping NAs from the dataset and for the ancillary data. Above, I tried to pull out the needed columns and then drop NAs. That caused the difference in RMSD.\n\nrmsd_spp &lt;-spprmsd_spp &lt;- function(imp_df, spp) {\n  \n  rmsd_t &lt;- imp_df %&gt;% drop_na() %&gt;% select(contains(spp)) %&gt;% select(contains(\"TD\"))\n  \n  v1 &lt;- rmsd_t %&gt;% select(ends_with(\"TD\")) %&gt;% names()\n  v2 &lt;- rmsd_t %&gt;% select(ends_with(\".o\")) %&gt;% names()\n  \n  rmsd_t &lt;- rmsd_t %&gt;% mutate(sq_dev = (rmsd_t[,v1] - rmsd_t[,v2])^2) \n  \n  # l &lt;- list(v1, sqrt(mean(rmsd_t$sq_dev)))\n  print(paste0(\"RMSD for \", v1, \" is \", sqrt(mean(rmsd_t$sq_dev))))\n  # print(sqrt(mean(rmsd_t$sq_dev)))\n  # return(sqrt(mean(rmsd_t$sq_dev)))\n}\n\n\nrmsd_spp(rf_5_data, \"ABLA\")\n\n[1] 296.3432"
  },
  {
    "objectID": "10_Hyperparameters.html",
    "href": "10_Hyperparameters.html",
    "title": "10 Hyper Params",
    "section": "",
    "text": "Tu. 27AUG24\nLibraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\n\n\n\nImport\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \n                 clean_paths(r\"(C:\\RxFire\\Regen\\Regeneration_2_16Sept24\\homemade_fvs_db_17sept24.db)\"))\n\nimp_data &lt;- dbGetQuery(con, \"select * from imp_data\")\ndbDisconnect(con)\n\n\nload(file = \"./rf_reg_noclass_spet18.R\")\n\nrf_reg_summary &lt;- yaiRFsummary(rf_reg_noclass)\n\nrf_reg_summary$forestAttributes\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nPIPO_TD\n50\n48.29\n%var explained\nNA\nregression\n\n\nABLA_TD\n50\n75.49\n%var explained\nNA\nregression\n\n\nTSME_TD\n50\n69.18\n%var explained\nNA\nregression\n\n\nPSME_TD\n50\n33.45\n%var explained\nNA\nregression\n\n\nABGR_TD\n50\n89.30\n%var explained\nNA\nregression\n\n\nLALY_TD\n50\n67.38\n%var explained\nNA\nregression\n\n\nPIEN_TD\n50\n58.00\n%var explained\nNA\nregression\n\n\nPICO_TD\n50\n42.62\n%var explained\nNA\nregression\n\n\nLAOC_TD\n50\n7.11\n%var explained\nNA\nregression\n\n\nACGL_TD\n50\n-0.92\n%var explained\nNA\nregression\n\n\nTABR2_TD\n50\n54.84\n%var explained\nNA\nregression\n\n\nCHNO_TD\n50\n39.73\n%var explained\nNA\nregression\n\n\nABAM_TD\n50\n67.32\n%var explained\nNA\nregression\n\n\nTHPL_TD\n50\n53.20\n%var explained\nNA\nregression\n\n\nTSHE_TD\n50\n19.11\n%var explained\nNA\nregression\n\n\nBEPA_TD\n50\n64.42\n%var explained\nNA\nregression\n\n\nPREM_TD\n50\n79.18\n%var explained\nNA\nregression\n\n\nALRU2_TD\n50\n15.51\n%var explained\nNA\nregression\n\n\nPOTR5_TD\n50\n54.75\n%var explained\nNA\nregression\n\n\nPIAL_TD\n50\n56.45\n%var explained\nNA\nregression\n\n\nABPR_TD\n50\n72.14\n%var explained\nNA\nregression\n\n\nPIMO3_TD\n50\n26.35\n%var explained\nNA\nregression\n\n\nACMA3_TD\n50\n83.41\n%var explained\nNA\nregression\n\n\nPRVI_TD\n50\n53.74\n%var explained\nNA\nregression\n\n\n2TB_TD\n50\nNaN\n%var explained\nNA\nregression\n\n\nPSMA_TD\n50\n-4.64\n%var explained\nNA\nregression\n\n\nPOBAT_TD\n50\n76.26\n%var explained\nNA\nregression\n\n\nALRH2_TD\n50\n-8.37\n%var explained\nNA\nregression\n\n\nPISI_TD\n50\n91.93\n%var explained\nNA\nregression\n\n\ntotal_TD\n50\n52.70\n%var explained\nNA\nregression\n\n\n\n\n\n\n\n\nntree\n\nimp_data_nc &lt;- imp_data |&gt; filter(EcoRegion == \"M242D\" & TRAIN == T) |&gt; select(-c(EcoRegion, ECO_NAME, eco_code, \n                                 STAND_CN, TRAIN, largest_1, largest_2, largest_3, max_spp1, max_spp2, max_spp3, FPAG))\n\nimp_data_nc &lt;- imp_data_nc |&gt; filter(total_TD != 0)\n\ny_resp &lt;- imp_data_nc |&gt; select(STANDPLOT_CN, contains(\"TD\"))\n\nx_pred &lt;- imp_data_nc |&gt; select(STANDPLOT_CN, !contains(\"TD\"))\n\n\n\n# Prep\ny &lt;- y_resp\n\nCNs &lt;- imp_data_nc |&gt; select(STANDPLOT_CN)\n\ny &lt;- y %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\n\n# X Variables\nx &lt;- left_join(CNs, x_pred, join_by(STANDPLOT_CN))\n\nx &lt;- x %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\n# No Oaks in BA either\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n################################################################################################\n\n# n = 0\n# while(n != 10){\n#     rf &lt;- try(\n#       yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T, rfMode = \"regression\"), \n#       silent = T)\n#     \n#     if (class(rf) == \"try-error\") {\n#       print(n)     \n#       cat(\"ERROR1: \", rf, \"\\n\")\n#       n &lt;- n + 1\n#       } else {\n#         break\n#       }\n# }\n# \n# rf_reg_noclass &lt;- rf\n\n\n\nEnd\nNotes:"
  },
  {
    "objectID": "1.0_Import_Clean.html",
    "href": "1.0_Import_Clean.html",
    "title": "1 Import Clean",
    "section": "",
    "text": "Libraries\nused (Mb) gc trigger (Mb) max used (Mb)\nNcells  597000 31.9    1362492 72.8   686442 36.7\nVcells 1099136  8.4    8388608 64.0  1875957 14.4\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\")\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}"
  },
  {
    "objectID": "1.0_Import_Clean.html#fpas",
    "href": "1.0_Import_Clean.html#fpas",
    "title": "1 Import Clean",
    "section": "FPAs",
    "text": "FPAs\nI don’t need to do this here, but I want to see what the descriptions look like for the FPAs.\n\nfpag_cond &lt;- fpag_cond |&gt; clean_na_cols()\nfpag_cond |&gt; select(FPAG) |&gt; n_distinct()\n\n[1] 141\n\n# fpag_cond |&gt; names()\n\n138 unique FPAGs in this set of plots and subplots. They are single condition, so they are all the same per plot. 141 second time through.\n\n# Getting all of the ecoregion and FPA codes in one place. \nfpas &lt;- fpag_cond |&gt; select(PLT_CN, HABTYPCD1, FPAG)\nfpas &lt;- left_join(fpas, plots, join_by(PLT_CN == CN))\nfpas &lt;- fpas |&gt; select(PLT_CN, HABTYPCD1, FPAG, ECOSUBCD)\nfpas &lt;- fpas |&gt; mutate(\n  FPA = str_remove_all(\n    str_sub(FPAG, 1, 3), \n    \" \"), \n  EcoRegion = str_remove_all(\n    str_sub(ECOSUBCD, 1, -2), \n    \" \")\n) |&gt; relocate(PLT_CN, FPAG, FPA, EcoRegion)\nfpas |&gt; head()\n\n\n\n\n\nPLT_CN\nFPAG\nFPA\nEcoRegion\nHABTYPCD1\nECOSUBCD\n\n\n\n\n12964130010497\nCWF4\nCWF\nM242C\nCWF444\nM242Ca\n\n\n12964449010497\nCDS6\nCDS\nM242D\nCDS675\nM242Dg\n\n\n12964657010497\nCDS6\nCDS\nM242D\nCDS638\nM242Dh\n\n\n12965290010497\nCDS6\nCDS\nM242D\nCDS632\nM242Df\n\n\n12965572010497\nCAS3\nCAS\nM242D\nCAS311\nM242Db\n\n\n12965856010497\nCDG1\nCDG\nM242D\nCDG131\nM242Dh\n\n\n\n\n\n\n\nn_distinct(fpas$FPA)\n\n[1] 69\n\n\n68 unique FPAs, then 69.\n\nunique(fpas$EcoRegion)\n\n[1] \"M242C\" \"M242D\" \"M242B\" \"M333A\" \"242A\"  \"342I\" \n\n\n6, level 3 EcoRegions.\n\ndescriptions\n\nhab_key2 &lt;- hab_key |&gt; mutate(FPA = str_remove_all(\n    str_sub(HABTYPCD, 1, 3), \n    \" \")) |&gt; ungroup() |&gt; select(FPA, COMMON_NAME)\nhab_key2 |&gt; head()\n\n\n\n\n\nFPA\nCOMMON_NAME\n\n\n\n\nCA\nsubalpine fir-mountain hemlock-whitebark pine (open parks)\n\n\nCAC\nsubalpine larch\n\n\nCAC\nsubalpine larch (Okanogan)\n\n\nCAC\nsubalpine larch/western moss heather-partridgefoot\n\n\nCAC\nsubalpine larch/common juniper\n\n\nCAC\nsubalpine larch/Cascade bilberry-western moss heather\n\n\n\n\n\n\n\nt &lt;- hab_key2 |&gt; group_by(FPA) |&gt; mutate(row = row_number()) \n\nt |&gt; group_by(FPA) |&gt; \n  summarise(\n    n = n()\n  ) |&gt; arrange(desc(n))\n\n\n\n\n\nFPA\nn\n\n\n\n\nCFS\n70\n\n\nCDS\n47\n\n\nCHS\n46\n\n\nCMS\n34\n\n\nCWS\n22\n\n\nCES\n20\n\n\nCHF\n20\n\n\nCFF\n14\n\n\nCEF\n13\n\n\nCPS\n13\n\n\nCDG\n12\n\n\nCPG\n9\n\n\nCWG\n8\n\n\nCAC\n7\n\n\nCAG\n5\n\n\nCCF\n5\n\n\nCLS\n5\n\n\nCEG\n4\n\n\nCWF\n4\n\n\nCAS\n3\n\n\nCEM\n3\n\n\nHOG\n3\n\n\nCCS\n2\n\n\nCDF\n2\n\n\nCHC\n2\n\n\nCHM\n2\n\n\nCMF\n2\n\n\nCMG\n2\n\n\nHQS\n2\n\n\nCA\n1\n\n\nCAF\n1\n\n\nCC\n1\n\n\nCD\n1\n\n\nCDR\n1\n\n\nCE\n1\n\n\nCER\n1\n\n\nCF\n1\n\n\nCFM\n1\n\n\nCFR\n1\n\n\nCH\n1\n\n\nCL\n1\n\n\nCLM\n1\n\n\nCM\n1\n\n\nCP\n1\n\n\nCPF\n1\n\n\nCW\n1\n\n\nCWC\n1\n\n\nHA\n1\n\n\nHBM\n1\n\n\nHC\n1\n\n\nHO\n1\n\n\nHOS\n1\n\n\nHQ\n1\n\n\nHQG\n1\n\n\nHQM\n1\n\n\nHX\n1\n\n\n\n\n\n\n\nt |&gt; filter(FPA == \"CFS\")\n\n\n\n\n\n\n\n\n\n\nFPA\nCOMMON_NAME\nrow\n\n\n\n\nCFS\nPacific silver fir/Cascade barberry (Mt. Baker-Snoqualamie)\n1\n\n\nCFS\nPacific silver fir/Cascade barberry (Mount Baker-Snoqualamie)\n2\n\n\nCFS\nPacific silver fir/Cascade barberry\n3\n\n\nCFS\nPacific silver fir/dwarf Oregon grape\n4\n\n\nCFS\nSilver fir/dwarf Oregongrape\n5\n\n\nCFS\nPacific silver fir/salal (Gifford Pinchot)\n6\n\n\nCFS\nPacific silver fir/salal\n7\n\n\nCFS\nPacific silver fir/salal (Olympic)\n8\n\n\nCFS\nPacific silver fir/salal-Cascade barberry\n9\n\n\nCFS\nPacific silver fir-noble fir/thinleaf huckleberry-rusty menziesia-Oregon boxleaf\n10\n\n\nCFS\nPacific silver fir/thinleaf huckleberry/common beargrass (Olympic)\n11\n\n\nCFS\nPacific silver fir/thinleaf huckleberry/common beargrass\n12\n\n\nCFS\nPacific silver fir/oval-leaf blueberry (Olympic)\n13\n\n\nCFS\nPacific silver fir/oval-leaf blueberry (Mt. Baker-Snoqualmie)\n14\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/common beargrass (Olympic)\n15\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/common beargrass\n16\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/oneleaf foamflower\n17\n\n\nCFS\nPacific silver fir/oval-leaf blueberry-Cascade barberry\n18\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/bride’s bonnet\n19\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/bride’s bonnet (Olympic)\n20\n\n\nCFS\nPacific silver fir/thinleaf huckleberry/Sitka valerian\n21\n\n\nCFS\nPacific silver fir/thinleaf huckleberry/twistedstalk\n22\n\n\nCFS\nPacific silver fir/thinleaf huckleberry-oval-leaf blueberry\n23\n\n\nCFS\nPacific silver fir/thinleaf huckleberry\n24\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/false lily of the valley\n25\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/oneleaf foamflower\n26\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/oneleaf foamflower (Mount Baker-Snoqualmie)\n27\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/sidebells wintergreen\n28\n\n\nCFS\nPacific silver fir/thinleaf huckleberry/sidebells wintergreen\n29\n\n\nCFS\nPacific silver fir/oval-leaf blueberry-salal (Mt. Baker-Snoqualmie)\n30\n\n\nCFS\nPacific silver fir/oval-leaf blueberry-salal (Mount Baker-Snoqualmie)\n31\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/western swordfern\n32\n\n\nCFS\nPacific silver fir/oval-leaf blueberry (Wenatchee)\n33\n\n\nCFS\nPacific silver fir/thinleaf huckleberry/bride’s bonnet (Wenatchee)\n34\n\n\nCFS\nPacific silver fir/thinleaf huckleberry-sidebells wintergreen\n35\n\n\nCFS\nPacific silver fir/thinleaf huckleberry/common beargrass\n36\n\n\nCFS\nPacific silver fir/blue huckleberry/beargrass\n37\n\n\nCFS\nSilver fir/big huckleberry/beargrass\n38\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/bunchberry dogwood\n39\n\n\nCFS\nSilver fir/Alaska huckleberry/bunchberry\n40\n\n\nCFS\nPacific silver fir/rusty menziesia\n41\n\n\nCFS\nPacific silver fir/fool’s huckleberry\n42\n\n\nCFS\nSilver fir/fools huckleberry\n43\n\n\nCFS\nPacific silver fir/oval-leaf blueberry-salal\n44\n\n\nCFS\nPacific silver fir/Alaska huckleberry-salal\n45\n\n\nCFS\nSilver fir/Alaska huckleberry-salal\n46\n\n\nCFS\nPacific silver fir/thinleaf huckleberry/bride’s bonnet\n47\n\n\nCFS\nPacific silver fir/blue huckleberry/queencup beadlily\n48\n\n\nCFS\nSilver fir/big huckleberry/beadily\n49\n\n\nCFS\nPacific silver fir/oval-leaf blueberry\n50\n\n\nCFS\nPacific silver fir/oval-leaf blueberry\n51\n\n\nCFS\nPacific silver fir/oval-leaf blueberry (Mt. Baker-Snoqualmie)\n52\n\n\nCFS\nPacific silver fir/oval-leaf blueberry/bride’s bonnet (Mt. Baker-Snoqualmie)\n53\n\n\nCFS\nPacific silver fir-noble fir/devilsclub\n54\n\n\nCFS\nPacific silver fir/devilsclub\n55\n\n\nCFS\nPacific silver fir/devil’s club\n56\n\n\nCFS\nSilver fir/devils club\n57\n\n\nCFS\nPacific silver fir/devilsclub-oval-leaf blueberry\n58\n\n\nCFS\nPacific silver fir/roughfruit berry (Wenatchee)\n59\n\n\nCFS\nPacific silver fir-noble fir/Cascade’s Azalea\n60\n\n\nCFS\nPacific silver fir/rusty menziesia (Wenatchee)\n61\n\n\nCFS\nPacific silver fir/Cascade azalea (Gifford Pinchot)\n62\n\n\nCFS\nPacific silver fir/Cascade azalea\n63\n\n\nCFS\nPacific silver fir/Cascade azalea/common beargrass\n64\n\n\nCFS\nSilver fir/azalea/beargrass\n65\n\n\nCFS\nPacific silver fir/Cascade azalea-thinleaf huckleberry\n66\n\n\nCFS\nPacific silver fir/Cascade azalea-oval-leaf blueberry\n67\n\n\nCFS\nPacific silver fir/Cascade azalea-thinleaf huckleberry (Wenatche)\n68\n\n\nCFS\nPacific silver fir/vine maple\n69\n\n\nCFS\nPacific silver fir/shrub (cool)\n70"
  },
  {
    "objectID": "0_Treemap_2014.html",
    "href": "0_Treemap_2014.html",
    "title": "0_TreeMap_2014",
    "section": "",
    "text": "Why doesn’t TreeMap get the empty classes error?\nThey don’t use bootstrap = T.\nTreeMap Code"
  },
  {
    "objectID": "0_Treemap_2014.html#part-1",
    "href": "0_Treemap_2014.html#part-1",
    "title": "0_TreeMap_2014",
    "section": "Part 1",
    "text": "Part 1\n\n# Perform random forests imputation of FIA plot data\n# written by Isaac Grenfell\n\nlibrary(yaImpute)\nlibrary(raster)\nlibrary(rgdal)\nlibrary(foreign)\nlibrary(parallel)\nlibrary(foreach)\nlibrary(doParallel)\n\n\n###Change this to match current directory and path\ncur.zone &lt;- \"z1\"\noutfolder &lt;- cur.zone\n\nsetwd(\"F:\\\\Tree_List_c2012\\\\FIA\\\\working_KLR\")\nmeters.db &lt;- read.dbf(\"FIA_LFRDB_Albers.dbf\")\n\n###Change this to match current directory and path\nsetwd(paste(\"F:\\\\Tree_List_c2014\\\\target_data\\\\final\\\\\", outfolder, sep=\"\"))\nlist.files()\n\ncwd &lt;- getwd()\nflist.tif &lt;- Sys.glob(\"*.tif\")\n\n# Create raster stack of input target grids\nraster.stack &lt;- stack(flist.tif)\np4s.albers &lt;- proj4string(raster.stack)\nraster.list &lt;- vector(\"list\", length(flist.tif))\nnrasters &lt;- length(flist.tif)\nfor(i in 1:length(flist.tif))  \n{\n  raster.list[[i]] &lt;- raster()  \n}\n\n###Extract values about training points\nnfiles.raster &lt;- length(flist.tif)\n\n# Read in x table of reference data\nallplot &lt;- read.table(\"F:\\\\Tree_List_c2014\\\\x_table\\\\x_table_final_EVG_Karin_reclass_plus_loblolly_manual.txt\", header=T, sep=\",\")\nremap &lt;- read.table(paste(\"F:\\\\Tree_List_c2014\\\\target_data\\\\working_KLR\\\\EVG_remap\\\\\", cur.zone, \"_EVG_remap.txt\", sep=\"\"), sep=\":\")\n\n#Limit allplot to just the veg types in the zone remap table\nplot.df &lt;- allplot[allplot$EVT_GP %in% remap$V1,]\ndim(plot.df)\n\n###Change this to match current directory and path\ndir.create(paste(\"F:\\\\Tree_List_c2014\\\\outputs\\\\\", cur.zone, \"_disturb\", sep=\"\"))\nplot.df$CN &lt;- factor(plot.df$CN)\nwrite.csv(plot.df, paste(\"F:\\\\Tree_List_c2014\\\\outputs\\\\\", cur.zone, \"_disturb\\\\\", cur.zone, \"_x_table_allplots_reclass.txt\", sep=\"\"), row.names = F)\n\nmerge.df &lt;- merge(plot.df, meters.db, by = \"CN\")\n\n##Build X predictor matrix\nevg.fac &lt;- as.factor(plot.df$EVT_GP)\ndc.code.fac &lt;- as.factor(plot.df$disturb_code)\ndc.year.fac &lt;- as.factor(plot.df$disturb_year)\ndc.year.num &lt;- as.numeric(plot.df$disturb_year)\n\n\n\nlev.dc &lt;- levels(dc.code.fac)\nlev.year &lt;- levels(dc.year.fac)\n\nplot.df[,18] &lt;- evg.fac\n\n\n##Build Y response matrix\nplot.df$POINT_X &lt;- merge.df$POINT_X\nplot.df$POINT_Y &lt;- merge.df$POINT_Y\n\n\n###Change this to match current directory and path\nsetwd(paste(\"F:\\\\Tree_List_c2014\\\\target_data\\\\final\\\\\", outfolder, sep=\"\"))\n\n####Reclass evgs\nevg.reclass &lt;- remap\nn.evgs &lt;- dim(evg.reclass)[1]\n\nevg.out &lt;- rep(0, dim(plot.df)[1])\nevg.vec &lt;- plot.df$\"EVT_GP\"\nfor(i in 1:n.evgs)  \n{  \n  cur.evg &lt;- evg.reclass[i, 1]  \n  sub.ind &lt;- evg.vec == cur.evg  \n  evg.out[sub.ind] &lt;- i  \n}   \nevg.in &lt;- as.factor(evg.out)\n\nplot.df$\"EVT_GP\" &lt;- as.factor(evg.out)\nplot.df$disturb_code &lt;- as.factor(plot.df$disturb_code)\n\n#Create X Table\nX.df &lt;- plot.df[,5:20]\n\naspect.temp &lt;- X.df$ASPECT\nrad.temp &lt;- (pi/180)*aspect.temp\nnorthing.temp &lt;- cos(rad.temp)\neasting.temp &lt;- sin(rad.temp)\nX.df &lt;- X.df[,-2]\nX.df$NORTHING &lt;- northing.temp\nX.df$EASTING &lt;-     easting.temp\n\nrownames(X.df) &lt;- plot.df$ID\nid.table &lt;-  plot.df$ID\nY.df &lt;- data.frame(plot.df[,16:18])\nrownames(Y.df) &lt;- plot.df$ID\n#X.df &lt;- X.df[,-c(9, 10)]\n\n# build the random forests model (X=all predictors, Y=EVG, EVC, EVH)\nset.seed(56789)\nyai.treelist &lt;- yai(X.df, Y.df, method = \"randomForest\", ntree = 249)\n\nyai.treelist"
  },
  {
    "objectID": "0_Treemap_2014.html#part-2",
    "href": "0_Treemap_2014.html#part-2",
    "title": "0_TreeMap_2014",
    "section": "Part 2",
    "text": "Part 2\n\n# build dataframes from the raster data\nraster.coords &lt;- coordinates(raster.stack)\nasp.raster &lt;- raster.stack[[1]]\ndem.raster &lt;- raster.stack[[2]]\n\ncurrow.vals &lt;- cellFromRow(dem.raster, 1500)\ncoords.currow &lt;- raster.coords[currow.vals,]\n\nextract.currow &lt;- extract(raster.stack, coords.currow)\np4s.latlong &lt;- CRS(\"+proj=longlat +datum=NAD83\") \n\nmaxrow &lt;- max(as.numeric(rownames(X.df)))\n\nnrows.out &lt;- dim(raster.stack)[1]\nncols.out &lt;- dim(raster.stack)[2]\n\nrs2 &lt;- raster.stack\ncoords.all &lt;- raster.coords\n\nx.vec &lt;- coords.all[,1]\nx.mat &lt;- matrix(x.vec, nrow=nrows.out)\n\nx.raster.out &lt;- raster(x.mat)\nx.raster.out@extent &lt;-dem.raster@extent\nx.raster.out@crs &lt;-dem.raster@crs\n\ny.vec &lt;- coords.all[,2]\ny.mat &lt;- matrix(y.vec, nrow=nrows.out)\n\ny.raster.out &lt;- raster(y.mat)\ny.raster.out@extent &lt;-dem.raster@extent\ny.raster.out@crs &lt;-dem.raster@crs\n\n# impute.row()   ------------------------------------------------------------------------------\n\n# Perform imputation\nimpute.row &lt;- function(currow)  \n{  \n  library(yaImpute) \n  library(raster) \n  library(rgdal)\n  currow.vals &lt;- cellFromRow(dem.raster, currow)\n  coords.currow &lt;- raster.coords[currow.vals,]  \n  \n  # get data from each row of rasters (coordinates)\n  sp.currow &lt;- SpatialPoints(coords.currow, CRS(p4s.albers)) \n  extract.currow &lt;- extract(rs2,   sp.currow)\n  \n  colseq &lt;- 1:length(extract.currow[,1])\n  valid.cols &lt;- colseq[as.logical(1-is.na(extract.currow[,1]))]\n  ncols.df &lt;- dim(extract.currow)[2]\n  extract.currow &lt;- data.frame(extract.currow)\n  extract.currow$\"POINT_X\" &lt;- sp.currow$x\n  extract.currow$\"POINT_Y\" &lt;-sp.currow$y\n  extract.currow &lt;- na.exclude(extract.currow)\n  X.df.temp &lt;- data.frame(extract.currow)\n  nrow.temp &lt;- dim(X.df.temp)[1]\n  \n  aspect.temp &lt;- X.df.temp$ASPECT  \n  rad.temp &lt;- (pi/180)*aspect.temp  \n  northing.temp &lt;- cos(rad.temp)  \n  easting.temp &lt;- sin(rad.temp)\n  \n  X.df.temp &lt;- X.df.temp[,-1]  \n  X.df.temp$NORTHING &lt;- northing.temp  \n  X.df.temp$EASTING &lt;-  easting.temp  \n  temp.evg &lt;- X.df.temp$'EVT_GP'\n  \n  #get nonappearing evgs   \n  evg.orig &lt;- 1:n.evgs \n  evg.val &lt;- evg.orig  \n  evg.val.temp &lt;- X.df.temp$'EVT_GP'  \n  n.evgs.orig &lt;- length(sort(unique(evg.orig)))  \n  evg.orig.seq &lt;- 1:n.evgs.orig  \n  \n  nonappearing.evgs &lt;- evg.val[-sort(unique(as.numeric(as.character(evg.val.temp))))]  \n  n.dummy.rows &lt;- length(nonappearing.evgs)  \n  X.df.temp.old &lt;- X.df.temp\n\n  \n  \n  \n  \n\nif(n.dummy.rows &gt; 0)    \n  {    \n    dummy.rows &lt;- X.df.temp[1:n.dummy.rows,]    \n    tempchar &lt;- as.character(X.df.temp$'EVT_GP')    \n    X.df.temp$'EVT_GP' &lt;- tempchar    \n    dummy.rows$'EVT_GP' &lt;- as.character(nonappearing.evgs)    \n    X.df.temp &lt;- rbind(X.df.temp, dummy.rows)    \n  }\n  \n  n.rows.orig &lt;- dim(extract.currow)[1]   \n  temp.fac &lt;- factor(X.df.temp$'EVT_GP', levels = levels(evg.in))  \n  dc.code.fac.temp &lt;- factor( X.df.temp$disturb_code, levels=lev.dc)  \n  \n  X.df.temp$'EVT_GP' &lt;- as.factor(temp.fac)  \n  X.df.temp$disturb_code &lt;- dc.code.fac.temp   \n  nrow.temp &lt;- dim(X.df.temp)[1]  \n  impute.out &lt;- rep(-1, nrow.temp)  \n  \n  nc.orig &lt;- dim(coords.currow)[1]  \n  impute.out &lt;- rep(NA,nc.orig)  \n  nrows.orig &lt;- dim(extract.currow)[1]  \n  if(nrow.temp &gt; 0)    \n  {    \n    colseq.out &lt;- 1:dim(X.df.temp)[1]    \n    rownames.all &lt;- colseq.out+maxrow    \n    rownames(X.df.temp) &lt;- paste(\"T-\", rownames.all)    \n    \n    # take object from formed random forests model and use X.df.temp dataframe to make predictions    \n    temp.newtargs &lt;- newtargets(yai.treelist, newdata = X.df.temp)    \n    temp.xall &lt;- temp.newtargs$xall    \n    out.neiIds &lt;- temp.newtargs$neiIdsTrgs    \n    out.trgrows &lt;- temp.newtargs$trgRows    \n    yrows &lt;- as.numeric(out.neiIds[,1])    \n    id.out &lt;- id.table[yrows]    \n    impute.out[valid.cols] &lt;- yrows[1:nrows.orig]    \n  }\n  \n  return(impute.out)  \n}\n\n# end ----------------------------------------------------------------------\n\ncl &lt;- makeCluster(20, port=\"10187\")\nregisterDoParallel(cl)\n\nmout &lt;- foreach(m = 1:nrows.out, .packages = c(\"raster\", \"rgdal\", \"yaImpute\"), .combine=\"rbind\") %dopar%   impute.row(m)\n\nstopCluster(cl)\ncloseAllConnections()\n\n###this will return a matrix, all thats left is to write it out as a raster\n\nm.raster &lt;-dem.raster\n\nm.raster.out &lt;- raster(mout)\nm.raster.out@extent &lt;-dem.raster@extent\nm.raster.out@crs &lt;-dem.raster@crs\n\n###Change this!\nsetwd(paste(\"F:\\\\Tree_List_c2014\\\\outputs\\\\\", cur.zone, \"_disturb\", sep=\"\"))\nfout &lt;- paste(cur.zone, \"_index-yes-disturb.tif\", sep=\"\")\nwriteRaster(m.raster.out, fout, overwrite=TRUE)"
  },
  {
    "objectID": "0_Treemap_2014.html#part-1-1",
    "href": "0_Treemap_2014.html#part-1-1",
    "title": "0_TreeMap_2014",
    "section": "Part 1",
    "text": "Part 1\n\nSet zone and working directory\nlist files and save tiff paths\nstack tiffs\nProject the stack\ncreate a vector of tiff paths and get the length\nfor each tiff use the raster function to make it a raster object\nget the number of files\nPull in the TreeMap tree list\nset remap as the EVG list\nremove plots to Veg types in current zone and get the new dimensions\nsave the filtered plots\njoin the plots to the FIA_LFRDB.dbf\n\n**Build X and Y\n\nSet EVT, dist_code, dist_yr as factors plus another for dist_yr as numeric.\nrecord factor levels for dist_cd and year.\nAdd evt group to plot.df\nset the X and Ys is plot.df\nEnter the output folder\ncreate a vector of length to fill\nfor the number of evgs,\n\n\nset the current evg to match the rows of column 1 in evg.reclass.\nset sub.ind to equal be T/F where the current evg vector matches the reclass\nset evg.out to be i where T\n\n\nSet evg.in to factor(evg.out)\nadd the evg to plot.df\nas dist_cd to plot.df\nCreate the X table with aspect, and other variables.\nCreate the Y table.\nRun yai.\n\n\nyai.treelist &lt;- yai(X.df, Y.df, method = \"randomForest\", ntree = 249)\n\nThey may have used bootstrap = T in the training of the model, but it is not here in the code. That is why they do not get the empty classes error."
  },
  {
    "objectID": "0_Treemap_2014.html#part-2-1",
    "href": "0_Treemap_2014.html#part-2-1",
    "title": "0_TreeMap_2014",
    "section": "Part 2",
    "text": "Part 2\nBuild dfs\n\nGet the raster coordinates for cell centers\nPull out the aspect and elevation rasters\nPull cell numbers in row 1500 from the dem\nGet the coordinates of the centers for this row.\nextract the data from the stack at these coordinates.\nset coordinate system to p4s.latlong\nMake a raster for the current rows Xs\nMake a raster for the current rows Ys\n\nImpute Rows Function\n\nGet the current row and the center coordinates\nMake spatial points from centers\nextract raster stack to spatial points.\nSet up a df of the needed dimensions for the extracted data.\nAdd the X and Y coordinates.\nCorrect aspect to N and E.\nPull out and sort unique EVGs\nMake another list with EVGs that do not appear.\nif there are EVGs that do not appear, add rows for temporary variables\n*Maybe remove the CNs that have EVGs that do not appear.\nUse the yai object to get new targets for the filtered EVTs.\nreturn the new tagets for the current row.\n\nImpute the Map\n\nFor each row, in parallel, impute the new targets to a matrix\nCreate a raster from the matrix.\nsave and exit."
  },
  {
    "objectID": "1.5_DB_Create.html",
    "href": "1.5_DB_Create.html",
    "title": "1.5 DB Create",
    "section": "",
    "text": "Rachel’s Original Code\nCode\nlibrary(RSQLite)\nlibrary(sqldf)\nlibrary(DBI)\nlibrary(data.table)\nlibrary(dplyr)\n\n\noptions(scipen = 999)\n## Set working directory as the master folder with all FIA SQLite databases within their \n## individual folders. Named: FIADBs.\nsetwd(\"C:\\\\Users\\\\Houtmanr\\\\FVS_Tradeoffs\\\\rFVSProcessing\\\\FIADBs\")\n\n# This file lists all unique stand identifiers (Plot_CN) values for the study area\n### ENTER CORRECT STAND TABLE PATHWAY HERE ###\ntarget_stands &lt;- read.table(\"C:/Users/houtmanr/FVS_Tradeoffs/rFVSProcessing/FIADBs/Stands_byVariantR1_Carbon_2014.csv\", sep = \",\", header = TRUE)\ntarget_stands &lt;- as.data.table(unique(target_stands[\"CN\"]))\ntarget_stands &lt;-setkey(target_stands, CN)\n\nfuel_stands &lt;- as.data.table(read.table(\"C:/Users/houtmanr/FVS_Tradeoffs/rFVSProcessing/FVSInputFiles/DWM_table_with_mangrove_v5.csv\", sep = \",\", header = TRUE))\nfuel_stands_filtered &lt;- fuel_stands[fuel_stands$ObsCN %in% target_stands$CN,]\n\nstates &lt;- list.dirs()\nstates &lt;- grep(\"SQLit\", states, value = TRUE)\n\ntree_header &lt;- c(\"STAND_CN\", \"INVYR\", \"STATUSCD\", \"Tree_count\", \"SPCD\", \"DBH\", \"HT\", \"ACTUALHT\", \"CR\", \"SUBP\",\n                 \"TREE\", \"AGENTCD\", \"Species\", \"History\", \"CrRatio\")\n\n# This loop iterates through every state database and extracts the tree data from FIA\ntree_table &lt;- NULL\nfor(db in 1:length(states)){\n  # connect to the sqlite file\n  dbtitle &lt;- list.files(path = states[db], full.names = FALSE)\n  dbname &lt;- paste0(states[db], \"\\\\\", dbtitle)\n  con = dbConnect(RSQLite::SQLite(), dbname=dbname)\n  # get a list of all tables\n  alltables = dbListTables(con)\n  alltables\n\n  tree &lt;- as.data.table(dbGetQuery(con, 'select PLT_CN, INVYR, STATUSCD, TPA_UNADJ, SPCD, DIA, HT, ACTUALHT, CR, SUBP, TREE, AGENTCD from TREE'))\n  target_stands$CN &lt;- as.character(target_stands$CN)\n  tree_filtered &lt;- merge(tree, target_stands, by.x = \"PLT_CN\", by.y = \"CN\") \n\n  tree_filtered[, ':=' (Species = (SPCD), History = 1, CrRatio = CR )]\n  tree_filtered[AGENTCD != 'NULL', ':=' (History = 8)]\n  \n  tree_characteristics = c(\"PLT_CN\", \"INVYR\", \"STATUSCD\", \"TPA_UNADJ\", \"SPCD\", \"DIA\", \"HT\", \"ACTUALHT\", \"CR\", \"SUBP\", \"TREE\", \"AGENTCD\",\"Species\", \"History\", \"CrRatio\")\n  tree_table &lt;- rbind(tree_table, tree_filtered[, tree_characteristics, with=FALSE])\n  cat(\"The trees in \", states[db], \" have been found.\")\n  dbDisconnect(con)\n}\n\nforest_type &lt;- as.data.table(dbGetQuery(con, 'select * FROM REF_FOREST_TYPE'))\n\nnames(tree_table) &lt;- tree_header\nplots &lt;- length(unique(tree_table$STAND_CN))\n\n# This loop iterates through the stand characteristics and builds an input stand table for FVS\nstand_header &lt;- c(\"STAND_CN\", \"INV_YEAR\", \"CASE\", \"BASAL_AREA_FACTOR\", \"INV_PLOT_SIZE\", \"BRK_DBH\")\nstand_table &lt;- NULL\nfine_fuels_table &lt;- NULL\ncoarse_fuels_table &lt;- NULL\nfor(db in 1:length(states)){\n  # connect to the sqlite file\n  dbtitle &lt;- list.files(path = states[db], full.names = FALSE)\n  dbname &lt;- paste0(states[db], \"\\\\\", dbtitle)\n  con = dbConnect(RSQLite::SQLite(), dbname=dbname[1])\n  # get a list of all tables\n  alltables = dbListTables(con)\n  \n  plot_table &lt;- as.data.table(dbGetQuery(con, 'select CN, INVYR from PLOT'))\n  plot_filtered &lt;- plot_table[CN %in% target_stands$CN,]\n  plot_filtered &lt;- setkey(plot_filtered, CN)\n  \n  plot_filtered &lt;- as.data.table(plot_filtered[, ':=' (INV_YEAR = 2014, CASE = (INVYR), INVYR = NULL, BASAL_AREA_FACTOR = 0, INV_PLOT_SIZE = 1, BRK_DBH = 999)])\n  stand_table &lt;- rbind(stand_table, plot_filtered)\n  stand_table &lt;-setkey(stand_table,CN)\n  \n  # Fuels\n  fwd_table &lt;- as.data.table(dbGetQuery(con, 'select PLT_CN, INVYR, FWD_SM_CARBON_COND, FWD_SM_DRYBIO_COND,FWD_MD_CARBON_COND, FWD_MD_DRYBIO_COND, FWD_LG_CARBON_COND, FWD_LG_DRYBIO_COND, LITTER_CARBON, LITTER_BIOMASS, DUFF_CARBON, DUFF_BIOMASS from COND_DWM_CALC'))\n  fwd_table_complete &lt;- as.data.table(dbGetQuery(con, 'select * from COND_DWM_CALC'))\n  fwd_filtered &lt;- unique(fwd_table[PLT_CN %in% fuel_stands_filtered$PredCN,])\n  # Add Fuels data\n  fwd_table$Fuel_0_25_H &lt;- fwd_table$FWD_SM_DRYBIO_COND/2000\n  fwd_table$Fuel_25_1_H &lt;- fwd_table$FWD_MD_DRYBIO_COND/2000\n  fwd_table$Fuel_1_3_H &lt;- fwd_table$FWD_LG_DRYBIO_COND/2000\n  \n  fine_fuels_table &lt;- rbind(fine_fuels_table, fwd_filtered)\n\n  cwd_table &lt;- as.data.table(dbGetQuery(con, 'select PLT_CN, DRYBIO_AC_COND, DECAYCD, TRANSDIA from DWM_COARSE_WOODY_DEBRIS'))\n  cwd_table &lt;-as.data.table(dbGetQuery(con, 'select * from DWM_COARSE_WOODY_DEBRIS'))\n  cwd_fuels &lt;- cwd_table[PLT_CN %in% fuel_stands_filtered$PredCN,]\n  \n  groupcwd &lt;- group_by(cwd_fuels, PLT_CN)\n  coarsefuels = as.data.table(summarize(groupcwd, \n                                        Fuel_3_6_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 3 & TRANSDIA &lt; 6])/2000,\n                                        Fuel_6_12_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 6 & TRANSDIA &lt; 12])/2000,\n                                        Fuel_12_20_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 12 & TRANSDIA &lt; 20])/2000,\n                                        Fuel_20_35_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 20 & TRANSDIA &lt; 35])/2000,\n                                        Fuel_35_50_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 35 & TRANSDIA &lt; 50])/2000,\n                                        Fuel_gt_50_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 50])/2000,\n                                        Fuel_3_6_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5) & TRANSDIA &gt;= 3 & TRANSDIA &lt; 6])/2000,\n                                        Fuel_6_12_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5) & TRANSDIA &gt;= 6 & TRANSDIA &lt; 12])/2000,\n                                        Fuel_12_20_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5) & TRANSDIA &gt;= 12 & TRANSDIA &lt; 20])/2000,\n                                        Fuel_20_35_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5) & TRANSDIA &gt;= 20 & TRANSDIA &lt; 35])/2000,\n                                        Fuel_35_50_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5) & TRANSDIA &gt;= 35 & TRANSDIA &lt; 50])/2000,\n                                        Fuel_gt_50_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5) & TRANSDIA &gt;= 50])/2000))\n  \n  coarse_fuels_table &lt;- rbind(coarse_fuels_table, coarsefuels)\n  \n  cat(\"The stands in \", states[db], \" have been found.\\n\")\n  dbDisconnect(con)\n}\n\n## Original stand data from Fuel Map.\nfuel_stands_filtered$PredCN &lt;- as.character(fuel_stands_filtered$PredCN)\nfuel_stands_filtered$ObsCN &lt;- as.character(fuel_stands_filtered$ObsCN)\n\ncoarse_fuels_table_stands &lt;- merge(fuel_stands_filtered[,c(\"PredCN\", \"ObsCN\")], coarse_fuels_table,  by.x = \"PredCN\", by.y = \"PLT_CN\")\nfine_fuels_table_stands &lt;- merge(fuel_stands_filtered[,c(\"PredCN\", \"ObsCN\")], fine_fuels_table,  by.y = \"PLT_CN\", by.x = \"PredCN\")\nnames(stand_table) &lt;- stand_header\n\n## Add fuel variables to the stand data\n\nfuel_stands_filtered$Fuel_0_25_H &lt;- 2*fuel_stands_filtered$FWD_SM_CARBON_COND/2000\nfuel_stands_filtered$Fuel_25_1_H &lt;- 2*fuel_stands_filtered$FWD_MD_CARBON_COND/2000\nfuel_stands_filtered$Fuel_1_3_H &lt;- 2*fuel_stands_filtered$FWD_LG_CARBON_COND/2000\nfuel_stands_filtered$Fuel_Litter &lt;- 2*fuel_stands_filtered$LITTER_CARBON/2000\nfuel_stands_filtered$Fuel_Duff &lt;- 2*fuel_stands_filtered$DUFF_CARBON/2000\n\ncolnames(fuel_stands_filtered)[4] &lt;- \"STAND_CN\"\nfuel_stands_filtered$X.1 &lt;- NULL\nfuel_stands_filtered$X &lt;- NULL\nfuel_stands_filtered &lt;- setkey(fuel_stands_filtered, STAND_CN)\nstand_table &lt;- setkey(stand_table, STAND_CN)\n\n# Add fine fuels.\nstands_with_finefuels &lt;-merge(stand_table, fuel_stands_filtered[,c(\"STAND_CN\",\"Fuel_0_25_H\",\"Fuel_25_1_H\",\"Fuel_1_3_H\",\"Fuel_Litter\",\"Fuel_Duff\")])\n\nstands_with_finefuels &lt;- setkey(stands_with_finefuels, STAND_CN)\n\ncolnames(coarse_fuels_table_stands)[2] &lt;- \"STAND_CN\"\ncoarse_fuels_table_stands &lt;- setkey(coarse_fuels_table_stands, STAND_CN)\nstands_with_fuels &lt;- left_join(stands_with_finefuels, coarse_fuels_table_stands)\nstands_with_fuels$PredCN &lt;- NULL\n\n# Remove NA values when writing files (FVS does NOT like them)\n### UPDATE YOUR OUTPUT FILE NAMES HERE ###\nwrite.csv(tree_table, file = \"tree_table_R1_Carbon_2014.csv\", na = \"\", row.names = FALSE)\nwrite.csv(stands_with_fuels, file = \"stand_table_R1_Carbon2014.csv\", na = \"\", row.names = FALSE)\nLibraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \n# library(yaImpute)                     # RF imputation     \n# library(vegan)                        # Something to do the yaImpute \n# library(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                      \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n# Rachel's libraries\n# library(RSQLite)       # Already loaded                    \nlibrary(sqldf)                                        \n# library(DBI)                                        \nlibrary(data.table)                                        \n                                 \n\n\n# No sci-notation. \noptions(scipen = 999)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\")\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n  print(df)\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\nBreaking down Rachel’s code"
  },
  {
    "objectID": "1.5_DB_Create.html#part-1",
    "href": "1.5_DB_Create.html#part-1",
    "title": "1.5 DB Create",
    "section": "Part 1",
    "text": "Part 1\n\noptions(scipen = 999)\n## Set working directory as the master folder with all FIA SQLite databases within their \n## individual folders. Named: FIADBs.\nsetwd(\"C:\\\\Users\\\\Houtmanr\\\\FVS_Tradeoffs\\\\rFVSProcessing\\\\FIADBs\")\n\n# This file lists all unique stand identifiers (Plot_CN) values for the study area\n### ENTER CORRECT STAND TABLE PATHWAY HERE ###\ntarget_stands &lt;- read.table(\n  \"C:/Users/houtmanr/FVS_Tradeoffs/rFVSProcessing/FIADBs/Stands_byVariantR1_Carbon_2014.csv\", sep = \",\", header = TRUE\n  )\ntarget_stands &lt;- as.data.table(unique(target_stands[\"CN\"]))\ntarget_stands &lt;- setkey(target_stands, CN)\n\nfuel_stands &lt;- as.data.table(\n  read.table(\n    \"C:/Users/houtmanr/FVS_Tradeoffs/rFVSProcessing/FVSInputFiles/DWM_table_with_mangrove_v5.csv\", sep = \",\", header = TRUE\n    )\n  )\nfuel_stands_filtered &lt;- fuel_stands[fuel_stands$ObsCN %in% target_stands$CN,]\n\nstates &lt;- list.dirs()\nstates &lt;- grep(\"SQLit\", states, value = TRUE)"
  },
  {
    "objectID": "1.5_DB_Create.html#part-2",
    "href": "1.5_DB_Create.html#part-2",
    "title": "1.5 DB Create",
    "section": "Part 2",
    "text": "Part 2\n\nTree table\n\n\nCreate header for tree table.\nEnsure blank tree table to write to\nFor each database in the list of state dbs\n\nconnect to the state db\nget the list of tables\nset tree to those columns needed for FVS from FIA TREE table\njoin standlist and TREE table\nChange FIA.TREE.SPCD to Species, Set History to 1, and Change CR to CrRatio\nWhere AgentCD is not null set History to 8\nlist the columns to select\nselect the columns\nconcatenate and print the stats in db have been found\nDisconnect and start the loop over.\n\nFind forest type reference in a db, this is confusing, there is no connection\nset the tree table names\nfind all plots with trees in the tree list.\n\n\ntree_header &lt;- c(\n  \"STAND_CN\", \"INVYR\", \"STATUSCD\", \"Tree_count\", \"SPCD\", \"DBH\", \"HT\", \"ACTUALHT\", \"CR\", \"SUBP\", \"TREE\", \"AGENTCD\", \n  \"Species\", \"History\", \"CrRatio\"\n  )\n\n# This loop iterates through every state database and extracts the tree data from FIA\ntree_table &lt;- NULL\nfor(db in 1:length(states)){\n  # connect to the sqlite file\n  dbtitle &lt;- list.files(path = states[db], full.names = FALSE)\n  dbname &lt;- paste0(states[db], \"\\\\\", dbtitle)\n  con = dbConnect(RSQLite::SQLite(), dbname=dbname)\n  # get a list of all tables\n  alltables = dbListTables(con)\n  alltables\n\n  tree &lt;- as.data.table(\n    dbGetQuery(\n      con, 'select PLT_CN, INVYR, STATUSCD, TPA_UNADJ, SPCD, DIA, HT, ACTUALHT, CR, SUBP, TREE, AGENTCD from TREE'\n      )\n    )\n  \n  target_stands$CN &lt;- as.character(target_stands$CN)\n  tree_filtered &lt;- merge(tree, target_stands, by.x = \"PLT_CN\", by.y = \"CN\") \n\n  tree_filtered[, ':=' (Species = (SPCD), History = 1, CrRatio = CR )]\n  tree_filtered[AGENTCD != 'NULL', ':=' (History = 8)]\n  \n  tree_characteristics = c(\n    \"PLT_CN\", \"INVYR\", \"STATUSCD\", \"TPA_UNADJ\", \"SPCD\", \"DIA\", \"HT\", \"ACTUALHT\", \"CR\", \"SUBP\", \"TREE\", \"AGENTCD\", \n    \"Species\", \"History\", \"CrRatio\"\n    )\n  \n  tree_table &lt;- rbind(tree_table, tree_filtered[, tree_characteristics, with=FALSE])\n  cat(\"The trees in \", states[db], \" have been found.\")\n  dbDisconnect(con)\n}\n\nforest_type &lt;- as.data.table(dbGetQuery(con, 'select * FROM REF_FOREST_TYPE'))\n\nnames(tree_table) &lt;- tree_header\nplots &lt;- length(unique(tree_table$STAND_CN))"
  },
  {
    "objectID": "1.5_DB_Create.html#part-3",
    "href": "1.5_DB_Create.html#part-3",
    "title": "1.5 DB Create",
    "section": "Part 3",
    "text": "Part 3\n\nPlots table\n\n\nset the stand header\nensure a blank canvas with NULL stand & fuels tables\nFor each db in the list of DBs\n\nconnect\n\n\nfind the db path and connect to it\nlist the tables\n\n\nset tables\n\n\nselect CN and invyr from plot\nfind all standlist in plot table by CN\nset a key for sorting and filtering quickly\n\n\nalter tables\n\n\nSet := INV_YEAR = 2014: Adds a new column INV_YEAR with all entries set to 2014.\nCASE = (INVYR): Adds a new column CASE and sets its values to be the same as those in the existing column INVYR.\nINVYR = NULL: Removes the INVYR column from the data.table.\nBASAL_AREA_FACTOR = 0: Adds a new column BASAL_AREA_FACTOR with all entries set to 0.\nINV_PLOT_SIZE = 1: Adds a new column INV_PLOT_SIZE with all entries set to 1.\nBRK_DBH = 999: Adds a new column BRK_DBH with all entries set to 999.\n\n\nmake the stand table\n\n\nadd the stand info from each db to the stand table\n\n\nFine Fuels\n\n\nfine woody debris is list of columns from COND_DWM_CALC\nComplete is * from COND_DWM_CALC\nfind the FM pred CNs in the db\nSet the FVS variables from the FIA variables and correct Tons to lbs\nAdd our CN’s fwd to the the fine fuels table\n\n\nCourse Fuels\n\n\nget columns from DWM_Coarse Woody degris\nget * from DWM_Coarse Woody degris\nfilter db for our Pred cns\n\n\nfix CWD table\n\n\ngroup CWD by PLT_CN\nset each FVS fuel group to the sum of fuels with diameters at correct size and correct for tons to lbs.\nadd this states data to the new table\nconcatenate and print complete\ndisconnect and start the next state\n\n\n\n# This loop iterates through the stand characteristics and builds an input stand table for FVS\nstand_header &lt;- c(\"STAND_CN\", \"INV_YEAR\", \"CASE\", \"BASAL_AREA_FACTOR\", \"INV_PLOT_SIZE\", \"BRK_DBH\")\nstand_table &lt;- NULL\nfine_fuels_table &lt;- NULL\ncoarse_fuels_table &lt;- NULL\nfor(db in 1:length(states)){\n  # connect to the sqlite file\n  dbtitle &lt;- list.files(path = states[db], full.names = FALSE)\n  dbname &lt;- paste0(states[db], \"\\\\\", dbtitle)\n  con = dbConnect(RSQLite::SQLite(), dbname=dbname[1])\n  # get a list of all tables\n  alltables = dbListTables(con)\n  \n  plot_table &lt;- as.data.table(dbGetQuery(con, 'select CN, INVYR from PLOT'))\n  plot_filtered &lt;- plot_table[CN %in% target_stands$CN,]\n  plot_filtered &lt;- setkey(plot_filtered, CN)\n  \n  plot_filtered &lt;- as.data.table(\n    plot_filtered[\n      , ':=' (\n      INV_YEAR = 2014, CASE = (INVYR), INVYR = NULL, BASAL_AREA_FACTOR = 0, INV_PLOT_SIZE = 1, BRK_DBH = 999\n      )\n      ]\n    )\n  stand_table &lt;- rbind(stand_table, plot_filtered)\n  stand_table &lt;-setkey(stand_table,CN)\n  \n  # Fuels\n  fwd_table &lt;- as.data.table(\n    dbGetQuery(con, paste0(\n               'select ',\n               'PLT_CN, INVYR, FWD_SM_CARBON_COND, FWD_SM_DRYBIO_COND,FWD_MD_CARBON_COND, FWD_MD_DRYBIO_COND,', \n               'FWD_LG_CARBON_COND, FWD_LG_DRYBIO_COND, LITTER_CARBON, LITTER_BIOMASS, DUFF_CARBON, DUFF_BIOMASS ', \n               'from COND_DWM_CALC'\n               ))\n  )\n  \n  fwd_table_complete &lt;- as.data.table(dbGetQuery(con, 'select * from COND_DWM_CALC'))\n  fwd_filtered &lt;- unique(fwd_table[PLT_CN %in% fuel_stands_filtered$PredCN,])\n  # Add Fuels data\n  fwd_table$Fuel_0_25_H &lt;- fwd_table$FWD_SM_DRYBIO_COND/2000\n  fwd_table$Fuel_25_1_H &lt;- fwd_table$FWD_MD_DRYBIO_COND/2000\n  fwd_table$Fuel_1_3_H &lt;- fwd_table$FWD_LG_DRYBIO_COND/2000\n  \n  fine_fuels_table &lt;- rbind(fine_fuels_table, fwd_filtered)\n\n  cwd_table &lt;- as.data.table(dbGetQuery(con, 'select PLT_CN, DRYBIO_AC_COND, DECAYCD, TRANSDIA from DWM_COARSE_WOODY_DEBRIS'))\n  cwd_table &lt;- as.data.table(dbGetQuery(con, 'select * from DWM_COARSE_WOODY_DEBRIS'))\n  cwd_fuels &lt;- cwd_table[PLT_CN %in% fuel_stands_filtered$PredCN,]\n  \n  groupcwd &lt;- group_by(cwd_fuels, PLT_CN)\n  \n  coarsefuels = as.data.table(\n    summarize(groupcwd, \n              Fuel_3_6_H =   sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 3  & TRANSDIA &lt; 6])/2000,\n              Fuel_6_12_H =  sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 6  & TRANSDIA &lt; 12])/2000,\n              Fuel_12_20_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 12 & TRANSDIA &lt; 20])/2000,\n              Fuel_20_35_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 20 & TRANSDIA &lt; 35])/2000,\n              Fuel_35_50_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 35 & TRANSDIA &lt; 50])/2000,\n              Fuel_gt_50_H = sum(DRYBIO_AC_COND[DECAYCD %in% c(1,2,3) & TRANSDIA &gt;= 50])/2000, \n              \n              Fuel_3_6_S =   sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5)   & TRANSDIA &gt;= 3  & TRANSDIA &lt; 6])/2000,\n              Fuel_6_12_S =  sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5)   & TRANSDIA &gt;= 6  & TRANSDIA &lt; 12])/2000,\n              Fuel_12_20_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5)   & TRANSDIA &gt;= 12 & TRANSDIA &lt; 20])/2000,\n              Fuel_20_35_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5)   & TRANSDIA &gt;= 20 & TRANSDIA &lt; 35])/2000,\n              Fuel_35_50_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5)   & TRANSDIA &gt;= 35 & TRANSDIA &lt; 50])/2000,\n              Fuel_gt_50_S = sum(DRYBIO_AC_COND[DECAYCD %in% c(4,5)   & TRANSDIA &gt;= 50])/2000\n              )\n    )\n  \n  coarse_fuels_table &lt;- rbind(coarse_fuels_table, coarsefuels)\n  \n  cat(\"The stands in \", states[db], \" have been found.\\n\")\n  dbDisconnect(con)\n}"
  },
  {
    "objectID": "1.5_DB_Create.html#part-4",
    "href": "1.5_DB_Create.html#part-4",
    "title": "1.5 DB Create",
    "section": "Part 4",
    "text": "Part 4\n\nNew db\n\n\ncorrect CNs to chr\nadd coarse fuel data from FM to TM\nadd fine fuel data from FM to TM\nset column names\nadd fuel to the new stand table\n\nI am not sure why FWD and stuff are being multiplied by 2\n\nSet CN to STAND_CN for FVS\nSet X and X.1 to Null\nSet a key to sort and filter\nadd fine fuels to new stand table\njoin the fine and coarse fuel tables\nRemove PredCN and NA values\nwrite new db.\n\n\ncolnames(fuel_stands_filtered)[4] &lt;- \"STAND_CN\"\nfuel_stands_filtered$X.1 &lt;- NULL\nfuel_stands_filtered$X &lt;- NULL\nfuel_stands_filtered &lt;- setkey(fuel_stands_filtered, STAND_CN)\nstand_table &lt;- setkey(stand_table, STAND_CN)\n\n# Add fine fuels.\nstands_with_finefuels &lt;- merge(\n  stand_table, \n  fuel_stands_filtered[, c(\"STAND_CN\",\"Fuel_0_25_H\",\"Fuel_25_1_H\",\"Fuel_1_3_H\",\"Fuel_Litter\",\"Fuel_Duff\")])\n\nstands_with_finefuels &lt;- setkey(stands_with_finefuels, STAND_CN)\n\ncolnames(coarse_fuels_table_stands)[2] &lt;- \"STAND_CN\"\ncoarse_fuels_table_stands &lt;- setkey(coarse_fuels_table_stands, STAND_CN)\nstands_with_fuels &lt;- left_join(stands_with_finefuels, coarse_fuels_table_stands)\nstands_with_fuels$PredCN &lt;- NULL\n\n# Remove NA values when writing files (FVS does NOT like them)\n### UPDATE YOUR OUTPUT FILE NAMES HERE ###\nwrite.csv(tree_table, file = \"tree_table_R1_Carbon_2014.csv\", na = \"\", row.names = FALSE)\nwrite.csv(stands_with_fuels, file = \"stand_table_R1_Carbon2014.csv\", na = \"\", row.names = FALSE)\n\n\n## Original stand data from Fuel Map.\nfuel_stands_filtered$PredCN &lt;- as.character(fuel_stands_filtered$PredCN)\nfuel_stands_filtered$ObsCN &lt;- as.character(fuel_stands_filtered$ObsCN)\n\ncoarse_fuels_table_stands &lt;- merge(\n  fuel_stands_filtered[, c(\"PredCN\", \"ObsCN\")], \n  coarse_fuels_table,  by.x = \"PredCN\", by.y = \"PLT_CN\"\n  )\nfine_fuels_table_stands &lt;- merge(\n  fuel_stands_filtered[,c(\"PredCN\", \"ObsCN\")], \n  fine_fuels_table,  by.y = \"PLT_CN\", by.x = \"PredCN\"\n  )\nnames(stand_table) &lt;- stand_header\n\n## Add fuel variables to the stand data\n\nfuel_stands_filtered$Fuel_0_25_H &lt;- 2*fuel_stands_filtered$FWD_SM_CARBON_COND/2000\nfuel_stands_filtered$Fuel_25_1_H &lt;- 2*fuel_stands_filtered$FWD_MD_CARBON_COND/2000\nfuel_stands_filtered$Fuel_1_3_H &lt;- 2*fuel_stands_filtered$FWD_LG_CARBON_COND/2000\nfuel_stands_filtered$Fuel_Litter &lt;- 2*fuel_stands_filtered$LITTER_CARBON/2000\nfuel_stands_filtered$Fuel_Duff &lt;- 2*fuel_stands_filtered$DUFF_CARBON/2000\n\ncolnames(fuel_stands_filtered)[4] &lt;- \"STAND_CN\"\nfuel_stands_filtered$X.1 &lt;- NULL\nfuel_stands_filtered$X &lt;- NULL\nfuel_stands_filtered &lt;- setkey(fuel_stands_filtered, STAND_CN)\nstand_table &lt;- setkey(stand_table, STAND_CN)\n\n# Add fine fuels.\nstands_with_finefuels &lt;- merge(\n  stand_table, \n  fuel_stands_filtered[, c(\"STAND_CN\",\"Fuel_0_25_H\",\"Fuel_25_1_H\",\"Fuel_1_3_H\",\"Fuel_Litter\",\"Fuel_Duff\")]\n  )\n\nstands_with_finefuels &lt;- setkey(stands_with_finefuels, STAND_CN)\n\ncolnames(coarse_fuels_table_stands)[2] &lt;- \"STAND_CN\"\ncoarse_fuels_table_stands &lt;- setkey(coarse_fuels_table_stands, STAND_CN)\nstands_with_fuels &lt;- left_join(stands_with_finefuels, coarse_fuels_table_stands)\nstands_with_fuels$PredCN &lt;- NULL\n\n# Remove NA values when writing files (FVS does NOT like them)\n### UPDATE YOUR OUTPUT FILE NAMES HERE ###\nwrite.csv(tree_table, file = \"tree_table_R1_Carbon_2014.csv\", na = \"\", row.names = FALSE)\nwrite.csv(stands_with_fuels, file = \"stand_table_R1_Carbon2014.csv\", na = \"\", row.names = FALSE)"
  },
  {
    "objectID": "1.5_DB_Create.html#parts-1-3",
    "href": "1.5_DB_Create.html#parts-1-3",
    "title": "1.5 DB Create",
    "section": "Parts 1-3",
    "text": "Parts 1-3\n\n# Part 1 Setup\n\nstandlist &lt;- read_csv(\"./1_Import_Clean2.csv\", \n                      col_types = \"ccc\")\n\nstandlist &lt;- standlist |&gt; mutate(\n  SUBP = str_sub(STANDPLOT_CN, -1, -1)\n) |&gt; \n  relocate(SUBP, .after = PLT_CN)\n\ntarget_stands &lt;- standlist |&gt; select(CN = PLT_CN) |&gt; unique() |&gt; as.data.table()\n\ntarget_stands &lt;- setkey(target_stands, CN)\n\n\nplt_cn &lt;- NULL\nplt_cn &lt;- str_c(\"'\", target_stands$CN, \"'\")\nplt_cn &lt;- str_flatten_comma(plt_cn)\n\n\n# Part 2 Tree Table ------------------------------------------------------------------------------------------------\n\ntree_header &lt;- c(\n  \"STAND_CN\", \"STATUSCD\", \"Tree_count\", \"SPCD\", \"DBH\", \"HT\", \"ACTUALHT\", \"CR\", \"SUBP\", \"TREE\", \"AGENTCD\", \n  \"Species\", \"History\", \"CrRatio\"\n  )\n\n# This loop iterates through every state database and extracts the tree data from FIA\ntree_table &lt;- NULL\n\n# connect to the sqlite file\ncon = dbConnect(RSQLite::SQLite(), \"C:/RxFire/Data/_FIADB_WA.db\")\n\n#######\n# Add statuscd to fix live or dead trees like: HISTORY = ifelse(STATUSCD != 1, 8, 1)  Live tree == 1, dead == 2, \n# other = not there. \n\ntree &lt;- as.data.table(\n  dbGetQuery(\n    con, str_c('select PLT_CN, INVYR, STATUSCD, TPA_UNADJ, SPCD, DIA, HT, ACTUALHT, CR, SUBP, TREE, AGENTCD from TREE ', \n               'where PLT_CN in (', plt_cn, \")\")\n    )\n  )\n# n_distinct(tree$PLT_CN)\n# 3426 PLT_CNs have trees in the TREE table\n \ntree &lt;- tree |&gt; mutate(\n  Species = SPCD, \n  History = ifelse(\n    !is.na(AGENTCD), 8, 1\n  ), \n  CrRatio = CR\n) |&gt; select(-INVYR)\n\nforest_type &lt;- as.data.table(dbGetQuery(con, 'select * FROM REF_FOREST_TYPE'))\ndbDisconnect(con)\n\nnames(tree) &lt;- toupper(tree_header)\n\n# Part 3 Plot Table --------------------------------------------------------------------------------------------\n\nstand_header &lt;- c(\"STAND_CN\", \"INV_YEAR\", \"CASE\", \"BASAL_AREA_FACTOR\", \"INV_PLOT_SIZE\", \"BRK_DBH\")\n\n# connect to the sqlite file\ncon &lt;-  dbConnect(RSQLite::SQLite(), \"C:/RxFire/Data/_FIADB_WA.db\")\n\nplot_table &lt;- as.data.table(dbGetQuery(con, str_c(\n  'select CN, INVYR from PLOT where CN in (', \n  plt_cn, \")\")\n  ))\n\nplot_table &lt;- setkey(plot_table, CN)\n\n\nplot_table &lt;- plot_table |&gt;  \n  mutate(\n    INV_YEAR = 2014, \n    CASE = (INVYR), \n    INVYR = NA, \n    BASAL_AREA_FACTOR = 0, \n    INV_PLOT_SIZE = 1, \n    BRK_DBH = 999\n  ) |&gt; \n  as.data.table() |&gt; rename(STAND_CN = CN) |&gt; select(-INVYR)"
  },
  {
    "objectID": "1.5_DB_Create.html#part-4-1",
    "href": "1.5_DB_Create.html#part-4-1",
    "title": "1.5 DB Create",
    "section": "Part 4",
    "text": "Part 4\n\n# Part 4 Seedling Table ----------------------------------------------------------------------------------------\n\ntree_header &lt;- c(\n  \"STAND_CN\", \"STATUSCD\", \"Tree_count\", \"SPCD\", \"DBH\", \"HT\", \"ACTUALHT\", \"CR\", \"SUBP\", \"TREE\", \"AGENTCD\", \n  \"Species\", \"History\", \"CrRatio\"\n  )\n\n# This loop iterates through every state database and extracts the tree data from FIA\nseed &lt;- NULL\n\n# connect to the sqlite file\ncon &lt;-  dbConnect(RSQLite::SQLite(), \"C:/RxFire/Data/_FIADB_WA.db\")\n\nseed &lt;- as.data.table(\n  dbGetQuery(\n    con, str_c('select PLT_CN, INVYR, SUBP, TPA_UNADJ, SPCD from SEEDLING ', \n               'where PLT_CN in (', plt_cn, \")\")\n    )\n  ) \n\ndbDisconnect(con)\n\n\n# These are not in the seedlings table: STATUSCD, DIA, HT, ACTUALHT, CR, SUBP, TREE, AGENTCD\n# n_distinct(seed$PLT_CN)\n# 2818 PLT_CNs have trees in the SEEDLINGS table\n \nseed &lt;- seed |&gt; mutate(\n  STAND_CN   =  PLT_CN,      \n  INVYR      =  INVYR,         \n  STATUSCD   =  1,         \n  Tree_count =  TPA_UNADJ,         \n  SPCD       =  SPCD,         \n  DBH        =  0.1,         \n  HT         =  NA,\n  ACTUALHT   =  NA,\n  CR         =  NA,\n  SUBP       =  SUBP,\n  TREE       =  NA,\n  AGENTCD    =  NA,\n  Species    = SPCD,\n  History    = 1,\n  CrRatio    = NA\n) |&gt; select(\n  STAND_CN, INVYR, STATUSCD, Tree_count, SPCD, DBH, HT, ACTUALHT, \n  CR, SUBP, TREE, AGENTCD, Species,History, CrRatio) |&gt; \n  select(-INVYR)\n\nnames(seed) &lt;- seed |&gt; names() |&gt; toupper()\n\n\n\n# Fixing the Tree column. \nseed &lt;- seed |&gt; group_by(STAND_CN) |&gt; \n  mutate(\n    Nrow = row_number(), \n    TREE = (100100 + Nrow)\n  ) |&gt; ungroup() |&gt; select(-Nrow)\n\n## Checking that it worked as planned. \n# seed |&gt; group_by(STAND_CN) |&gt; \n#   summarise(n = n()) |&gt; \n#   arrange(desc(n))\n# \n# seed |&gt; filter(STAND_CN == \"40220797010497\")\n# seed |&gt; filter(STAND_CN == \"22398336010497\")\n# seed |&gt; filter(STAND_CN == \"645308766126144\")\n\nfvs_tree &lt;- add_row(tree, seed)\n# fvs_tree"
  },
  {
    "objectID": "1.5_DB_Create.html#part-5",
    "href": "1.5_DB_Create.html#part-5",
    "title": "1.5 DB Create",
    "section": "Part 5",
    "text": "Part 5\nAdding Standplot_cn to the tables\n\nsplt_cn &lt;- fvs_tree |&gt; select(STAND_CN, SUBP) |&gt; mutate(STANDPLOT_CN = str_c(STAND_CN, \"_\", SUBP)) |&gt; \n  unique()\n\nfvs_tree &lt;- fvs_tree |&gt; mutate(STANDPLOT_CN = str_c(STAND_CN, \"_\", SUBP)) |&gt; relocate(STANDPLOT_CN, .after = STAND_CN)\n\n\nplot_table &lt;- plot_table |&gt; \n  uncount(weights = 4, .id = \"SUBP\") |&gt; \n  mutate(STANDPLOT_CN = str_c(STAND_CN, \"_\", SUBP)) |&gt; \n  relocate(STANDPLOT_CN, .after = STAND_CN) |&gt; \n  select(-SUBP)\n\nplot_table &lt;- left_join(splt_cn, plot_table, join_by(STANDPLOT_CN, STAND_CN))\n\nn_distinct(fvs_tree$STANDPLOT_CN)\n\n[1] 15369\n\nn_distinct(fvs_tree$STAND_CN)\n\n[1] 3945\n\n\nThere are fewer plots here than I started with, but I am pretty sure they were plots with dead trees.\n\nplot_table |&gt; filter(STAND_CN == \"12981943010497\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTAND_CN\nSUBP\nSTANDPLOT_CN\nINV_YEAR\nCASE\nBASAL_AREA_FACTOR\nINV_PLOT_SIZE\nBRK_DBH\n\n\n\n\n12981943010497\n1\n12981943010497_1\n2014\n2005\n0\n1\n999\n\n\n12981943010497\n2\n12981943010497_2\n2014\n2005\n0\n1\n999\n\n\n12981943010497\n3\n12981943010497_3\n2014\n2005\n0\n1\n999\n\n\n12981943010497\n4\n12981943010497_4\n2014\n2005\n0\n1\n999\n\n\n\n\n\n\nI am not sure why I am getting a different number of trees here, 3434. At the end of section 2 of 1_Import and Clean, 3,531 of 3,552 plots have trees. There are a few less plots here, and I am surprised.\nRachel’s code here is using CSVs, that might be easier than running with an Sqlite db.\n\nplot_table &lt;- plot_table |&gt; rename(OYEAR = CASE) |&gt; select(-SUBP)\nfvs_tree &lt;- fvs_tree |&gt; select(STAND_CN, STANDPLOT_CN, TREE, TREE_COUNT, HISTORY, SPECIES, DBH, HT, CR, CRRATIO)\n\nfvs_tree &lt;- fvs_tree |&gt; mutate(STAND_CN      =  as.character(STAND_CN),  \n                   STANDPLOT_CN  =  as.character(STANDPLOT_CN),\n                   TREE          =  as.character(TREE), \n                   TREE_COUNT    =  as.numeric(TREE_COUNT), \n                   HISTORY       =  as.numeric(HISTORY), \n                   SPECIES       =  as.character(SPECIES), \n                   DBH           =  as.numeric(DBH), \n                   HT            =  as.numeric(HT), \n                   CR            =  as.numeric(CR), \n                   CRRATIO       =  as.numeric(CRRATIO)\n                     )\n# str(fvs_tree)\n\n\n# Part 5 Create DB ---------------------------------------------------------------------------------\ngetwd()\n\n\n# Just to make it easier to integrate this into the other scripts I am renaming the tables FVS_...\n\n\ncon &lt;- dbConnect(RSQLite::SQLite(), dbname = \"./homemade_fvs_db_17sept24.db\")\n\n\n\ndbWriteTable(conn = con, name = \"FVS_PLOTINIT\", value = plot_table, overwrite = T)\ndbWriteTable(conn = con, name = \"FVS_TREEINIT\", value = fvs_tree, overwrite = T)\n\n# Set the schema\ndbExecute(con, str_c(\"CREATE TABLE FVS_PLOTINIT_PLOT (\",\n                     \"STAND_CN TEXT, \",\n                     \"STANDPLOT_CN TEXT, \",\n                     \"INV_YEAR INTEGER, \",\n                     \"OYEAR INTEGER, \",\n                     \"BASAL_AREA_FACTOR REAL, \",\n                     \"INV_PLOT_SIZE REAL, \",\n                     \"BRK_DBH REAL)\"))\n\nplot_table |&gt; names()\n\ndbExecute(con, str_c(\"INSERT INTO FVS_PLOTINIT_PLOT SELECT * FROM FVS_PLOTINIT\"))\ndbExecute(con, \"DROP TABLE FVS_PLOTINIT\")\n\n# 9.2 TREE SCHEMA ---------------------------------------------------------\n\n\ndbExecute(con, str_c(\"CREATE TABLE FVS_TREEINIT_PLOT ( \",\n                     \"STAND_CN TEXT, \",\n                     \"STANDPLOT_CN TEXT, \",\n                     \"TREE TEXT, \",\n                     \"TREE_COUNT REAL, \",\n                     \"HISTORY   REAL, \",\n                     \"SPECIES   TEXT, \",\n                     \"DBH REAL, \",\n                     \"HT REAL, \",\n                     \"CR    REAL, \",\n                     \"CRRATIO   REAL)\"))\n\n\ndbExecute(con, str_c(\"INSERT INTO FVS_TREEINIT_PLOT SELECT * FROM FVS_TREEINIT\"))\ndbExecute(con, \"DROP TABLE FVS_TREEINIT\")\n\n\n\n\n\ndbListTables(conn = con)\ndbDisconnect(con)\n\n# Remove NA values when writing files (FVS does NOT like them)\n### UPDATE YOUR OUTPUT FILE NAMES HERE ###\n# write.csv(tree_table, file = \"tree_table_R1_Carbon_2014.csv\", na = \"\", row.names = FALSE)\n# write.csv(stands_with_fuels, file = \"stand_table_R1_Carbon2014.csv\", na = \"\", row.names = FALSE)\n\n\n# splt_cn &lt;- splt_cn |&gt; select(STAND_CN, STANDPLOT_CN)\n\n# write_csv(splt_cn, \"./1.5_dbCreation_standlist.csv\")"
  },
  {
    "objectID": "11_Heatmap.html",
    "href": "11_Heatmap.html",
    "title": "11- 1st Map",
    "section": "",
    "text": "06Sept24\nLibraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(randomForest)                 # RF package that yaImpute uses\nlibrary(yaImpute)                     # RF imputation\nlibrary(vegan)                        # Something to do the yaImpute\n\n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n# library(stars)\nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\nlibrary(sf)                           # Simple Features/vector data\nlibrary(terra)                        # Raster functions\nlibrary(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\nCreated on\nymd(as_date(file.info(\"9_Heatmap.qmd\")$ctime))\n\n[1] NA"
  },
  {
    "objectID": "11_Heatmap.html#making-them-alike",
    "href": "11_Heatmap.html#making-them-alike",
    "title": "11- 1st Map",
    "section": "Making them alike",
    "text": "Making them alike\nI need plt_cn, species and tpa.\n\nagp_nc_seed_counts &lt;- agp_nc_seedlings %&gt;% group_by(PLT_CN, SPECIES_SYMBOL) %&gt;% \n  summarise(\n    .groups =  \"drop\", \n    # n = n(), \n    agp_sum_tpa = sum(TPA_UNADJ) %&gt;% round()\n  ) %&gt;% arrange(desc(agp_sum_tpa))\n\nagp_nc_seed_counts %&gt;% nrow()\n\n[1] 7534\n\nagp_nc_seed_counts %&gt;% head()\n\n\n\n\n\nPLT_CN\nSPECIES_SYMBOL\nagp_sum_tpa\n\n\n\n\n40220375010497\nTSHE\n38382\n\n\n30764972020004\nPIPO\n34184\n\n\n273642268489998\nTSHE\n30436\n\n\n188764567020004\nPICO\n25788\n\n\n174763863020004\nPICO\n22265\n\n\n30763617020004\nTSHE\n19191\n\n\n\n\n\n\n\nagp_nc_seed_counts &lt;- left_join(agp_nc_seed_counts, agp_nc_conds, join_by(PLT_CN))\nagp_nc_seed_counts %&gt;% nrow()\n\n[1] 7534\n\nagp_nc_seed_counts %&gt;% head()\n\n\n\n\n\nPLT_CN\nSPECIES_SYMBOL\nagp_sum_tpa\nFORTYPCD\nFLDTYPCD\n\n\n\n\n40220375010497\nTSHE\n38382\n301\n301\n\n\n30764972020004\nPIPO\n34184\n221\n221\n\n\n273642268489998\nTSHE\n30436\n301\n301\n\n\n188764567020004\nPICO\n25788\n281\n281\n\n\n174763863020004\nPICO\n22265\n281\n281\n\n\n30763617020004\nTSHE\n19191\n264\n264\n\n\n\n\n\n\n\nRF\n\nrf_imputation &lt;- rf_imputation %&gt;% mutate(PLT_CN = str_remove(STANDPLOT_CN, \"_.\")) %&gt;% relocate(PLT_CN)\ncns &lt;- rf_imputation %&gt;% select(PLT_CN) %&gt;% unique()\n\ncns &lt;- db_list(cns, PLT_CN)\n\ncon &lt;- dbConnect(RSQLite::SQLite(), clean_paths(r\"(C:\\RxFire\\Data\\SQLite_FIADB_ENTIRE.db)\"))\nrf_nc_conds &lt;- dbGetQuery(con, str_c(\"select PLT_CN, FORTYPCD, FLDTYPCD from COND where PLT_CN in (\", cns, \")\"))\ndbDisconnect(con)\n\n\nzt &lt;- rf_nc_conds %&gt;% mutate(\n  both_nas = ifelse(is.na(FORTYPCD) & is.na(FLDTYPCD), T, F),\n  either_nas = ifelse(is.na(FORTYPCD) | is.na(FLDTYPCD), T, F)\n)\n\nsum(zt$both_nas)\n\n[1] 0\n\nsum(zt$either_nas)\n\n[1] 0\n\nrf_nc_conds %&gt;% head()\n\n\n\n\n\nPLT_CN\nFORTYPCD\nFLDTYPCD\n\n\n\n\n22398239010497\n301\n264\n\n\n24150792010900\n264\n301\n\n\n24186703010900\n264\n264\n\n\n24185416010900\n301\n301\n\n\n22398320010497\n201\n201\n\n\n24186143010900\n304\n304\n\n\n\n\n\n\n\nrf_imputation &lt;- rf_imputation %&gt;% mutate(PLT_CN = str_remove(STANDPLOT_CN, \"_.\")) %&gt;% relocate(PLT_CN)\n\nrf_nc_seed_counts &lt;- rf_imputation %&gt;% \n  # select_if(is.numeric) %&gt;% \n  select(PLT_CN, ends_with(\"TD\")) %&gt;%\n  pivot_longer(cols = -c(PLT_CN), names_to = \"SPECIES_SYMBOL\", values_to = \"TPA\")\n\nrf_nc_seed_counts &lt;- rf_nc_seed_counts %&gt;% group_by(PLT_CN, SPECIES_SYMBOL) %&gt;% \n  summarise(\n    # n = n(), \n    imp_sum_tpa = sum(TPA) %&gt;% round(), \n    .groups = \"drop\"\n  ) %&gt;% \n  arrange(desc(imp_sum_tpa))\n\nrf_nc_seed_counts &lt;- rf_nc_seed_counts %&gt;% mutate(SPECIES_SYMBOL = str_remove(SPECIES_SYMBOL, \"_TD\"))\n\nrf_nc_seed_counts &lt;- left_join(rf_nc_seed_counts, rf_nc_conds, join_by(PLT_CN))\n\n\nrf_nc_seed_counts %&gt;% nrow()\n\n[1] 8679\n\nrf_nc_seed_counts %&gt;% head()\n\n\n\n\n\nPLT_CN\nSPECIES_SYMBOL\nimp_sum_tpa\nFORTYPCD\nFLDTYPCD\n\n\n\n\n346864572489998\ntotal\n27437\n265\n266\n\n\n346864572489998\nrare\n26463\n265\n266\n\n\n40220711010497\ntotal\n23614\n270\n270\n\n\n40220711010497\nABAM\n23314\n270\n270\n\n\n29881630010497\ntotal\n14393\n301\n301\n\n\n444202461489998\ntotal\n12294\n264\n264"
  },
  {
    "objectID": "2_FVS_Variables.html",
    "href": "2_FVS_Variables.html",
    "title": "2 FVS Vars",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \n# library(yaImpute)                     # RF imputation     \n# library(vegan)                        # Something to do the yaImpute \n# library(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                      \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\n# No sci-notation. \noptions(scipen = 999)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"db_list\", \"add_commas\")\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nadd_commas &lt;- function(n) {\n  t &lt;- prettyNum(n, \",\",scientific=FALSE)\n  return(noquote(t))\n}"
  },
  {
    "objectID": "2_FVS_Variables.html#stem-exclusion",
    "href": "2_FVS_Variables.html#stem-exclusion",
    "title": "2 FVS Vars",
    "section": "Stem Exclusion",
    "text": "Stem Exclusion\n\nregPlots &lt;- stem |&gt; filter(s_class != \"SE\")\nunique(regPlots$s_class)\n\n[1] \"SI\" \"BG\" \"UR\" \"OS\" \"YM\" \"OM\"\n\n\n8,545 Subplots\n9,253\n\nadd_commas((nrow(stem) - nrow(regPlots)))\n\n[1] 4,683\n\nnrow(regPlots) %&gt;% add_commas()\n\n[1] 10,637\n\n\n\n3,858 plots were classed as Stem Exclusion.\n4,067 plots were classed as Stem Exclusion.\n4,683 lost, 10,637 kept\n\n\nregPlots |&gt; filter(s_class == \"BG\") |&gt; select(CC, BA, SDI) |&gt; summary()\n\n       CC               BA                SDI       \n Min.   : 0.000   Min.   : 0.00409   Min.   : 0.00  \n 1st Qu.: 2.000   1st Qu.: 2.55472   1st Qu.: 5.00  \n Median : 3.000   Median : 5.96045   Median :11.00  \n Mean   : 3.509   Mean   : 7.37372   Mean   :13.04  \n 3rd Qu.: 5.000   3rd Qu.:10.65093   3rd Qu.:19.00  \n Max.   :12.000   Max.   :41.03201   Max.   :66.00  \n\n\nHere is the FVS Essentials (p.81) quip about stem exclusion:\nInitially defined strata must have over 5 percent canopy cover or they are rejected. Nominal stratum diameter and height are computed by averaging the nine sample trees centered on the 70th percentile tree. Once the strata are defined, the stand is classified as bare ground (BG), stand initiation (SI), stem exclusion (SE), understory reinitiation (UR), young forest multistrata (YM), old forest single stratum (OS), or old forest multistrata (OM) as a function of the number of strata, the nominal diameter of trees in the strata, and stocking."
  },
  {
    "objectID": "4_RF_by_Eco.html",
    "href": "4_RF_by_Eco.html",
    "title": "4 RF Ecos",
    "section": "",
    "text": "Libraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\n\n\n\nImport\n\nrm(list = ls())\n\n\nimp_db &lt;- clean_paths(r\"(./homemade_fvs_db2.db)\")\n\n\ncon &lt;- dbConnect(RSQLite::SQLite(), imp_db)\n\nimp_data &lt;- dbGetQuery(con, \"select * from imp_data\")\n\neco_names &lt;- tribble(~Eco3, ~ECO_NAME, \n        \"242A\",  \"Puget Tr.\", \n        \"342I\",  \"Columbia B.\", \n        \"M242B\", \"W.Cascades\", \n        \"M242C\", \"E.Cascades\", \n        \"M242D\", \"N.Cascades\", \n        \"M333A\", \"Ok. High\")\n\n\nn_cascades &lt;- imp_data |&gt; filter(EcoRegion == \"M242D\") |&gt; select(-EcoRegion)\n\n\n\nN. Cascades\n\n# n_cascades |&gt; str()\nnames(n_cascades)\n\n [1] \"STANDPLOT_CN\" \"CC\"           \"SDI\"          \"FPAG\"         \"LAT\"         \n [6] \"LON\"          \"ELEV\"         \"ASPECT\"       \"SLOPE\"        \"BAp\"         \n[11] \"PIPO_BA\"      \"PSME_BA\"      \"ABAM_BA\"      \"TSME_BA\"      \"ABGR_BA\"     \n[16] \"PICO_BA\"      \"LALY_BA\"      \"PIAL_BA\"      \"PIEN_BA\"      \"ABLA_BA\"     \n[21] \"LAOC_BA\"      \"THPL_BA\"      \"ALRU2_BA\"     \"TSHE_BA\"      \"TABR2_BA\"    \n[26] \"CHNO_BA\"      \"POBAT_BA\"     \"ABPR_BA\"      \"BEPA_BA\"      \"PREM_BA\"     \n[31] \"CONU4_BA\"     \"POTR5_BA\"     \"PIMO3_BA\"     \"ACGL_BA\"      \"FRLA_BA\"     \n[36] \"ACMA3_BA\"     \"2TREE_BA\"     \"ALRH2_BA\"     \"QUGA4_BA\"     \"PRVI_BA\"     \n[41] \"MAFU_BA\"      \"PISI_BA\"      \"ABCO_BA\"      \"JUHI_BA\"      \"ARME_BA\"     \n[46] \"BEOC2_BA\"     \"PIPO_TD\"      \"ABLA_TD\"      \"TSME_TD\"      \"PSME_TD\"     \n[51] \"ABGR_TD\"      \"LALY_TD\"      \"PIEN_TD\"      \"PICO_TD\"      \"LAOC_TD\"     \n[56] \"ACGL_TD\"      \"TABR2_TD\"     \"CHNO_TD\"      \"ABAM_TD\"      \"THPL_TD\"     \n[61] \"TSHE_TD\"      \"BEPA_TD\"      \"PREM_TD\"      \"POTR5_TD\"     \"PIAL_TD\"     \n[66] \"ALRU2_TD\"     \"ABPR_TD\"      \"PIMO3_TD\"     \"PRVI_TD\"      \"2TB_TD\"      \n[71] \"ACMA3_TD\"     \"CONU4_TD\"     \"QUGA4_TD\"     \"MAFU_TD\"      \"ABCO_TD\"     \n[76] \"PSMA_TD\"      \"ALRH2_TD\"     \"POBAT_TD\"     \"BEOC2_TD\"     \"PRPE2_TD\"    \n[81] \"CHLA_TD\"      \"PISI_TD\"     \n\n\nSeparating the predictors from the responses\n\nx_pred &lt;- n_cascades[,1:46]\nnames(x_pred)\n\n [1] \"STANDPLOT_CN\" \"CC\"           \"SDI\"          \"FPAG\"         \"LAT\"         \n [6] \"LON\"          \"ELEV\"         \"ASPECT\"       \"SLOPE\"        \"BAp\"         \n[11] \"PIPO_BA\"      \"PSME_BA\"      \"ABAM_BA\"      \"TSME_BA\"      \"ABGR_BA\"     \n[16] \"PICO_BA\"      \"LALY_BA\"      \"PIAL_BA\"      \"PIEN_BA\"      \"ABLA_BA\"     \n[21] \"LAOC_BA\"      \"THPL_BA\"      \"ALRU2_BA\"     \"TSHE_BA\"      \"TABR2_BA\"    \n[26] \"CHNO_BA\"      \"POBAT_BA\"     \"ABPR_BA\"      \"BEPA_BA\"      \"PREM_BA\"     \n[31] \"CONU4_BA\"     \"POTR5_BA\"     \"PIMO3_BA\"     \"ACGL_BA\"      \"FRLA_BA\"     \n[36] \"ACMA3_BA\"     \"2TREE_BA\"     \"ALRH2_BA\"     \"QUGA4_BA\"     \"PRVI_BA\"     \n[41] \"MAFU_BA\"      \"PISI_BA\"      \"ABCO_BA\"      \"JUHI_BA\"      \"ARME_BA\"     \n[46] \"BEOC2_BA\"    \n\ny_resp &lt;- n_cascades[, c(1, 47:ncol(n_cascades))]\n\n# x |&gt; str()\n\n\nnames(y_resp)\n\n [1] \"STANDPLOT_CN\" \"PIPO_TD\"      \"ABLA_TD\"      \"TSME_TD\"      \"PSME_TD\"     \n [6] \"ABGR_TD\"      \"LALY_TD\"      \"PIEN_TD\"      \"PICO_TD\"      \"LAOC_TD\"     \n[11] \"ACGL_TD\"      \"TABR2_TD\"     \"CHNO_TD\"      \"ABAM_TD\"      \"THPL_TD\"     \n[16] \"TSHE_TD\"      \"BEPA_TD\"      \"PREM_TD\"      \"POTR5_TD\"     \"PIAL_TD\"     \n[21] \"ALRU2_TD\"     \"ABPR_TD\"      \"PIMO3_TD\"     \"PRVI_TD\"      \"2TB_TD\"      \n[26] \"ACMA3_TD\"     \"CONU4_TD\"     \"QUGA4_TD\"     \"MAFU_TD\"      \"ABCO_TD\"     \n[31] \"PSMA_TD\"      \"ALRH2_TD\"     \"POBAT_TD\"     \"BEOC2_TD\"     \"PRPE2_TD\"    \n[36] \"CHLA_TD\"      \"PISI_TD\"     \n\n\nThis is where I am not sure what to do.\n\nI can either run this as the full set of x and y, or try and select the overstory species by the seedlings.\nRF will not take factors with empty classes, so at the least I have to split up the FPAGs into F.P.A.G.\nShould also remove the empty tree categories.\n\nThere is also the issue of stands that have overstory, but not under. If there is no regeneration, then those stands should probably go into the probability of regeneration part of the model and not the regeneration after deciding if regen is to happen.\nI would like to model the probability of regeneration in this model as well. In fact, I could just run the RF for that first. I was considering a logit, but RF would be faster to try.\nHow should I deal with the empty As and Gs. NAs would be the best way to deal with them, but I do not know how RF will take that. I could give them unique codes, but then I am adding data. I guess I can leave them as empty characters. That feels wrong, but I can’t think of a reason why it wouldn’t work the same. For now I will leave them as empties.\n\nx_pred &lt;- x_pred |&gt; mutate(\n  f = str_sub(FPAG, 1, 1),\n  p = str_sub(FPAG, 2, 2),\n  a = str_sub(FPAG, 3, 3),\n  g = str_sub(FPAG, 4, 4),\n) |&gt; select(-FPAG)\n\n\nNC largest BA spp\n\nt &lt;- x_pred  |&gt; select_if(is.numeric)\nt &lt;- t[, colSums(t) != 0]\n\nt2 &lt;- sapply(t[,9:ncol(t)], sum)\nt2 &lt;- t2 |&gt; sort(decreasing = T)\nt2\n\n      PSME_BA       ABAM_BA       TSHE_BA       THPL_BA       TSME_BA \n26739.7932824 20532.4595711 19284.3462117  8513.0268588  7399.8409280 \n      ABLA_BA       PIPO_BA       PICO_BA       PIEN_BA       ABGR_BA \n 5252.8166352  4870.9300874  2940.4700282  2830.3465026  2489.4660372 \n      CHNO_BA      ALRU2_BA       PIAL_BA       LAOC_BA      ACMA3_BA \n 1328.7801453  1245.0262140   573.6183870   531.6589495   438.1439843 \n      LALY_BA      PIMO3_BA       ABPR_BA      POBAT_BA       ACGL_BA \n  363.7744168   287.4134388   272.5000457   251.0438668   146.7487189 \n      PISI_BA      TABR2_BA      POTR5_BA       BEPA_BA       PREM_BA \n  133.5668888    91.8866365    85.8487632    49.0018027    19.7650810 \n     ALRH2_BA       MAFU_BA      CONU4_BA       PRVI_BA      2TREE_BA \n    2.6586163     2.3550373     2.2109185     1.3901262     0.6909745 \n\n\n\nMost prevelant by stand\n\nj &lt;- 5\nj &lt;- NULL\n# rm(j)\n\nimps &lt;- c()\nimps_err &lt;- c()\n# for (j in 1:length(li_env)) {\nfor (j in 1:50) { \n  data &lt;- get(li_env[j])\n  cns &lt;- data |&gt; select(STANDPLOT_CN) |&gt; rownames_to_column(\"id\")\n  data &lt;- data |&gt; select(-STANDPLOT_CN)\n  \n  \n  # refs &lt;- rownames(data[1:nrow(data) - 1,])\n  refs &lt;- rownames(data[1:(nrow(data)*.75),])\n\n  x &lt;- data |&gt; select(CC, BA, SDI, ELEVFT, SLOPE, ASPECT, PHYSCLCD)\n  \n  yfull &lt;- data |&gt; select(any_of(names_y))\n  y &lt;- yfull #[refs,]\n  y &lt;- y |&gt; relocate(total_TD, .after = last_col())\n  \n  y_vars &lt;- names(y)\n  b &lt;- y_vars[!y_vars %in% \"total_TD\"]\n  \n  # loop to find the 3 columns with the most TPA\n  for (i in 1:2) {\n    \n    c_value &lt;- str_c(\"largest_\", i)\n    \n    y &lt;- y %&gt;%\n      rowwise() %&gt;%\n      mutate(!!c_value := n_largest(c_across(all_of(b)), i)) |&gt;\n      ungroup()\n  }\n  # Setting spp names to the largest columns\n  y$max_spp1 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_1[x])][1])\n  y$max_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][1])\n  y$alt_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][2])\n  # y$max_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][1])\n  # y$alt_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][2])\n  \n  y &lt;- y |&gt; mutate(\n    max_spp2 = if_else(largest_1 == largest_2, alt_spp2, max_spp2),\n    # max_spp3 = if_else(largest_2 == largest_3, alt_spp3, max_spp3)\n    ) |&gt; select(-c(alt_spp2))#, alt_spp3\n  \n  yfull &lt;- y |&gt; mutate(\n    max_spp1 = ifelse(largest_1 == 0, \"zero\", max_spp1),\n    max_spp2 = ifelse(largest_2 == 0, \"zero\", max_spp2),\n    # max_spp3 = ifelse(largest_3 == 0, \"zero\", max_spp3)\n    )\n  \n  y &lt;- yfull[, y_vars] #refs\n  \n  vars_yrf &lt;- c(\"total_TD\")\n  vars_yrf &lt;- append(vars_yrf, names(yfull)[!names(yfull) %in% y_vars])\n  \n  yrf &lt;- yfull[, vars_yrf]#refs\n  \n  \n  x$PHYSCLCD &lt;- factor(x$PHYSCLCD)\n  \n  yrf$max_spp1 &lt;- factor(yrf$max_spp1)\n  yrf$max_spp2 &lt;- factor(yrf$max_spp2)\n  # yrf$max_spp3 &lt;- factor(yrf$max_spp3)\n  yrf &lt;- droplevels(yrf)\n  # str(yrf)\n  \n  \n  cns$id &lt;- as.integer(cns$id)\n  \n  x &lt;- as.data.frame(x)\n  yrf &lt;- as.data.frame(yrf)\n  y &lt;- as.data.frame(y)\n  \n  x2 &lt;- x |&gt; rowid_to_column(\"id\")\n  x2 &lt;- left_join(x2, cns, by = \"id\") |&gt; select(-id)\n  x &lt;- x2 |&gt; column_to_rownames(\"STANDPLOT_CN\")\n  \n  yrf2 &lt;- yrf |&gt; rowid_to_column(\"id\")\n  yrf2 &lt;- left_join(yrf2, cns, by = \"id\") |&gt; select(-id)\n  yrf &lt;- yrf2 |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\n  y &lt;- y |&gt; rowid_to_column(\"id\")\n  y &lt;- left_join(y, cns, by = \"id\") |&gt; select(-id)\n  y &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n  save(y, file = str_c(\"imps_0417/y_\", j, \".Rdata\"))\n  \n  # tryCatch({\n  #   rf_yai &lt;- yai(x = x, y = yrf, method = \"randomForest\", k = k, bootstrap = T)\n  #   \n  #   assign(rf_i, rf_yai)\n  #   imps &lt;- append(imps, rf_i)\n  #   \n  #   save(rf_i, file = str_c(\"imps_0417/\",rf_i, \".Rdata\"))\n  #   \n  #   }, error = function(cond){cat(\n  #     \"ERROR \",conditionMessage(cond), \"_\",li_env[j], \"_\"\n  #     )})\n  \n  rf_yai &lt;- yai(x = x, y = yrf, method = \"randomForest\", k = k, bootstrap = T)\n  save(rf_yai, file = str_c(\"imps_0417/\", str_c(\"rf_\", li_env[j]), \".Rdata\"))\n  \n  \n  rf_i &lt;- str_c(\"rf_\", li_env[j])\n  imps &lt;- append(imps, rf_i)\n}\n\nSeedlings in decreasing order\n\nt &lt;- y_resp  |&gt; select_if(is.numeric)\nt &lt;- t[, colSums(t) != 0]\n\nty &lt;- sapply(t[,1:ncol(t)], sum)\nty &lt;- ty |&gt; sort(decreasing = T)\n\nb &lt;- names(ty)\nb\n\n [1] \"ABAM_TD\"  \"TSHE_TD\"  \"ABLA_TD\"  \"PSME_TD\"  \"PIEN_TD\"  \"ABGR_TD\" \n [7] \"TSME_TD\"  \"PICO_TD\"  \"THPL_TD\"  \"LAOC_TD\"  \"CHNO_TD\"  \"TABR2_TD\"\n[13] \"PIPO_TD\"  \"PIAL_TD\"  \"POTR5_TD\" \"PIMO3_TD\" \"LALY_TD\"  \"PREM_TD\" \n[19] \"ACMA3_TD\" \"PRVI_TD\"  \"ACGL_TD\"  \"ALRU2_TD\" \"BEPA_TD\"  \"ABPR_TD\" \n[25] \"POBAT_TD\" \"2TB_TD\"   \"PSMA_TD\"  \"ALRH2_TD\" \"PISI_TD\" \n\n\nN.Cascades drops from 35 to 28 columns after removing empty Seedling categories.\n\nn_largest &lt;- function(x = b, n) {\n  \n  # In descending order, prevelance\n  x1 &lt;- sort(x, decreasing = TRUE)\n  # Select the nth most prevelant. \n  x1[n]\n}\n\n\n# response &lt;-  y\n\ny &lt;- y_resp |&gt; select(-STANDPLOT_CN)\nb &lt;- names(y)\n\nfor (i in 1:3) {\n    \n    c_value &lt;- str_c(\"largest_\", i)\n    \n    y &lt;- y %&gt;%\n      rowwise() %&gt;%\n      mutate(!!c_value := n_largest(c_across(all_of(b)), i)) |&gt;\n      ungroup()\n}\n\n\n\n\nAdd species names for largest spp counts\n\n# Setting spp names to the largest columns\ny$max_spp1 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_1[x])][1])\ny$max_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][1])\ny$alt_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][2])\ny$max_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][1])\ny$alt_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][2])\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = if_else(largest_1 == largest_2, alt_spp2, max_spp2),\n  max_spp3 = if_else(largest_2 == largest_3, alt_spp3, max_spp3)\n  ) |&gt; select(-c(alt_spp2, alt_spp3))#, alt_spp3\n\nyfull &lt;- y |&gt; mutate(\n  max_spp1 = ifelse(largest_1 == 0, \"zero\", max_spp1),\n  max_spp2 = ifelse(largest_2 == 0, \"zero\", max_spp2),\n  max_spp3 = ifelse(largest_3 == 0, \"zero\", max_spp3)\n  )\n\nyfull$STANDPLOT_CN &lt;- y_resp$STANDPLOT_CN\n\nyfull &lt;- yfull |&gt; relocate(STANDPLOT_CN)\n\nyfull |&gt; filter(STANDPLOT_CN == \"22954484010497_4\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nPIPO_TD\nABLA_TD\nTSME_TD\nPSME_TD\nABGR_TD\nLALY_TD\nPIEN_TD\nPICO_TD\nLAOC_TD\nACGL_TD\nTABR2_TD\nCHNO_TD\nABAM_TD\nTHPL_TD\nTSHE_TD\nBEPA_TD\nPREM_TD\nPOTR5_TD\nPIAL_TD\nALRU2_TD\nABPR_TD\nPIMO3_TD\nPRVI_TD\n2TB_TD\nACMA3_TD\nCONU4_TD\nQUGA4_TD\nMAFU_TD\nABCO_TD\nPSMA_TD\nALRH2_TD\nPOBAT_TD\nBEOC2_TD\nPRPE2_TD\nCHLA_TD\nPISI_TD\nlargest_1\nlargest_2\nlargest_3\nmax_spp1\nmax_spp2\nmax_spp3\n\n\n\n\n22954484010497_4\n0\n0\n74.96528\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8321.146\n0\n374.8264\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8321.146\n374.8264\n74.96528\nABAM_TD\nTSHE_TD\nTSME_TD\n\n\n\n\n\nyfull[1:5, 36:41]\n\n\n\n\n\nCHLA_TD\nPISI_TD\nlargest_1\nlargest_2\nlargest_3\nmax_spp1\n\n\n\n\n0\n0\n0.0000\n0\n0\nzero\n\n\n0\n0\n0.0000\n0\n0\nzero\n\n\n0\n0\n0.0000\n0\n0\nzero\n\n\n0\n0\n0.0000\n0\n0\nzero\n\n\n0\n0\n149.9306\n0\n0\nPIPO_TD\n\n\n\n\n\n\n\nyfull &lt;- yfull |&gt; mutate(\n  total_TD = rowSums(yfull[grep(\"_TD\", names(yfull))])\n)\n\n\n\n\nN.Cascades data\nyfull  |&gt; filter(total_TD &gt; 0) |&gt; group_by(max_spp1) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_1))\n  ) |&gt; arrange(desc(sum_tpa)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp1,-sum_tpa), y = sum_tpa, fill = max_spp1) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N trees in largest_spp in N.C. above zero\"\n  )\nyfull |&gt; filter(total_TD &gt; 0)  |&gt; group_by(max_spp1) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_1))\n  ) |&gt; arrange(desc(n)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp1,-n), y = n, fill = max_spp1) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N Plots in largest_spp in N.C. above zero\"\n  )\n\n\n\n\n\n\n\n\n\n\nIn N.Cascades, there ABAM and TSHE, then another between ABLA and PSME.\nThere are two ways I can think about this. One is which species has the most trees. The other is which species is most often the largest species.\n\nSpp 2\nyfull |&gt; filter(total_TD &gt; 0)  |&gt; group_by(max_spp2) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_2))\n  ) |&gt; arrange(desc(sum_tpa)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp2,-sum_tpa), y = sum_tpa, fill = max_spp2) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N trees in largest_spp2 in N.C. above zero\"\n  )\nyfull |&gt; filter(total_TD &gt; 0) |&gt; group_by(max_spp2) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_2))\n  ) |&gt; arrange(desc(n)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp2,-n), y = n, fill = max_spp2) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N Plots in largest_spp2 in N.C. above zero\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nSpp 3\nyfull |&gt; filter(total_TD &gt; 0)  |&gt; group_by(max_spp3) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_3))\n  ) |&gt; arrange(desc(sum_tpa)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp3,-sum_tpa), y = sum_tpa, fill = max_spp3) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N trees in largest_spp3 in N.C. above zero\"\n  )\nyfull |&gt; filter(total_TD &gt; 0) |&gt; group_by(max_spp3) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_3))\n  ) |&gt; arrange(desc(n)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp3,-n), y = n, fill = max_spp3) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N Plots in largest_spp3 in N.C. above zero\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nAll species in the max two\n\nspp1 &lt;- unique(yfull$max_spp1)\nspp2 &lt;- unique(yfull$max_spp2)\n\n\nspp1 |&gt; sort()\n\n [1] \"ABAM_TD\"  \"ABGR_TD\"  \"ABLA_TD\"  \"ACGL_TD\"  \"ACMA3_TD\" \"ALRH2_TD\"\n [7] \"ALRU2_TD\" \"BEPA_TD\"  \"CHNO_TD\"  \"LALY_TD\"  \"LAOC_TD\"  \"PIAL_TD\" \n[13] \"PICO_TD\"  \"PIEN_TD\"  \"PIMO3_TD\" \"PIPO_TD\"  \"POBAT_TD\" \"POTR5_TD\"\n[19] \"PREM_TD\"  \"PRVI_TD\"  \"PSMA_TD\"  \"PSME_TD\"  \"TABR2_TD\" \"THPL_TD\" \n[25] \"TSHE_TD\"  \"TSME_TD\"  \"zero\"    \n\n\n\nspp2 |&gt; sort()\n\n [1] \"2TB_TD\"   \"ABAM_TD\"  \"ABGR_TD\"  \"ABLA_TD\"  \"ABPR_TD\"  \"ACGL_TD\" \n [7] \"ACMA3_TD\" \"ALRU2_TD\" \"CHNO_TD\"  \"LALY_TD\"  \"LAOC_TD\"  \"PIAL_TD\" \n[13] \"PICO_TD\"  \"PIEN_TD\"  \"PIMO3_TD\" \"PIPO_TD\"  \"POBAT_TD\" \"POTR5_TD\"\n[19] \"PREM_TD\"  \"PRVI_TD\"  \"PSME_TD\"  \"TABR2_TD\" \"THPL_TD\"  \"TSHE_TD\" \n[25] \"TSME_TD\"  \"zero\"    \n\n\n\nspp12 &lt;- append(spp1, spp2) |&gt; unique()\nspp12\n\n [1] \"zero\"     \"PIPO_TD\"  \"ABLA_TD\"  \"PSME_TD\"  \"ABGR_TD\"  \"LALY_TD\" \n [7] \"PIEN_TD\"  \"TABR2_TD\" \"ABAM_TD\"  \"TSME_TD\"  \"TSHE_TD\"  \"BEPA_TD\" \n[13] \"POTR5_TD\" \"LAOC_TD\"  \"ACGL_TD\"  \"PIAL_TD\"  \"PICO_TD\"  \"THPL_TD\" \n[19] \"CHNO_TD\"  \"ACMA3_TD\" \"ALRU2_TD\" \"PIMO3_TD\" \"PSMA_TD\"  \"PREM_TD\" \n[25] \"ALRH2_TD\" \"PRVI_TD\"  \"POBAT_TD\" \"2TB_TD\"   \"ABPR_TD\" \n\n\nNames of columns where the overstory matches species in understory\n\nregen_species &lt;- str_replace_all(spp12, \"_TD\", \"_BA\")\nregen_species &lt;- regen_species[2:29]\nregen_species\n\n [1] \"PIPO_BA\"  \"ABLA_BA\"  \"PSME_BA\"  \"ABGR_BA\"  \"LALY_BA\"  \"PIEN_BA\" \n [7] \"TABR2_BA\" \"ABAM_BA\"  \"TSME_BA\"  \"TSHE_BA\"  \"BEPA_BA\"  \"POTR5_BA\"\n[13] \"LAOC_BA\"  \"ACGL_BA\"  \"PIAL_BA\"  \"PICO_BA\"  \"THPL_BA\"  \"CHNO_BA\" \n[19] \"ACMA3_BA\" \"ALRU2_BA\" \"PIMO3_BA\" \"PSMA_BA\"  \"PREM_BA\"  \"ALRH2_BA\"\n[25] \"PRVI_BA\"  \"POBAT_BA\" \"2TB_BA\"   \"ABPR_BA\" \n\n\n\noverstory &lt;- names(x_pred)\noverstory &lt;- overstory[10:45]\n\n\nOverstory not in regen\n\noverstory[!(overstory %in% regen_species)] |&gt; sort()\n\n [1] \"2TREE_BA\" \"ABCO_BA\"  \"ARME_BA\"  \"BEOC2_BA\" \"CONU4_BA\" \"FRLA_BA\" \n [7] \"JUHI_BA\"  \"MAFU_BA\"  \"PISI_BA\"  \"QUGA4_BA\"\n\n\n\nnames(x_pred)\n\n [1] \"STANDPLOT_CN\" \"CC\"           \"SDI\"          \"LAT\"          \"LON\"         \n [6] \"ELEV\"         \"ASPECT\"       \"SLOPE\"        \"BAp\"          \"PIPO_BA\"     \n[11] \"PSME_BA\"      \"ABAM_BA\"      \"TSME_BA\"      \"ABGR_BA\"      \"PICO_BA\"     \n[16] \"LALY_BA\"      \"PIAL_BA\"      \"PIEN_BA\"      \"ABLA_BA\"      \"LAOC_BA\"     \n[21] \"THPL_BA\"      \"ALRU2_BA\"     \"TSHE_BA\"      \"TABR2_BA\"     \"CHNO_BA\"     \n[26] \"POBAT_BA\"     \"ABPR_BA\"      \"BEPA_BA\"      \"PREM_BA\"      \"CONU4_BA\"    \n[31] \"POTR5_BA\"     \"PIMO3_BA\"     \"ACGL_BA\"      \"FRLA_BA\"      \"ACMA3_BA\"    \n[36] \"2TREE_BA\"     \"ALRH2_BA\"     \"QUGA4_BA\"     \"PRVI_BA\"      \"MAFU_BA\"     \n[41] \"PISI_BA\"      \"ABCO_BA\"      \"JUHI_BA\"      \"ARME_BA\"      \"BEOC2_BA\"    \n[46] \"f\"            \"p\"            \"a\"            \"g\"           \n\n\n\n\nRegen species not in overstory\n\nregen_species[!(regen_species %in% overstory)] |&gt; sort()\n\n[1] \"2TB_BA\"  \"PSMA_BA\"\n\n\nI am pretty sure that 2TB and 2 TREE are the same, but I need to go back and find out where the names were introduced. PSMA is the only species that is not present in the overstory, but is in the understory.\nFrom the FIA.REF_SPECIES 2Tree is an unknown live tree, and 2TB is unknown dead tree.\n\nnames(x_pred) |&gt; sort()\n\n [1] \"2TREE_BA\"     \"a\"            \"ABAM_BA\"      \"ABCO_BA\"      \"ABGR_BA\"     \n [6] \"ABLA_BA\"      \"ABPR_BA\"      \"ACGL_BA\"      \"ACMA3_BA\"     \"ALRH2_BA\"    \n[11] \"ALRU2_BA\"     \"ARME_BA\"      \"ASPECT\"       \"BAp\"          \"BEOC2_BA\"    \n[16] \"BEPA_BA\"      \"CC\"           \"CHNO_BA\"      \"CONU4_BA\"     \"ELEV\"        \n[21] \"f\"            \"FRLA_BA\"      \"g\"            \"JUHI_BA\"      \"LALY_BA\"     \n[26] \"LAOC_BA\"      \"LAT\"          \"LON\"          \"MAFU_BA\"      \"p\"           \n[31] \"PIAL_BA\"      \"PICO_BA\"      \"PIEN_BA\"      \"PIMO3_BA\"     \"PIPO_BA\"     \n[36] \"PISI_BA\"      \"POBAT_BA\"     \"POTR5_BA\"     \"PREM_BA\"      \"PRVI_BA\"     \n[41] \"PSME_BA\"      \"QUGA4_BA\"     \"SDI\"          \"SLOPE\"        \"STANDPLOT_CN\"\n[46] \"TABR2_BA\"     \"THPL_BA\"      \"TSHE_BA\"      \"TSME_BA\"     \n\n\n\nyfull_above0 &lt;- yfull |&gt; filter(largest_1 &gt; 0)\n\n\nhist(log(yfull$total_TD + .1))\n\n\n\n\n\n\n\nhist(log(yfull_above0$total_TD))\n\n\n\n\n\n\n\n\n\n\n\n\nRF Test\nThis test is on the North Cascades. I have removed all subplots that do not have seedlings. There were 1498 subplots available for imputation.\nI had tried to run the model with everything that I could, but there were issues. yaImpute, flags an error if there are “empty classes”. These do not actually have to be empty. I think, it errs if the subset taken for imputation, doesn’t contain all of the classes. So, there needs to be enough factors in each class to ensure that we get at least one of each after the random sample is taken. To fix this, I grouped the least common seedling species into a group named other.\nThe y variables for this imputation were the seedlings TPAs of the largest two species, and their names, plus the total TPA for the subplot.\nAs for the X variables, most were included. The main list was CC, SDI, lat, lon, elevation, aspect, slope, FPAG, and BA of the stand. The X variables also included the species BA per acre of every species present in the Ecoregion. While troubleshooting the issue, I removed A & G from FPAG in the X variables list. This may not have been necessary, but there were empty spaces in those columns as FPAGs do not need to have more than 2 letters.\n\nyfull_above0 &lt;- yfull |&gt; filter(largest_1 &gt; 0)\n\nCNs_wRegen &lt;- yfull_above0 |&gt; select(STANDPLOT_CN)\n\nx_abovr_zero &lt;- left_join(CNs_wRegen, x_pred, join_by(STANDPLOT_CN))\n\n\nx &lt;- x_abovr_zero |&gt; select(-c(a,g))\n\nx$f &lt;- factor(x$f)\nx$p &lt;- factor(x$p)\n##|&gt; select(STANf##|&gt; select(STANDPLOT_CN, CC, SDI, LAT, LON, ELEV, ASPECT, SLOPE, BAp)\n\n\ny &lt;- yfull_above0 |&gt; select(STANDPLOT_CN, max_spp1, max_spp2, largest_1, largest_2, total_TD)\n\ny_vars &lt;- names(y)\n# y_vars &lt;- y_vars[c(1:3, 5:6, 8)]\n\n\n\n# y$max_spp3 &lt;- factor(y$max_spp3)\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n# str(yrf)\n\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n\n# y &lt;- y |&gt; select(max_spp1, largest_1, total_TD)\n# y &lt;- y |&gt; select(max_spp1, largest_1, total_TD)\n# y &lt;- y |&gt; select(max_spp1)\n# y &lt;- y |&gt; select(-max_spp2)\n\nspp2_list &lt;- y |&gt; group_by(max_spp2) |&gt; summarise(\n  n = n()\n) |&gt; arrange(desc(n))\n\nspp2_list &lt;- spp2_list$max_spp2[1:10]\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = ifelse(\n    max_spp2 %in% spp2_list, max_spp2, \"Other\"\n  )\n)\n\n\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = ifelse(max_spp2 == \"2TB_TD\", \"Other\", max_spp2), \n  max_spp2 = ifelse(max_spp2 == \"TABR2_TD\", \"TABR_TD\", max_spp2),\n  max_spp2 = factor(max_spp2)\n  )\n\n\n\n\n# y$max_spp2 &lt;- droplevels(\n#   y$max_spp2\n# )\n\n\ny$max_spp1 &lt;- factor(y$max_spp1)\n# y$max_spp2 &lt;- factor(y$max_spp2)\n\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# save(rf_yai, file = str_c(\"imp_12AUG24_kitchenSink\", \".Rdata\"))\nload(str_c(\"imp_12AUG24_kitchenSink\", \".Rdata\"))\n\nyaImpute may have rejected the data because:\n\nI had y$spp2 &lt;- factor(y$spp2). That was the last thing I removed and it worked.\nThere was a variable name with a number at the front.\nThere was a variable name with a number in it.\n\nsave(rf_yai, file = str_c(“imp_12AUG24_kitchenSink”, “.Rdata”)) is the test run. It has all of the BA and other preds, but it is missing AG from FPAG. I thought they could be causing issues, even though they worked last time.\nIt was largest 1 & 2 with max spp 1 & 2, pluys total TD for the in the response variables. I had originally wanted to use all of the TDs and run a kitchen sink, but I kept removing things to find the no empty classes error.\n\n# rf_dia_i &lt;- impute(rf_dia, ancillaryData = y)\n\nrf_imp_test &lt;- impute(rf_yai)\n\nrf_imp_test |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlargest_1\nlargest_2\ntotal_TD\nlargest_1.o\nlargest_2.o\ntotal_TD.o\nmax_spp1\nmax_spp2\nmax_spp1.o\nmax_spp2.o\nCC\nSDI\nLAT\nLON\nELEV\nASPECT\nSLOPE\nBAp\nPIPO_BA\nPSME_BA\nABAM_BA\nTSME_BA\nABGR_BA\nPICO_BA\nLALY_BA\nPIAL_BA\nPIEN_BA\nABLA_BA\nLAOC_BA\nTHPL_BA\nALRU2_BA\nTSHE_BA\nTABR2_BA\nCHNO_BA\nPOBAT_BA\nABPR_BA\nBEPA_BA\nPREM_BA\nCONU4_BA\nPOTR5_BA\nPIMO3_BA\nACGL_BA\nFRLA_BA\nACMA3_BA\n2TREE_BA\nALRH2_BA\nQUGA4_BA\nPRVI_BA\nMAFU_BA\nPISI_BA\nABCO_BA\nJUHI_BA\nARME_BA\nBEOC2_BA\nCC.o\nSDI.o\nLAT.o\nLON.o\nELEV.o\nASPECT.o\nSLOPE.o\nBAp.o\nPIPO_BA.o\nPSME_BA.o\nABAM_BA.o\nTSME_BA.o\nABGR_BA.o\nPICO_BA.o\nLALY_BA.o\nPIAL_BA.o\nPIEN_BA.o\nABLA_BA.o\nLAOC_BA.o\nTHPL_BA.o\nALRU2_BA.o\nTSHE_BA.o\nTABR2_BA.o\nCHNO_BA.o\nPOBAT_BA.o\nABPR_BA.o\nBEPA_BA.o\nPREM_BA.o\nCONU4_BA.o\nPOTR5_BA.o\nPIMO3_BA.o\nACGL_BA.o\nFRLA_BA.o\nACMA3_BA.o\n2TREE_BA.o\nALRH2_BA.o\nQUGA4_BA.o\nPRVI_BA.o\nMAFU_BA.o\nPISI_BA.o\nABCO_BA.o\nJUHI_BA.o\nARME_BA.o\nBEOC2_BA.o\nf\np\nf.o\np.o\n\n\n\n\n12965290010497_2\n74.96528\n0.00000\n74.96528\n149.9306\n0.00000\n149.9306\nPIPO_TD\nzero\nPIPO_TD\nzero\n13\n56\n47.86905\n-120.3692\n3700\n124\n76\n26.37535\n8.144228\n18.22629\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n50\n47.58130\n-120.3399\n3900\n338\n55\n20.00980\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nC\nD\nC\nD\n\n\n12965572010497_4\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nABLA_TD\nTSME_TD\nABLA_TD\nTSME_TD\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n9\n48\n47.70658\n-120.8548\n5700\n10\n92\n16.70329\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nNA\nNA\nC\nA\n\n\n12965572010497_4.1\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nABLA_TD\nTSME_TD\nABLA_TD\nTSME_TD\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n12965572010497_4.2\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nABLA_TD\nTSME_TD\nABLA_TD\nTSME_TD\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n12967289010497_1\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nPSME_TD\nOther\nPSME_TD\nOther\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n10\n29\n47.89837\n-120.7647\n3100\n44\n11\n9.36495\n4.438248\n4.914173\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nNA\nNA\nC\nH\n\n\n12967289010497_1.1\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nPSME_TD\nOther\nPSME_TD\nOther\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\n\nyaiRFsummary(rf_yai)\n\n$forestAttributes\n          ntree      error         errtag levels           type\nmax_spp1    100 0.14753004 OOB error rate     26 classification\nmax_spp2    100 0.17757009 OOB error rate     11 classification\nlargest_1   100 0.03070761 OOB error rate      9 classification\nlargest_2   100 0.01802403 OOB error rate      5 classification\ntotal_TD    100 0.03671562 OOB error rate      9 classification\n\n$scaledImportance\n               LAT    SLOPE   ASPECT     ELEV       BAp        CC      SDI\nmax_spp1  1.886434 1.908383 1.544237 2.039500 1.2869105 1.2314988 1.352466\nmax_spp2  1.951273 1.486317 1.700475 2.085381 1.6983424 0.8386649 1.333268\nlargest_1 1.467530 1.798198 1.788797 1.221523 1.4914917 1.6978601 2.294734\nlargest_2 1.612400 1.828659 1.688561 1.542356 0.9627016 1.3761607 1.133497\ntotal_TD  1.815650 1.607982 1.337713 1.019399 1.8260383 1.5149478 2.162988\n               LON        p   ABAM_BA   PSME_BA   TSME_BA    LAOC_BA   TSHE_BA\nmax_spp1  1.181532 1.222890 1.1056029 1.4212306 0.4195763 -0.1927788 0.4572209\nmax_spp2  1.261891 1.242192 1.3873572 0.9027010 0.8489556  0.1732437 0.8300933\nlargest_1 1.274945 1.002970 0.9259416 0.8493907 0.9160998  0.7742442 0.9173073\nlargest_2 1.786748 1.122981 1.0250171 0.9872816 0.8179355  1.5516180 0.7512885\ntotal_TD  1.309831 1.166335 1.0197390 1.0300102 1.1098218  0.7692446 0.7541445\n             THPL_BA    PIEN_BA    CHNO_BA   ABLA_BA     PICO_BA     LALY_BA\nmax_spp1  0.31763874 0.12261980  0.1380445 1.1285294  0.02742589 -0.49238436\nmax_spp2  0.84452069 0.06676832  0.4099475 0.3980530  0.21830887  0.09865958\nlargest_1 0.59693668 0.26656286 -0.2619733 0.1836692 -0.13333801  0.46427082\nlargest_2 0.03252221 0.91215222  0.9641114 0.1054708  0.30322914 -0.23215716\ntotal_TD  0.42938802 0.89879711  0.1858237 0.1701539  0.15106901 -0.08994616\n              PIPO_BA     ABGR_BA   ALRU2_BA    POTR5_BA     PIAL_BA   TABR2_BA\nmax_spp1   0.05938241  0.71570070 -0.2029551 -0.55929722 -0.42053094 -0.2633207\nmax_spp2  -0.17805724 -0.25671356 -0.3483885 -0.38646503  0.08889864 -0.4676166\nlargest_1 -0.03144414 -0.21310064 -0.7970988  0.30010681 -0.48757395 -0.5511371\nlargest_2 -0.31626789 -0.02516966 -0.1584863 -0.93376092 -0.35964632 -0.5175546\ntotal_TD  -0.12157674 -0.38979658 -0.5303385 -0.09297562 -0.72657536 -0.5006878\n             ABPR_BA    BEPA_BA    PREM_BA   PIMO3_BA   POBAT_BA    ACGL_BA\nmax_spp1  -0.6480805 -0.5373594 -0.2930134 -0.3065770 -0.4286893 -0.8638314\nmax_spp2  -0.6348843 -0.5789315 -0.5407506 -0.6014126 -0.8350485 -0.6829718\nlargest_1 -0.6782559 -0.6782559 -0.6782559 -1.1636682 -0.9099048 -0.9099048\nlargest_2 -0.6531424 -0.6531424 -0.9337609 -0.7814275 -0.9337609 -0.9337609\ntotal_TD  -0.6252034 -0.7195198 -0.9433336 -0.8934134 -0.7195198 -0.9433336\n            ACMA3_BA   ALRH2_BA    PISI_BA   CONU4_BA    FRLA_BA  X2TREE_BA\nmax_spp1  -0.6096870 -0.6691755 -0.9077920 -1.1064865 -1.1064865 -1.1064865\nmax_spp2  -0.8919843 -0.8919843 -1.2651333 -1.0277245 -1.0277245 -1.0277245\nlargest_1 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048\nlargest_2 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609\ntotal_TD  -0.9433336 -0.9433336 -0.7195198 -0.9433336 -0.9433336 -0.9433336\n            QUGA4_BA    PRVI_BA    MAFU_BA    ABCO_BA    JUHI_BA    ARME_BA\nmax_spp1  -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865\nmax_spp2  -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245\nlargest_1 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048\nlargest_2 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609\ntotal_TD  -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336\n            BEOC2_BA          f\nmax_spp1  -1.1064865 -1.1064865\nmax_spp2  -1.0277245 -1.0277245\nlargest_1 -0.9099048 -0.9099048\nlargest_2 -0.9337609 -0.9337609\ntotal_TD  -0.9433336 -0.9433336\n\n\n\ny |&gt; names()\n\n[1] \"max_spp1\"  \"max_spp2\"  \"largest_1\" \"largest_2\" \"total_TD\" \n\n\n\nrmsd(rf_imp_test)\n\n\n\n\n\n\nrmsd\n\n\n\n\nlargest_1\n1937.0187421\n\n\nlargest_2\n356.2059431\n\n\ntotal_TD\n2108.0367868\n\n\nmax_spp1\nNA\n\n\nmax_spp2\nNA\n\n\nCC\n9.6888996\n\n\nSDI\n37.7549532\n\n\nLAT\n0.2750110\n\n\nLON\n0.1854097\n\n\nELEV\n517.9428139\n\n\nASPECT\n92.0935979\n\n\nSLOPE\n18.3773311\n\n\nBAp\n16.7350781\n\n\nPIPO_BA\n4.9701782\n\n\nPSME_BA\n9.2813717\n\n\nABAM_BA\n10.2733889\n\n\nTSME_BA\n8.9050650\n\n\nABGR_BA\n1.9153262\n\n\nPICO_BA\n5.0306778\n\n\nLALY_BA\n0.4826691\n\n\nPIAL_BA\n2.0325044\n\n\nPIEN_BA\n3.7590963\n\n\nABLA_BA\n5.2591653\n\n\nLAOC_BA\n1.2929860\n\n\nTHPL_BA\n7.3733845\n\n\nALRU2_BA\n2.2240530\n\n\nTSHE_BA\n9.3247512\n\n\nTABR2_BA\n0.7791583\n\n\nCHNO_BA\n5.3585955\n\n\nPOBAT_BA\n0.8564162\n\n\nABPR_BA\n2.0909229\n\n\nBEPA_BA\n0.0000000\n\n\nPREM_BA\n0.0561761\n\n\nCONU4_BA\n0.0000000\n\n\nPOTR5_BA\n2.3387268\n\n\nPIMO3_BA\n0.7827043\n\n\nACGL_BA\n1.0548997\n\n\nFRLA_BA\n0.0000000\n\n\nACMA3_BA\n0.6466991\n\n\n2TREE_BA\n0.0000000\n\n\nALRH2_BA\n0.1124475\n\n\nQUGA4_BA\n0.0000000\n\n\nPRVI_BA\n0.0000000\n\n\nMAFU_BA\n0.0000000\n\n\nPISI_BA\n0.6206748\n\n\nABCO_BA\n0.0000000\n\n\nJUHI_BA\n0.0000000\n\n\nARME_BA\n0.0000000\n\n\nBEOC2_BA\n0.0000000\n\n\nf\nNA\n\n\np\nNA\n\n\n\n\n\n\n\n\nancillary data\n\ny_ancil &lt;- yfull_above0\n\ny_ancil &lt;- y_ancil |&gt; as.data.frame()\n\nrf_imp_ancillary &lt;- impute(rf_yai, ancillaryData = y_ancil)\n\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical:\nreturning NA\n\n\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm =\nna.rm): NAs introduced by coercion\n\n\n\nVar imp\n\nx |&gt; names()\n\n [1] \"CC\"       \"SDI\"      \"LAT\"      \"LON\"      \"ELEV\"     \"ASPECT\"  \n [7] \"SLOPE\"    \"BAp\"      \"PIPO_BA\"  \"PSME_BA\"  \"ABAM_BA\"  \"TSME_BA\" \n[13] \"ABGR_BA\"  \"PICO_BA\"  \"LALY_BA\"  \"PIAL_BA\"  \"PIEN_BA\"  \"ABLA_BA\" \n[19] \"LAOC_BA\"  \"THPL_BA\"  \"ALRU2_BA\" \"TSHE_BA\"  \"TABR2_BA\" \"CHNO_BA\" \n[25] \"POBAT_BA\" \"ABPR_BA\"  \"BEPA_BA\"  \"PREM_BA\"  \"CONU4_BA\" \"POTR5_BA\"\n[31] \"PIMO3_BA\" \"ACGL_BA\"  \"FRLA_BA\"  \"ACMA3_BA\" \"2TREE_BA\" \"ALRH2_BA\"\n[37] \"QUGA4_BA\" \"PRVI_BA\"  \"MAFU_BA\"  \"PISI_BA\"  \"ABCO_BA\"  \"JUHI_BA\" \n[43] \"ARME_BA\"  \"BEOC2_BA\" \"f\"        \"p\"       \n\n\n\nyaiVarImp(rf_yai)\n\n\n\n\n\n\n\n\n\n\n\nRegen or Not\nI am planning on running RF here to see how it does just picking out if there are seedlings present on the subplot.\n\nyfull_above0 &lt;- yfull |&gt; filter(largest_1 &gt; 0)\n\nCNs_wRegen &lt;- yfull_above0 |&gt; select(STANDPLOT_CN)\n\nx_abovr_zero &lt;- left_join(CNs_wRegen, x_pred, join_by(STANDPLOT_CN))\n\n\nx &lt;- x_abovr_zero |&gt; select(-c(a,g))\n\nx$f &lt;- factor(x$f)\nx$p &lt;- factor(x$p)\n##|&gt; select(STANf##|&gt; select(STANDPLOT_CN, CC, SDI, LAT, LON, ELEV, ASPECT, SLOPE, BAp)\n\n\ny &lt;- yfull_above0 |&gt; select(STANDPLOT_CN, max_spp1, max_spp2, largest_1, largest_2, total_TD)\n\ny_vars &lt;- names(y)\n# y_vars &lt;- y_vars[c(1:3, 5:6, 8)]\n\n\n\n# y$max_spp3 &lt;- factor(y$max_spp3)\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n# str(yrf)\n\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n\n# y &lt;- y |&gt; select(max_spp1, largest_1, total_TD)\n# y &lt;- y |&gt; select(max_spp1, largest_1, total_TD)\n# y &lt;- y |&gt; select(max_spp1)\n# y &lt;- y |&gt; select(-max_spp2)\n\nspp2_list &lt;- y |&gt; group_by(max_spp2) |&gt; summarise(\n  n=n()\n) |&gt; arrange(desc(n))\n\nspp2_list &lt;- spp2_list$max_spp2[1:10]\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = ifelse(\n    max_spp2 %in% spp2_list, max_spp2, \"Other\"\n  )\n)\n\n\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = ifelse(max_spp2 == \"2TB_TD\", \"Other\", max_spp2), \n  max_spp2 = ifelse(max_spp2 == \"TABR2_TD\", \"TABR_TD\", max_spp2),\n  max_spp2 = factor(max_spp2)\n  )\n\n\n\n\n# y$max_spp2 &lt;- droplevels(\n#   y$max_spp2\n# )\n\n\n# y$max_spp1 &lt;- factor(y$max_spp1)\n# y$max_spp2 &lt;- factor(y$max_spp2)\n\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# save(rf_yai, file = str_c(\"imp_12AUG24_kitchenSink\", \".Rdata\"))\n\n\n\nSeedling imp\nRun the imputation on the seedling TPAs of the top species in a given ecoregion.\n\n# imp_data\n\nx &lt;- imp_data[, c(1:47)]\nxfp &lt;-  x |&gt; mutate(\n  f = str_sub(FPAG, 1, 1), \n  p = str_sub(FPAG, 2, 2), \n  f = factor(f), \n  p = factor(p)\n) |&gt; select(STANDPLOT_CN, f,p)\n\nx &lt;- x |&gt; select(-FPAG) |&gt; filter(EcoRegion == \"M242D\") |&gt; \n  select(-EcoRegion) |&gt; drop_na()\ncns &lt;- x |&gt; select(STANDPLOT_CN)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\nx &lt;- x[, colSums(x) != 0]\n\nxfp &lt;- left_join(cns, xfp)\n\nJoining with `by = join_by(STANDPLOT_CN)`\n\nx$f &lt;- xfp$f\nx$p &lt;- xfp$p\n\n\ny &lt;- imp_data[,c(1, 48:ncol(imp_data))] |&gt; drop_na()\ny &lt;- left_join(cns, y, join_by(STANDPLOT_CN))\n\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y[, colSums(y) != 0]\n\nb &lt;- names(y)\n\nfor (i in 1) {\n    \n    c_value &lt;- str_c(\"largest_\", i)\n    \n    y &lt;- y %&gt;%\n      rowwise() %&gt;%\n      mutate(!!c_value := n_largest(c_across(all_of(b)), i)) |&gt;\n      ungroup()\n}\n\n # Setting spp names to the largest columns\ny$max_spp1 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_1[x])][1])\n\n\ny &lt;- y |&gt; mutate(\n  max_spp1 = ifelse(largest_1 == 0, \"zero\", max_spp1),\n  max_spp1 = factor(max_spp1)\n  # max_spp2 = ifelse(largest_2 == 0, \"zero\", max_spp2),\n  # max_spp3 = ifelse(largest_3 == 0, \"zero\", max_spp3)\n  )\n\ny &lt;- as.data.frame(y)\nrownames(y) &lt;- cns$STANDPLOT_CN\n\n\nstr(y)\n\n'data.frame':   2739 obs. of  31 variables:\n $ PIPO_TD  : num  0 0 0 0 150 ...\n $ ABLA_TD  : num  0 0 0 0 0 ...\n $ TSME_TD  : num  0 0 0 0 0 ...\n $ PSME_TD  : num  0 0 0 0 0 ...\n $ ABGR_TD  : num  0 0 0 0 0 ...\n $ LALY_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIEN_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PICO_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ LAOC_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ACGL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ TABR2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ CHNO_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ABAM_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ THPL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ TSHE_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ BEPA_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PREM_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ POTR5_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIAL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ALRU2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ABPR_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIMO3_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PRVI_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ 2TB_TD   : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ACMA3_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PSMA_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ALRH2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ POBAT_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PISI_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ largest_1: num  0 0 0 0 150 ...\n $ max_spp1 : Factor w/ 27 levels \"ABAM_TD\",\"ABGR_TD\",..: 27 27 27 27 16 3 22 22 2 22 ...\n\nlevels(y$max_spp1)\n\n [1] \"ABAM_TD\"  \"ABGR_TD\"  \"ABLA_TD\"  \"ACGL_TD\"  \"ACMA3_TD\" \"ALRH2_TD\"\n [7] \"ALRU2_TD\" \"BEPA_TD\"  \"CHNO_TD\"  \"LALY_TD\"  \"LAOC_TD\"  \"PIAL_TD\" \n[13] \"PICO_TD\"  \"PIEN_TD\"  \"PIMO3_TD\" \"PIPO_TD\"  \"POBAT_TD\" \"POTR5_TD\"\n[19] \"PREM_TD\"  \"PRVI_TD\"  \"PSMA_TD\"  \"PSME_TD\"  \"TABR2_TD\" \"THPL_TD\" \n[25] \"TSHE_TD\"  \"TSME_TD\"  \"zero\"    \n\n\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# save(rf_yai, file = str_c(\"imp_12AUG24_kitchenSink\", \".Rdata\"))\n\n# rf_seedling_TD &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# rm(list = ls())\nload(\"./imp_12AUG24_kitchenSink.Rdata\")\n\nrf_seedling_TD &lt;- rf_yai\nrm(rf_yai)\n\n\nstr(y)\n\n'data.frame':   2739 obs. of  31 variables:\n $ PIPO_TD  : num  0 0 0 0 150 ...\n $ ABLA_TD  : num  0 0 0 0 0 ...\n $ TSME_TD  : num  0 0 0 0 0 ...\n $ PSME_TD  : num  0 0 0 0 0 ...\n $ ABGR_TD  : num  0 0 0 0 0 ...\n $ LALY_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIEN_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PICO_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ LAOC_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ACGL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ TABR2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ CHNO_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ABAM_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ THPL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ TSHE_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ BEPA_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PREM_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ POTR5_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIAL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ALRU2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ABPR_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIMO3_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PRVI_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ 2TB_TD   : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ACMA3_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PSMA_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ALRH2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ POBAT_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PISI_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ largest_1: num  0 0 0 0 150 ...\n $ max_spp1 : Factor w/ 27 levels \"ABAM_TD\",\"ABGR_TD\",..: 27 27 27 27 16 3 22 22 2 22 ...\n\n\n\n# test.rf &lt;- randomForest(x = x, y = y, mtry = 3, \n#                          importance = TRUE, na.action = na.omit) \n\n\n# max(y)/300\n\npLAY WITH N-TREE AND SEE WHERE THERE ARE DIMINISHING RETURNS.\nEnd\n\n\nscratch\n“C:_Notes.Rdata”\n\n# load(clean_paths(r\"(C:\\RxFire\\Regen\\Regen_Notes\\trf.Rdata)\"))\n\n# impute(trf)\n\n\n# print(trf)\n\n\n\nNotes\nsprintf for loops and hyper-parameter tests.\n\nmore trees for rare or common,"
  },
  {
    "objectID": "6_distributions.html",
    "href": "6_distributions.html",
    "title": "6 Histos",
    "section": "",
    "text": "Tu. 27AUG24\nThe following graphs are organized by Density, Log transformation, then raw. Each set shows two sets of histograms, one that contains the excess zeroes and one that doesn’t. This was done to see the distributions when zeroes dominate the graphs. In the graphs containing zeroes, it is impossible to see how they compare where zeroes are present for all but a few species.\nI put the variables that I created first, total TD and rare TD. Total TD is the sum of all TPAs and rare is the sum of those species that were removed to run yaImpute. They were the rarest species in the list of species that had the largest or second largest tpa per subplot. I experimented with the number of species to include and cut the list when I could get yai() to run most of the time.\nI went back and filtered the test set to N. Cascades. Disregard any further warnings about that.\nCheck the filtration and see if I updated the database after Missoula. I don’t think I did.\nLibraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")"
  },
  {
    "objectID": "6_distributions.html#logx-1-with-zeroes",
    "href": "6_distributions.html#logx-1-with-zeroes",
    "title": "6 Histos",
    "section": "Log(x + 1) With zeroes",
    "text": "Log(x + 1) With zeroes\nThe Imputed v Observed histograms tend to line up most closely. Only total TD is noticeably different. There are more zeroes in the imputed data for total and more tpas on the lower end.\nImputed v the test set are also surprisingly close. This match up doesn’t appear to bias toward Imputed having more or less across the board. Sometimes imputed is higher, and other times not.\nSince imputed vs observed are closely matched, Observed v the test set have the same characteristics.\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\n\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}"
  },
  {
    "objectID": "6_distributions.html#logx-without-zeroes",
    "href": "6_distributions.html#logx-without-zeroes",
    "title": "6 Histos",
    "section": "Log(x) Without Zeroes",
    "text": "Log(x) Without Zeroes\nFor this set, I focused on the non-zero values.\nImputed values are higher on the lower end than observed. APBR was not imputed and PISI was apparently not present.\nImputed vs. the test set are not wildly different, and don’t appear at glance to be biased. There are per species differences in the densities, but overall either one is over or under the other at various places. The shape of these histograms are comparable.\nI probably didn’t need all three graphs. Observed and imputed line up well, so the observed vs test set figures are similar to the imputed vs. test set ones.\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\n\n\nCode\ni &lt;- 1\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  t &lt;- t |&gt; filter(x &gt; 0)\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}"
  },
  {
    "objectID": "6_distributions.html#raw-density-graphs",
    "href": "6_distributions.html#raw-density-graphs",
    "title": "6 Histos",
    "section": "Raw Density Graphs",
    "text": "Raw Density Graphs\n\nx With zeroes\nI was originally going to summarise all of these. Now, I am keeping these in to create space between the sets of graphs.\nObserved v Imputed\n\nABAM\n\n\n\nGeneral\n\n\n\n\nImputed v Test\n\nABAM\n\n\n\nGeneral\n\n\n\n\nObserved v Test\n\nABAM\n\n\n\nGeneral\n\n\n\nSpace\nSpace\n\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx Without Zeroes\nI was originally going to summarise all of these. Now, I am keeping these in to create space between the sets of graphs.\n\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\n\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  t &lt;- t |&gt; filter(x &gt; 0)\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}"
  },
  {
    "objectID": "6_distributions.html#log-transformation-graphs",
    "href": "6_distributions.html#log-transformation-graphs",
    "title": "6 Histos",
    "section": "Log transformation graphs",
    "text": "Log transformation graphs\n\nLog(x) Without Zeroes\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\n\n\nCode\ni &lt;- 1\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  t &lt;- t |&gt; filter(x &gt; 0)\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlog(x + 1) with zeroes\nThe imputed values contain many more zeroes than the observed.\nIn fact, it looks like there are just more plots in the imputed\nI was originally going to summarise all of these. Now, I am keeping these in to create space between the sets of graphs.\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\nSpace\n\n\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}"
  },
  {
    "objectID": "6_distributions.html#raw-graphs",
    "href": "6_distributions.html#raw-graphs",
    "title": "6 Histos",
    "section": "Raw Graphs",
    "text": "Raw Graphs\n\nx Without Zeroes\nI was originally going to summarise all of these. Now, I am keeping these in to create space between the sets of graphs.\n\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\nSpace\n\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  t &lt;- t |&gt; filter(x &gt; 0)\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx With zeroes\nI was originally going to summarise all of these. Now, I am keeping these in to create space between the sets of graphs.\nObserved v Imputed\n\nABAM\n\n\n\nGeneral\n\n\n\n\nImputed v Test\n\nABAM\n\n\n\nGeneral\n\n\n\n\nObserved v Test\n\nABAM\n\n\n\nGeneral\n\n\n\nSpace\nSpace\n\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}"
  },
  {
    "objectID": "8_RF_Spp_Groups.html",
    "href": "8_RF_Spp_Groups.html",
    "title": "8 RF Spp Groups",
    "section": "",
    "text": "04Sept24"
  },
  {
    "objectID": "8_RF_Spp_Groups.html#ba-wider",
    "href": "8_RF_Spp_Groups.html#ba-wider",
    "title": "8 RF Spp Groups",
    "section": "BA wider",
    "text": "BA wider\n\nba_trees &lt;- trees_L |&gt; group_by(STANDPLOT_CN, grp_abbr) |&gt; \n  summarise(\n    n = n(), \n    BA = sum(BAac),\n    .groups = \"drop\"\n    )\n\nn_distinct(ba_trees$STANDPLOT_CN)\n\n[1] 5912\n\nba_wide &lt;- ba_trees |&gt; select(-n) |&gt; pivot_wider(names_from = grp_abbr, \n                 values_from = BA,\n                 values_fill = 0,\n                 names_glue = \"{grp_abbr}_{'BA'}\") \n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nPIPO_BA\nPSME_BA\nABIES_BA\nSOFT_BA\nPICO_BA\nPIEN_BA\nLAOC_BA\nTHPL_BA\nALNU_BA\nTSHE_BA\nPOPL_BA\nHARD_BA\nPIMO3_BA\nACGL_BA\nQUERC_BA\n\n\n\n\n12964449010497_1\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\ny &lt;- preds |&gt; select(STANDPLOT_CN, EcoRegion) \nba_wide &lt;- left_join(ba_wide, y, join_by(STANDPLOT_CN))\nba_wide &lt;- ba_wide |&gt; relocate(EcoRegion, .after = STANDPLOT_CN)\n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nEcoRegion\nPIPO_BA\nPSME_BA\nABIES_BA\nSOFT_BA\nPICO_BA\nPIEN_BA\nLAOC_BA\nTHPL_BA\nALNU_BA\nTSHE_BA\nPOPL_BA\nHARD_BA\nPIMO3_BA\nACGL_BA\nQUERC_BA\n\n\n\n\n12964449010497_1\nM242D\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\nM242D\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\nM242D\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\nM242D\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\nM242D\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\nM242D\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nba_wide &lt;- left_join(ba_wide, preds, join_by(STANDPLOT_CN, EcoRegion)) |&gt; \n  relocate(STANDPLOT_CN, CC, SDI, FPAG, EcoRegion, LAT, LON, ELEV, Northing, Easting, SLOPE, BAp) |&gt; \n  select(-c(Tpa, STAND_CN))\n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nCC\nSDI\nFPAG\nEcoRegion\nLAT\nLON\nELEV\nNorthing\nEasting\nSLOPE\nBAp\nPIPO_BA\nPSME_BA\nABIES_BA\nSOFT_BA\nPICO_BA\nPIEN_BA\nLAOC_BA\nTHPL_BA\nALNU_BA\nTSHE_BA\nPOPL_BA\nHARD_BA\nPIMO3_BA\nACGL_BA\nQUERC_BA\n\n\n\n\n12964449010497_1\n13\n49\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n-0.9961947\n0.0871557\n72\n35.052090\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\n4\n10\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n-0.9876883\n0.1564345\n62\n5.396815\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\n10\n31\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n0.3420201\n0.9396926\n76\n18.791683\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\n22\n69\nCDS6\nM242D\n47.40076\n-120.4951\n2300\n0.9986295\n-0.0523360\n58\n36.032566\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\n9\n50\nCDS6\nM242D\n47.58130\n-120.3399\n3900\n0.9271839\n-0.3746066\n55\n20.009798\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\n9\n48\nCAS3\nM242D\n47.70658\n-120.8548\n5700\n0.9848078\n0.1736482\n92\n16.703291\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nba_wide |&gt; nrow()\n\n[1] 5912\n\n\nThis is good. All that is left, is to join the large trees and seedlings together. Then, clean up the zeroes. Afterwards, I can run RF."
  },
  {
    "objectID": "8_RF_Spp_Groups.html#error",
    "href": "8_RF_Spp_Groups.html#error",
    "title": "8 RF Spp Groups",
    "section": "Error",
    "text": "Error\nLoading the rf run from page 5 done with seedlings not as factors\n\nload(str_c(\"RF_26AUG24_1seedlings\", \".Rdata\"))\n\nrf_5_seeds &lt;- rf_yai\n\n\nsummary_seeds &lt;- rf_5_seeds |&gt; yaiRFsummary()\nsummary_groups_class &lt;- rf_groups_class |&gt; yaiRFsummary()\nsummary_groups_reg &lt;- rf_groups_reg |&gt; yaiRFsummary()\n\n\nsummary_groups_class$forestAttributes\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nPIPO_TD\n50\n0.0047138\nOOB error rate\n6\nclassification\n\n\nABIES_TD\n50\n0.0478114\nOOB error rate\n10\nclassification\n\n\nSOFT_TD\n50\n0.0249158\nOOB error rate\n11\nclassification\n\n\nPSME_TD\n50\n0.0006734\nOOB error rate\n4\nclassification\n\n\nPIEN_TD\n50\n0.0127946\nOOB error rate\n10\nclassification\n\n\nPICO_TD\n50\n0.0047138\nOOB error rate\n6\nclassification\n\n\nLAOC_TD\n50\n0.0000000\nOOB error rate\n3\nclassification\n\n\nACGL_TD\n50\n0.0047138\nOOB error rate\n5\nclassification\n\n\nTHPL_TD\n50\n0.0101010\nOOB error rate\n8\nclassification\n\n\nTSHE_TD\n50\n0.0047138\nOOB error rate\n5\nclassification\n\n\nHARD_TD\n50\n0.0087542\nOOB error rate\n8\nclassification\n\n\nPOPL_TD\n50\n0.0026936\nOOB error rate\n4\nclassification\n\n\nALNU_TD\n50\n0.0026936\nOOB error rate\n4\nclassification\n\n\nPIMO3_TD\n50\n0.0006734\nOOB error rate\n5\nclassification\n\n\nmax_spp1\n50\n0.1104377\nOOB error rate\n14\nclassification\n\n\nmax_spp2\n50\n0.1454545\nOOB error rate\n15\nclassification\n\n\ntotal_TD\n50\n0.0343434\nOOB error rate\n8\nclassification\n\n\n\n\n\n\n\nsummary_groups_reg$forestAttributes\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nPIPO_TD\n50\n73.7900000\n%var explained\nNA\nregression\n\n\nABIES_TD\n50\n59.9000000\n%var explained\nNA\nregression\n\n\nSOFT_TD\n50\n46.3500000\n%var explained\nNA\nregression\n\n\nPSME_TD\n50\n0.5400000\n%var explained\nNA\nregression\n\n\nPIEN_TD\n50\n74.4900000\n%var explained\nNA\nregression\n\n\nPICO_TD\n50\n73.6500000\n%var explained\nNA\nregression\n\n\nLAOC_TD\n50\n74.7300000\n%var explained\nNA\nregression\n\n\nACGL_TD\n50\n32.4100000\n%var explained\nNA\nregression\n\n\nTHPL_TD\n50\n47.9300000\n%var explained\nNA\nregression\n\n\nTSHE_TD\n50\n70.8900000\n%var explained\nNA\nregression\n\n\nHARD_TD\n50\n63.6600000\n%var explained\nNA\nregression\n\n\nPOPL_TD\n50\n10.7100000\n%var explained\nNA\nregression\n\n\nALNU_TD\n50\n62.9200000\n%var explained\nNA\nregression\n\n\nPIMO3_TD\n50\n70.6000000\n%var explained\nNA\nregression\n\n\nmax_spp1\n50\n0.1151515\nOOB error rate\n14\nclassification\n\n\nmax_spp2\n50\n0.1528620\nOOB error rate\n15\nclassification\n\n\ntotal_TD\n50\n62.8100000\n%var explained\nNA\nregression\n\n\n\n\n\n\n\nsummary_seeds$forestAttributes\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nmax_spp1\n50\n0.1241656\nOOB error rate\n7\nclassification\n\n\nmax_spp2\n50\n0.1615487\nOOB error rate\n13\nclassification\n\n\nABLA_TD\n50\n0.0233645\nOOB error rate\n7\nclassification\n\n\nTSME_TD\n50\n0.0246996\nOOB error rate\n9\nclassification\n\n\nPSME_TD\n50\n0.0040053\nOOB error rate\n4\nclassification\n\n\nABGR_TD\n50\n0.0066756\nOOB error rate\n5\nclassification\n\n\nABAM_TD\n50\n0.0333778\nOOB error rate\n9\nclassification\n\n\nTSHE_TD\n50\n0.0120160\nOOB error rate\n7\nclassification\n\n\nABPR_TD\n50\n0.0000000\nOOB error rate\n2\nclassification\n\n\nOther_TD\n50\n0.0000000\nOOB error rate\n2\nclassification\n\n\nPISI_TD\n50\n0.0000000\nOOB error rate\n2\nclassification\n\n\nlargest_1\n50\n0.0267023\nOOB error rate\n8\nclassification\n\n\nlargest_2\n50\n0.0193591\nOOB error rate\n6\nclassification\n\n\ntotal_TD\n50\n0.0393858\nOOB error rate\n8\nclassification\n\n\nrare_TD\n50\n0.0033378\nOOB error rate\n6\nclassification"
  },
  {
    "objectID": "8_RF_Spp_Groups.html#imputation",
    "href": "8_RF_Spp_Groups.html#imputation",
    "title": "8 RF Spp Groups",
    "section": "Imputation",
    "text": "Imputation\n\nrf_imp_seeds &lt;- impute(rf_5_seeds)\nrf_imp_seeds &lt;- rf_imp_seeds |&gt; \n  drop_na() |&gt; \n  select(order(colnames(rf_imp_seeds))) |&gt; \n  select(contains(\"TD\"))\n\nrf_imp_seeds |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_TD\nABAM_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nOther_TD\nOther_TD.o\nPISI_TD\nPISI_TD.o\nPSME_TD\nPSME_TD.o\nrare_TD\nrare_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965856010497_1\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n74.96528\n149.93057\n0.00000\n149.93057\n74.96528\n0\n0\n0.0000\n0.0000\n\n\n12967289010497_1\n0.0000\n0.00000\n74.96528\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n149.93057\n0.00000\n74.96528\n74.96528\n224.89585\n0\n0\n0.0000\n0.0000\n\n\n12967289010497_2\n0.0000\n0.00000\n0.00000\n224.89585\n0\n0.00000\n0\n0\n0\n0\n0\n0\n149.9306\n0.00000\n74.96528\n0.00000\n224.89585\n224.89585\n0\n0\n0.0000\n0.0000\n\n\n12967289010497_3\n0.0000\n0.00000\n0.00000\n74.96528\n0\n0.00000\n0\n0\n0\n0\n0\n0\n149.9306\n0.00000\n74.96528\n0.00000\n224.89585\n74.96528\n0\n0\n0.0000\n0.0000\n\n\n12970163010497_1\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n149.9306\n74.96528\n0.00000\n0.00000\n149.93057\n74.96528\n0\n0\n0.0000\n0.0000\n\n\n12970308010497_3\n0.0000\n0.00000\n0.00000\n0.00000\n0\n74.96528\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n224.89585\n524.75698\n224.89585\n599.72226\n0\n0\n0.0000\n0.0000\n\n\n12988512010497_1\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n74.96528\n524.75698\n74.96528\n524.75698\n0\n0\n0.0000\n0.0000\n\n\n12988512010497_3\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n524.75698\n74.96528\n524.75698\n74.96528\n0\n0\n0.0000\n0.0000\n\n\n12990036010497_1\n449.7917\n374.82641\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0.00000\n0.00000\n899.58339\n524.75698\n0\n0\n449.7917\n149.9306\n\n\n12990036010497_3\n374.8264\n74.96528\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0.00000\n0.00000\n524.75698\n74.96528\n0\n0\n149.9306\n0.0000\n\n\n\n\n\n\n\nrf_imp_groups_class &lt;- impute(rf_groups_class)\nrf_imp_groups_class &lt;- rf_imp_groups_class |&gt; \n  drop_na() |&gt; \n  select(order(colnames(rf_imp_groups_class))) |&gt; \n  select(contains(\"TD\"))\n\nrf_imp_groups_class |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABIES_TD\nABIES_TD.o\nACGL_TD\nACGL_TD.o\nALNU_TD\nALNU_TD.o\nHARD_TD\nHARD_TD.o\nLAOC_TD\nLAOC_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPOPL_TD\nPOPL_TD.o\nPSME_TD\nPSME_TD.o\nSOFT_TD\nSOFT_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\n\n\n\n\n12965856010497_1\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n224.89585\n74.96528\n0.00000\n0.00000\n0\n0.00000\n224.89585\n74.96528\n0.00000\n0.000\n\n\n12967289010497_1\n74.96528\n0.00000\n0\n0\n0.00000\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n74.96528\n0\n0\n0.00000\n149.93057\n0.00000\n0.00000\n0\n0.00000\n74.96528\n224.89585\n0.00000\n0.000\n\n\n12967289010497_2\n0.00000\n224.89585\n0\n0\n0.00000\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n74.96528\n0.00000\n0\n0\n149.93057\n0.00000\n0.00000\n0.00000\n0\n0.00000\n224.89585\n224.89585\n0.00000\n0.000\n\n\n12967289010497_3\n0.00000\n74.96528\n0\n0\n0.00000\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n74.96528\n0.00000\n0\n0\n149.93057\n0.00000\n0.00000\n0.00000\n0\n0.00000\n224.89585\n74.96528\n0.00000\n0.000\n\n\n12988512010497_1\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0.00000\n74.96528\n524.75698\n0\n0.00000\n74.96528\n524.75698\n0.00000\n0.000\n\n\n12988512010497_3\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0.00000\n524.75698\n74.96528\n0\n0.00000\n524.75698\n74.96528\n0.00000\n0.000\n\n\n13000318010497_2\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n299.8611\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n74.96528\n299.86113\n74.96528\n0.000\n\n\n13009244010497_2\n0.00000\n299.86113\n0\n0\n74.96528\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0.00000\n0.00000\n0.00000\n0\n74.96528\n299.86113\n1574.27093\n224.89585\n1199.445\n\n\n13020972010497_1\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n449.79170\n0\n0\n74.96528\n524.75698\n0.00000\n0.00000\n0\n0.00000\n74.96528\n974.54867\n0.00000\n0.000\n\n\n13020972010497_2\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n899.58339\n0.00000\n0\n0\n0.00000\n74.96528\n0.00000\n0.00000\n0\n0.00000\n899.58339\n74.96528\n0.00000\n0.000\n\n\n\n\n\n\n\nrf_imp_groups_reg &lt;- impute(rf_groups_reg)\n\nrf_imp_groups_reg &lt;- rf_imp_groups_reg |&gt; \n  drop_na() |&gt; \n  select(order(colnames(rf_imp_groups_reg))) |&gt; \n  select(contains(\"TD\"))\n\nrf_imp_groups_reg |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABIES_TD\nABIES_TD.o\nACGL_TD\nACGL_TD.o\nALNU_TD\nALNU_TD.o\nHARD_TD\nHARD_TD.o\nLAOC_TD\nLAOC_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPOPL_TD\nPOPL_TD.o\nPSME_TD\nPSME_TD.o\nSOFT_TD\nSOFT_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\n\n\n\n\n12965856010497_4\n449.79170\n0.00000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0\n0\n74.96528\n299.86113\n0.0000\n0.00000\n0\n0\n524.75698\n299.86113\n0\n0\n\n\n12967289010497_2\n0.00000\n224.89585\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n374.8264\n0.00000\n0\n0\n374.82641\n224.89585\n0\n0\n\n\n12970163010497_1\n0.00000\n0.00000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\n74.96528\n74.96528\n0\n0\n\n\n12970308010497_3\n0.00000\n74.96528\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n149.9306\n0.0000\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n524.75698\n0\n0\n149.93057\n599.72226\n0\n0\n\n\n12970308010497_4\n74.96528\n0.00000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0.0000\n149.9306\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n524.7570\n0.00000\n0\n0\n599.72226\n149.93057\n0\n0\n\n\n12988854010497_3\n149.93057\n674.68754\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n74.96528\n0\n0\n149.93057\n749.65282\n0\n0\n\n\n12990036010497_3\n374.82641\n74.96528\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n149.9306\n0.00000\n0\n0\n524.75698\n74.96528\n0\n0\n\n\n12990744010497_2\n149.93057\n74.96528\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n0.00000\n0\n0\n149.93057\n74.96528\n0\n0\n\n\n12999289010497_3\n74.96528\n149.93057\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n0.00000\n0\n0\n74.96528\n149.93057\n0\n0\n\n\n13000318010497_2\n0.00000\n0.00000\n0\n0\n0\n0\n749.6528\n299.8611\n0\n0\n0\n0\n0.0000\n0.0000\n0\n0\n0\n0\n0\n0\n74.96528\n0.00000\n0.0000\n0.00000\n0\n0\n824.61811\n299.86113\n0\n0\n\n\n\n\n\n\n\nIntegers\n\nrf_imp_seeds_int &lt;- (rf_imp_seeds/74.96528)\n\nrf_imp_seeds_int |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_TD\nABAM_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nOther_TD\nOther_TD.o\nPISI_TD\nPISI_TD.o\nPSME_TD\nPSME_TD.o\nrare_TD\nrare_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965856010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n2\n0\n2\n1\n0\n0\n0\n0\n\n\n12967289010497_1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n1\n1\n3\n0\n0\n0\n0\n\n\n12967289010497_2\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n1\n0\n3\n3\n0\n0\n0\n0\n\n\n12967289010497_3\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n1\n0\n3\n1\n0\n0\n0\n0\n\n\n12970163010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n1\n0\n0\n2\n1\n0\n0\n0\n0\n\n\n12970308010497_3\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n3\n7\n3\n8\n0\n0\n0\n0\n\n\n12988512010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n7\n1\n7\n0\n0\n0\n0\n\n\n12988512010497_3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n1\n7\n1\n0\n0\n0\n0\n\n\n12990036010497_1\n6\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n7\n0\n0\n6\n2\n\n\n12990036010497_3\n5\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n1\n0\n0\n2\n0\n\n\n\n\n\n\n\nrf_imp_groups_class_int &lt;- (rf_imp_groups_class/74.96528)\n\nrf_imp_groups_class_int |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABIES_TD\nABIES_TD.o\nACGL_TD\nACGL_TD.o\nALNU_TD\nALNU_TD.o\nHARD_TD\nHARD_TD.o\nLAOC_TD\nLAOC_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPOPL_TD\nPOPL_TD.o\nPSME_TD\nPSME_TD.o\nSOFT_TD\nSOFT_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\n\n\n\n\n12965856010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n1\n0\n0\n0\n0\n3\n1\n0\n0\n\n\n12967289010497_1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n2\n0\n0\n0\n0\n1\n3\n0\n0\n\n\n12967289010497_2\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n2\n0\n0\n0\n0\n0\n3\n3\n0\n0\n\n\n12967289010497_3\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n2\n0\n0\n0\n0\n0\n3\n1\n0\n0\n\n\n12988512010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n7\n0\n0\n1\n7\n0\n0\n\n\n12988512010497_3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n1\n0\n0\n7\n1\n0\n0\n\n\n13000318010497_2\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n4\n1\n0\n\n\n13009244010497_2\n0\n4\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n4\n21\n3\n16\n\n\n13020972010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n1\n7\n0\n0\n0\n0\n1\n13\n0\n0\n\n\n13020972010497_2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n0\n0\n1\n0\n0\n0\n0\n12\n1\n0\n0\n\n\n\n\n\n\n\nrf_imp_groups_reg_int &lt;- (rf_imp_groups_reg/74.96528)\n\nrf_imp_groups_reg_int |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABIES_TD\nABIES_TD.o\nACGL_TD\nACGL_TD.o\nALNU_TD\nALNU_TD.o\nHARD_TD\nHARD_TD.o\nLAOC_TD\nLAOC_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPOPL_TD\nPOPL_TD.o\nPSME_TD\nPSME_TD.o\nSOFT_TD\nSOFT_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\n\n\n\n\n12965856010497_4\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n4\n0\n0\n0\n0\n7\n4\n0\n0\n\n\n12967289010497_2\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n5\n3\n0\n0\n\n\n12970163010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n1\n1\n0\n0\n\n\n12970308010497_3\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n2\n8\n0\n0\n\n\n12970308010497_4\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n8\n2\n0\n0\n\n\n12988854010497_3\n2\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n2\n10\n0\n0\n\n\n12990036010497_3\n5\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n7\n1\n0\n0\n\n\n12990744010497_2\n2\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n1\n0\n0\n\n\n12999289010497_3\n1\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n2\n0\n0\n\n\n13000318010497_2\n0\n0\n0\n0\n0\n0\n10\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n11\n4\n0\n0\n\n\n\n\n\n\n\nTrying to figure out which is better\nI ran out of time.\n\nclass_ab.i = rf_imp_groups_class_int$ABIES_TD\nclass_ab.i &lt;- class_ab.i[1:500]\n\n\n\nreg_ab.i = rf_imp_groups_reg_int$ABIES_TD\nreg_ab.i &lt;- reg_ab.i[1:500]\n\nab.o = rf_imp_groups_reg_int$ABIES_TD.o\nab.o &lt;- ab.o[1:500]\n\ntest &lt;- data.frame(\n  class_ab.i = class_ab.i,\n  reg_ab.i = reg_ab.i,\n  ab.o = ab.o\n)\n\ntest &lt;- test |&gt; mutate(\n  sq_diff_class = (class_ab.i - ab.o)^2,\n  sq_diff_reg = (reg_ab.i - ab.o)^2,\n  mean.o = mean(ab.o)\n)\n\nplot(test$ab.o, test$class_ab.i)\n\n\n\n\n\n\n\nplot(test$ab.o, test$reg_ab.i)\n\n\n\n\n\n\n\nsum(test$sq_diff_class) |&gt; sqrt()\n\n[1] 439.1276\n\nsum(test$sq_diff_reg) |&gt; sqrt()\n\n[1] 402.2897\n\n\n\nx1 &lt;- 8\ny1 &lt;- 200\n\n\ntest |&gt; ggplot() + \n  aes(x = log(class_ab.i + 1)) + \n  geom_histogram(bins = 30) + \n  lims(\n    x = c(-1,x1),\n    y = c(0,y1)\n  )\n\n\n\n\n\n\n\ntest |&gt; ggplot() + \n  aes(x = log(reg_ab.i + 1)) + \n  geom_histogram(bins = 30) + \n  lims(\n    x = c(0,x1), \n    y = c(0,y1)\n  )\n\n\n\n\n\n\n\ntest |&gt; ggplot() + \n  aes(x = log(ab.o + 1)) + \n  geom_histogram(bins = 30) + \n  lims(\n    x = c(0,x1), \n    y = c(0,y1)\n  )\n\n\n\n\n\n\n\n\n\nspp_list &lt;- rf_imp_groups_reg_int |&gt; names()\n\n\n\n\nRMSD\nrmsd(rf_imp_seeds_int)\nrmsd(rf_imp_groups_class_int)\nrmsd(rf_imp_groups_reg_int)\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABAM_TD\n10.6992159\n\n\nABGR_TD\n8.2966218\n\n\nABLA_TD\n3.9530731\n\n\nABPR_TD\n0.1690309\n\n\nOther_TD\n0.0000000\n\n\nPISI_TD\n0.0422577\n\n\nPSME_TD\n8.7391773\n\n\nrare_TD\n10.0676288\n\n\ntotal_TD\n21.6947170\n\n\nTSHE_TD\n7.8262382\n\n\nTSME_TD\n1.9128327\n\n\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABIES_TD\n12.2083924\n\n\nACGL_TD\n0.2612013\n\n\nALNU_TD\n0.1766043\n\n\nHARD_TD\n0.6443638\n\n\nLAOC_TD\n0.3303964\n\n\nPICO_TD\n1.9536541\n\n\nPIEN_TD\n1.8161073\n\n\nPIMO3_TD\n0.2117411\n\n\nPIPO_TD\n0.8885233\n\n\nPOPL_TD\n0.3214247\n\n\nPSME_TD\n8.9785322\n\n\nSOFT_TD\n3.1999636\n\n\nTHPL_TD\n1.5802140\n\n\ntotal_TD\n22.0959725\n\n\nTSHE_TD\n15.5006765\n\n\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABIES_TD\n17.6145134\n\n\nACGL_TD\n0.3554907\n\n\nALNU_TD\n0.0605228\n\n\nHARD_TD\n0.9017687\n\n\nLAOC_TD\n5.2864817\n\n\nPICO_TD\n4.1124310\n\n\nPIEN_TD\n1.4290293\n\n\nPIMO3_TD\n0.6112499\n\n\nPIPO_TD\n0.6490342\n\n\nPOPL_TD\n1.2005799\n\n\nPSME_TD\n15.0315302\n\n\nSOFT_TD\n2.5858874\n\n\nTHPL_TD\n1.4328690\n\n\ntotal_TD\n25.7710767\n\n\nTSHE_TD\n5.4748846\n\n\n\n\n\n\nrmsd(rf_imp_seeds)\nrmsd(rf_imp_groups_class)\nrmsd(rf_imp_groups_reg)\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABAM_TD\n802.069719\n\n\nABGR_TD\n621.958575\n\n\nABLA_TD\n296.343230\n\n\nABPR_TD\n12.671446\n\n\nOther_TD\n0.000000\n\n\nPISI_TD\n3.167861\n\n\nPSME_TD\n655.134871\n\n\nrare_TD\n754.722611\n\n\ntotal_TD\n1626.350533\n\n\nTSHE_TD\n586.696136\n\n\nTSME_TD\n143.396037\n\n\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABIES_TD\n915.20555\n\n\nACGL_TD\n19.58103\n\n\nALNU_TD\n13.23919\n\n\nHARD_TD\n48.30491\n\n\nLAOC_TD\n24.76826\n\n\nPICO_TD\n146.45623\n\n\nPIEN_TD\n136.14499\n\n\nPIMO3_TD\n15.87323\n\n\nPIPO_TD\n66.60840\n\n\nPOPL_TD\n24.09569\n\n\nPSME_TD\n673.07818\n\n\nSOFT_TD\n239.88616\n\n\nTHPL_TD\n118.46118\n\n\ntotal_TD\n1656.43077\n\n\nTSHE_TD\n1162.01255\n\n\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABIES_TD\n1320.476930\n\n\nACGL_TD\n26.649459\n\n\nALNU_TD\n4.537105\n\n\nHARD_TD\n67.601346\n\n\nLAOC_TD\n396.302577\n\n\nPICO_TD\n308.289544\n\n\nPIEN_TD\n107.127580\n\n\nPIMO3_TD\n45.822517\n\n\nPIPO_TD\n48.655034\n\n\nPOPL_TD\n90.001807\n\n\nPSME_TD\n1126.842873\n\n\nSOFT_TD\n193.851773\n\n\nTHPL_TD\n107.415429\n\n\ntotal_TD\n1931.935982\n\n\nTSHE_TD\n410.426254"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This page is left blank on purpose."
  }
]