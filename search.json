[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Regeneration with Regression",
    "section": "",
    "text": "This is the second site published regarding regeneration for the project POC3.\nThis site was started on 16Sept24 to share between POC3 project members.\nThe previous site covered the initial model exploration. Here, the initial steps have been refined and the model is being optimized. The input data has changed from the FIA’s FVS Ready data to a custom translation of raw FIA data to FVS Ready format. The imputation package yaImpute is still being used, but the focus has changed to running the data with regression instead of classification."
  },
  {
    "objectID": "9_RF_Regression.html",
    "href": "9_RF_Regression.html",
    "title": "9 RF Reg",
    "section": "",
    "text": "Checking on the RF imputation results when only numeric variables are used.\nPlotting error statistics.\nPlaying with parameters, mtry and ntree.\n\nLibraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and access\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n# library(BAMMtools)                    # Natural Breaks\n# library(fedmatch)                     # Clean strings\n# library(janitor)                      # Clean headers\n\n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\n\nkeep &lt;- append(keep, \n               c(\"imp_data_nc\"))\n\n\n\nCreated on\n\n\n[1] \"2024-09-18 16:13:24 PDT\"\n\n\nLast updated on\n\n\n[1] \"2024-10-09 14:03:02 PDT\"",
    "crumbs": [
      "Models",
      "9 RF Reg"
    ]
  },
  {
    "objectID": "9_RF_Regression.html#yai",
    "href": "9_RF_Regression.html#yai",
    "title": "9 RF Reg",
    "section": "yai",
    "text": "yai\nRun yai\n\n\nCode\n# n = 0\n# while(n != 10){\n#     rf &lt;- try(\n#       yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T, rfMode = \"regression\"), \n#       silent = T)\n#     \n#     if (class(rf) == \"try-error\") {\n#       print(n)     \n#       cat(\"ERROR1: \", rf, \"\\n\")\n#       n &lt;- n + 1\n#       } else {\n#         break\n#       }\n# }\n# \n# rf_reg_noclass &lt;- rf\n\nrun_name &lt;- str_c(\"./data/\", run_name, \".R\")\n# save(rf, file = run_name)\n\nrf_ntree_24.50s_6.5s &lt;- rf\n\n\n\n\nCode\nload(run_name)\n\n\nThis is a default run, ntree is set to 50.\nLoading yai results to save time when rendering\n\n\nCode\n# save(rf_reg_noclass, file = \"./rf_reg_noclass_spet18.R\")\n\nload(file = \"./data/rf_reg_noclass_sept18.R\")\n\nrf_reg_summary &lt;- yaiRFsummary(rf_reg_noclass)\n\nt &lt;- rf_reg_summary$forestAttributes\n\nt %&gt;% kable() %&gt;%\n  kable_styling(\"striped\", full_width = F) %&gt;% \n scroll_box(width = \"1100px\", height = \"400px\")\n\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nPIPO_TD\n50\n48.29\n%var explained\nNA\nregression\n\n\nABLA_TD\n50\n75.49\n%var explained\nNA\nregression\n\n\nTSME_TD\n50\n69.18\n%var explained\nNA\nregression\n\n\nPSME_TD\n50\n33.45\n%var explained\nNA\nregression\n\n\nABGR_TD\n50\n89.30\n%var explained\nNA\nregression\n\n\nLALY_TD\n50\n67.38\n%var explained\nNA\nregression\n\n\nPIEN_TD\n50\n58.00\n%var explained\nNA\nregression\n\n\nPICO_TD\n50\n42.62\n%var explained\nNA\nregression\n\n\nLAOC_TD\n50\n7.11\n%var explained\nNA\nregression\n\n\nACGL_TD\n50\n-0.92\n%var explained\nNA\nregression\n\n\nTABR2_TD\n50\n54.84\n%var explained\nNA\nregression\n\n\nCHNO_TD\n50\n39.73\n%var explained\nNA\nregression\n\n\nABAM_TD\n50\n67.32\n%var explained\nNA\nregression\n\n\nTHPL_TD\n50\n53.20\n%var explained\nNA\nregression\n\n\nTSHE_TD\n50\n19.11\n%var explained\nNA\nregression\n\n\nBEPA_TD\n50\n64.42\n%var explained\nNA\nregression\n\n\nPREM_TD\n50\n79.18\n%var explained\nNA\nregression\n\n\nALRU2_TD\n50\n15.51\n%var explained\nNA\nregression\n\n\nPOTR5_TD\n50\n54.75\n%var explained\nNA\nregression\n\n\nPIAL_TD\n50\n56.45\n%var explained\nNA\nregression\n\n\nABPR_TD\n50\n72.14\n%var explained\nNA\nregression\n\n\nPIMO3_TD\n50\n26.35\n%var explained\nNA\nregression\n\n\nACMA3_TD\n50\n83.41\n%var explained\nNA\nregression\n\n\nPRVI_TD\n50\n53.74\n%var explained\nNA\nregression\n\n\n2TB_TD\n50\nNaN\n%var explained\nNA\nregression\n\n\nPSMA_TD\n50\n-4.64\n%var explained\nNA\nregression\n\n\nPOBAT_TD\n50\n76.26\n%var explained\nNA\nregression\n\n\nALRH2_TD\n50\n-8.37\n%var explained\nNA\nregression\n\n\nPISI_TD\n50\n91.93\n%var explained\nNA\nregression\n\n\ntotal_TD\n50\n52.70\n%var explained\nNA\nregression\n\n\n\n\n\n\n\n\n\nCode\noobe &lt;- rf_reg_summary$forestAttributes\noobe &lt;- oobe %&gt;% rownames_to_column(\"SYMBL\") %&gt;% \n  select(SYMBL, var_exp = error)\n\n\n\n\nCode\nrf_reg_noclass_imp &lt;- impute(rf_reg_noclass)\nrf_reg_noclass_imp &lt;- rf_reg_noclass_imp |&gt; \n  drop_na() |&gt; \n  select(order(colnames(rf_reg_noclass_imp))) |&gt; \n  select(contains(\"TD\"))\n\n\n\n\nCode\nrmsd &lt;- rmsd(rf_reg_noclass_imp)\nrmsd &lt;- rmsd %&gt;% rownames_to_column(\"SYMBL\")",
    "crumbs": [
      "Models",
      "9 RF Reg"
    ]
  },
  {
    "objectID": "9_RF_Regression.html#error-v.-n-plots",
    "href": "9_RF_Regression.html#error-v.-n-plots",
    "title": "9 RF Reg",
    "section": "error v. n plots",
    "text": "error v. n plots\n\n\nCode\ncols_tds &lt;- imp_data_nc %&gt;% select(contains(\"_TD\")) %&gt;% select_if(~ sum(.)&gt;0) %&gt;% names()\n\ndf &lt;- tribble(\n  ~SYMBL, ~n_plots\n)\n\n\nfor (i in 1:length(cols_tds)) {  ## length(cols_tds)\n  t &lt;- imp_data_nc %&gt;% select(STANDPLOT_CN, cols_tds[i]) %&gt;% filter(!!sym(cols_tds[i]) &gt; 0)\n  \n  tdf &lt;- tribble(\n  ~SYMBL, ~ n_plots, \n  cols_tds[i], nrow(t)\n  )\n  \n  df &lt;- add_row(df, tdf)\n}\n\n\n\n\nCode\nerror &lt;- left_join(df, oobe, join_by(SYMBL))\nerror &lt;- left_join(error, rmsd, join_by(SYMBL))\nerror  %&gt;% kable() %&gt;%\n  kable_styling(\"striped\", full_width = F) %&gt;% \n scroll_box(width = \"1100px\", height = \"400px\")\n\n\n\n\n\n\nSYMBL\nn_plots\nvar_exp\nrmsd\n\n\n\n\nPIPO_TD\n85\n48.29\n44.07312\n\n\nABLA_TD\n317\n75.49\n389.09393\n\n\nTSME_TD\n165\n69.18\n168.86095\n\n\nPSME_TD\n353\n33.45\n595.13705\n\n\nABGR_TD\n131\n89.30\n232.14274\n\n\nLALY_TD\n20\n67.38\n14.69104\n\n\nPIEN_TD\n96\n58.00\n950.01083\n\n\nPICO_TD\n155\n42.62\n385.51465\n\n\nLAOC_TD\n25\n7.11\n467.46601\n\n\nACGL_TD\n16\n-0.92\n28.22939\n\n\nTABR2_TD\n32\n54.84\n83.65264\n\n\nCHNO_TD\n47\n39.73\n82.95510\n\n\nABAM_TD\n608\n67.32\n870.13111\n\n\nTHPL_TD\n119\n53.20\n157.28017\n\n\nTSHE_TD\n378\n19.11\n1252.59460\n\n\nBEPA_TD\n5\n64.42\n19.11139\n\n\nPREM_TD\n28\n79.18\n75.90067\n\n\nALRU2_TD\n10\n15.51\n31.95350\n\n\nPOTR5_TD\n26\n54.75\n16.29824\n\n\nPIAL_TD\n50\n56.45\n20.16805\n\n\nABPR_TD\n4\n72.14\n2.88115\n\n\nPIMO3_TD\n36\n26.35\n59.46626\n\n\nACMA3_TD\n13\n83.41\n13.51379\n\n\nPRVI_TD\n8\n53.74\n37.34397\n\n\n2TB_TD\n2\nNaN\n0.00000\n\n\nPSMA_TD\n2\n-4.64\n2.88115\n\n\nPOBAT_TD\n5\n76.26\n13.20309\n\n\nALRH2_TD\n1\n-8.37\n2.88115\n\n\nPISI_TD\n1\n91.93\n0.00000\n\n\ntotal_TD\n1775\n52.70\n2147.02119\n\n\n\n\n\n\n\n\n\nCode\nerror %&gt;% filter(!is.na(var_exp)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = var_exp, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"Variation Explained\") + \n  xlab(\"Species\")\n\n\n\n\n\n\n\n\n\nCode\nerror %&gt;% filter(is.na(var_exp))\n\n\n\n\n\n\nSYMBL\nn_plots\nvar_exp\nrmsd\n\n\n\n\n2TB_TD\n2\nNaN\n0\n\n\n\n\n\n\n\n\nCode\nerror %&gt;% filter(!is.na(rmsd)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = rmsd, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"RMSD\") + \n  xlab(\"Species\")\n\n\n\n\n\n\n\n\n\n\n\nCode\ncols_tds &lt;- imp_data_nc %&gt;% select(contains(\"_TD\")) %&gt;% select_if(~ sum(.)&gt;0) %&gt;% names()\n\ndf &lt;- tribble(\n  ~SYMBL, ~std_dev\n)\n\n\nfor (i in 1:length(cols_tds)) {  ## length(cols_tds)\n  t &lt;- imp_data_nc %&gt;% select(STANDPLOT_CN, cols_tds[i]) %&gt;% filter(!!sym(cols_tds[i]) &gt; 0)\n  \n  tdf &lt;- tribble(\n  ~SYMBL, ~std_dev, \n  cols_tds[i], sd(t[,2])\n  )\n  \n  df &lt;- add_row(df, tdf)\n}\n\nerror &lt;- left_join(error, df, join_by(SYMBL))\n\n\n\n\nCode\nerror %&gt;% filter(!is.na(std_dev)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = std_dev, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"Standard Deviation\") + \n  xlab(\"Species\")\n\n\n\n\n\n\n\n\n\n\nyai-var importance\n\n\nCode\nyaiVarImp(rf_reg_noclass)\n\n\n\n\n\n\n\n\n\n\nWhich variables is yaiVarImp choosing\nThe documentation says that it defaults to providing all of the y-variables.\n\nimportance_10 &lt;- yaiVarImp(rf_reg_noclass, plot = F, ntop = 38)\nimportance_10 %&gt;% names()\n\n [1] \"LON\"      \"LAT\"      \"ELEV\"     \"BAp\"      \"Easting\"  \"CC\"       \"SLOPE\"    \"SDI\"      \"Northing\" \"PSME_BA\"  \"TSHE_BA\"  \"ABAM_BA\"  \"ABLA_BA\"  \"PIEN_BA\"  \"THPL_BA\"  \"ABGR_BA\"  \"PIPO_BA\"  \"PICO_BA\"  \"TSME_BA\"  \"PIMO3_BA\"\n\n\n\nvars(rf_reg_noclass)\n\n$xvars\n [1] \"CC\"       \"BAp\"      \"SDI\"      \"LAT\"      \"LON\"      \"ELEV\"     \"Northing\" \"Easting\"  \"SLOPE\"    \"PIPO_BA\"  \"PSME_BA\"  \"ABAM_BA\"  \"TSME_BA\"  \"ABGR_BA\"  \"PICO_BA\"  \"LALY_BA\"  \"PIAL_BA\"  \"PIEN_BA\"  \"ABLA_BA\"  \"ALRU2_BA\" \"TSHE_BA\"  \"ABPR_BA\"  \"LAOC_BA\"  \"THPL_BA\"  \"TABR2_BA\" \"CHNO_BA\"  \"POBAT_BA\" \"BEPA_BA\"  \"PREM_BA\"  \"CONU4_BA\" \"POTR5_BA\" \"PIMO3_BA\" \"ACGL_BA\"  \"ACMA3_BA\" \"PRVI_BA\"  \"2TREE_BA\" \"ALRH2_BA\" \"PISI_BA\" \n\n$yvars\n [1] \"PIPO_TD\"  \"ABLA_TD\"  \"TSME_TD\"  \"PSME_TD\"  \"ABGR_TD\"  \"LALY_TD\"  \"PIEN_TD\"  \"PICO_TD\"  \"LAOC_TD\"  \"ACGL_TD\"  \"TABR2_TD\" \"CHNO_TD\"  \"ABAM_TD\"  \"THPL_TD\"  \"TSHE_TD\"  \"BEPA_TD\"  \"PREM_TD\"  \"ALRU2_TD\" \"POTR5_TD\" \"PIAL_TD\"  \"ABPR_TD\"  \"PIMO3_TD\" \"ACMA3_TD\" \"PRVI_TD\"  \"2TB_TD\"   \"PSMA_TD\"  \"POBAT_TD\" \"ALRH2_TD\" \"PISI_TD\"  \"total_TD\"\n\n\n\nstacked_imp &lt;- stack(importance_10)\n\nggplot(stacked_imp) + \n  aes(x = values, y = ind, fill = ind) + \n  geom_boxplot() + \n  xlim(-3,3) + \n  labs(title = \"eco\") +\n  geom_vline(xintercept = 0)\n\n\n\n\n\n\n\n# yaiVarImp(rf_reg_noclass)\n\n\nx &lt;- rf_reg_noclass %&gt;% yaiRFsummary()\nx &lt;- x$scaledImportance\n\nstacked_imp &lt;- stack(x)\n\nggplot(stacked_imp) + \n  aes(x = values, y = ind, fill = ind) + \n  geom_boxplot() + \n  xlim(-2.5,2.5) + \n  labs(title = \"RF Regression\") +\n  geom_vline(xintercept = 0) + \n  guides(\n    fill = \"none\"\n  )\n\n\n\n\n\n\n\n\n\n\nCode\nerror\n\n\n\n\n\n\nSYMBL\nn_plots\nvar_exp\nrmsd\nstd_dev\n\n\n\n\nPIPO_TD\n85\n48.29\n44.07312\n142.37490\n\n\nABLA_TD\n317\n75.49\n389.09393\n734.44932\n\n\nTSME_TD\n165\n69.18\n168.86095\n375.27881\n\n\nPSME_TD\n353\n33.45\n595.13705\n1157.86634\n\n\nABGR_TD\n131\n89.30\n232.14274\n1366.79489\n\n\nLALY_TD\n20\n67.38\n14.69104\n336.55374\n\n\nPIEN_TD\n96\n58.00\n950.01083\n3152.80392\n\n\nPICO_TD\n155\n42.62\n385.51465\n1109.06819\n\n\nLAOC_TD\n25\n7.11\n467.46601\n2812.38729\n\n\nACGL_TD\n16\n-0.92\n28.22939\n115.73176\n\n\nTABR2_TD\n32\n54.84\n83.65264\n413.61914\n\n\nCHNO_TD\n47\n39.73\n82.95510\n322.81252\n\n\nABAM_TD\n608\n67.32\n870.13111\n1240.23926\n\n\nTHPL_TD\n119\n53.20\n157.28017\n371.27002\n\n\nTSHE_TD\n378\n19.11\n1252.59460\n1806.83546\n\n\nBEPA_TD\n5\n64.42\n19.11139\n170.94715\n\n\nPREM_TD\n28\n79.18\n75.90067\n353.68410\n\n\nALRU2_TD\n10\n15.51\n31.95350\n137.09518\n\n\nPOTR5_TD\n26\n54.75\n16.29824\n390.00795\n\n\nPIAL_TD\n50\n56.45\n20.16805\n107.77648\n\n\nABPR_TD\n4\n72.14\n2.88115\n106.01692\n\n\nPIMO3_TD\n36\n26.35\n59.46626\n168.46352\n\n\nACMA3_TD\n13\n83.41\n13.51379\n322.99601\n\n\nPRVI_TD\n8\n53.74\n37.34397\n204.07519\n\n\n2TB_TD\n2\nNaN\n0.00000\n106.01692\n\n\nPSMA_TD\n2\n-4.64\n2.88115\n0.00000\n\n\nPOBAT_TD\n5\n76.26\n13.20309\n74.96528\n\n\nALRH2_TD\n1\n-8.37\n2.88115\nNA\n\n\nPISI_TD\n1\n91.93\n0.00000\nNA\n\n\ntotal_TD\n1775\n52.70\n2147.02119\n1727.99460\n\n\n\n\n\n\n\n\nCode\nerror\n\n\n\n\n\n\nSYMBL\nn_plots\nvar_exp\nrmsd\nstd_dev\n\n\n\n\nPIPO_TD\n85\n48.29\n44.07312\n142.37490\n\n\nABLA_TD\n317\n75.49\n389.09393\n734.44932\n\n\nTSME_TD\n165\n69.18\n168.86095\n375.27881\n\n\nPSME_TD\n353\n33.45\n595.13705\n1157.86634\n\n\nABGR_TD\n131\n89.30\n232.14274\n1366.79489\n\n\nLALY_TD\n20\n67.38\n14.69104\n336.55374\n\n\nPIEN_TD\n96\n58.00\n950.01083\n3152.80392\n\n\nPICO_TD\n155\n42.62\n385.51465\n1109.06819\n\n\nLAOC_TD\n25\n7.11\n467.46601\n2812.38729\n\n\nACGL_TD\n16\n-0.92\n28.22939\n115.73176\n\n\nTABR2_TD\n32\n54.84\n83.65264\n413.61914\n\n\nCHNO_TD\n47\n39.73\n82.95510\n322.81252\n\n\nABAM_TD\n608\n67.32\n870.13111\n1240.23926\n\n\nTHPL_TD\n119\n53.20\n157.28017\n371.27002\n\n\nTSHE_TD\n378\n19.11\n1252.59460\n1806.83546\n\n\nBEPA_TD\n5\n64.42\n19.11139\n170.94715\n\n\nPREM_TD\n28\n79.18\n75.90067\n353.68410\n\n\nALRU2_TD\n10\n15.51\n31.95350\n137.09518\n\n\nPOTR5_TD\n26\n54.75\n16.29824\n390.00795\n\n\nPIAL_TD\n50\n56.45\n20.16805\n107.77648\n\n\nABPR_TD\n4\n72.14\n2.88115\n106.01692\n\n\nPIMO3_TD\n36\n26.35\n59.46626\n168.46352\n\n\nACMA3_TD\n13\n83.41\n13.51379\n322.99601\n\n\nPRVI_TD\n8\n53.74\n37.34397\n204.07519\n\n\n2TB_TD\n2\nNaN\n0.00000\n106.01692\n\n\nPSMA_TD\n2\n-4.64\n2.88115\n0.00000\n\n\nPOBAT_TD\n5\n76.26\n13.20309\n74.96528\n\n\nALRH2_TD\n1\n-8.37\n2.88115\nNA\n\n\nPISI_TD\n1\n91.93\n0.00000\nNA\n\n\ntotal_TD\n1775\n52.70\n2147.02119\n1727.99460\n\n\n\n\n\n\n\n\nCode\n# error %&gt;% ggplot() + \n#   aes(x = n_plots, y = var_exp, colour = reorder(SYMBL, -n_plots)) + \n#   geom_point() + \n#   guides(color = guide_legend(title = \"Species\", ncol = 2))\n\nerror %&gt;% ggplot() + \n  aes(x = n_plots, y = var_exp) + \n  geom_point() + \n  labs(title = \"Variation Explained v. # of subplots\")",
    "crumbs": [
      "Models",
      "9 RF Reg"
    ]
  },
  {
    "objectID": "9_RF_Regression.html#yai-1",
    "href": "9_RF_Regression.html#yai-1",
    "title": "9 RF Reg",
    "section": "yai",
    "text": "yai\n*Run yai\n\n\nCode\nrf &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T, \n          rfMode = \"regression\", \n          ntree = c(rep(50, 24), rep(5, 6)))\n\n# length(c(rep(50, 24), rep(5, 6)))\n\n\nsave(rf, file = run_name)\n\n# rf_ntree_24.50s_6.5s &lt;- rf\n\n\nLoading yai results to save time when rendering\n\n\nCode\n# load(run_name)\nload(\"./data/rf_ntree_24.50s_6.5s.R\")",
    "crumbs": [
      "Models",
      "9 RF Reg"
    ]
  },
  {
    "objectID": "9_RF_Regression.html#error-v.-n-plots-1",
    "href": "9_RF_Regression.html#error-v.-n-plots-1",
    "title": "9 RF Reg",
    "section": "error v. n plots",
    "text": "error v. n plots\n\n\nCode\nrf_summary &lt;- yaiRFsummary(rf)\n\noobe &lt;- rf_summary$forestAttributes\noobe &lt;- oobe %&gt;% rownames_to_column(\"SYMBL\") %&gt;% \n  select(-c(levels, type, errtag), var_exp = error)\n\ncols_tds &lt;- imp_data_nc %&gt;% select(contains(\"_TD\")) %&gt;% select_if(~ sum(.)&gt;0) %&gt;% names()\n\ndf &lt;- tribble(\n  ~SYMBL, ~n_plots\n)\n\n\nfor (i in 1:length(cols_tds)) {  ## length(cols_tds)\n  t &lt;- imp_data_nc %&gt;% select(STANDPLOT_CN, cols_tds[i]) %&gt;% filter(!!sym(cols_tds[i]) &gt; 0)\n  \n  tdf &lt;- tribble(\n  ~SYMBL, ~ n_plots, \n  cols_tds[i], nrow(t)\n  )\n  \n  df &lt;- add_row(df, tdf)\n}\n\n\nrmsd &lt;- rmsd(rf)\nrmsd &lt;- rmsd %&gt;% rownames_to_column(\"SYMBL\")\n\n\nerror &lt;- left_join(df, oobe, join_by(SYMBL))\nerror &lt;- left_join(error, rmsd, join_by(SYMBL))\n# error  %&gt;% kable() %&gt;%\n#   kable_styling(\"striped\", full_width = F) %&gt;% \n#  scroll_box(width = \"1100px\", height = \"400px\")\n\n\n\n\nCode\nerror %&gt;% filter(!is.na(var_exp)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = var_exp, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"Variation Explained\") + \n  xlab(\"Species\") + \n  geom_hline(yintercept = 0)+ \n  ylim(-30, 100)\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nRMSD\n\n\nCode\nerror %&gt;% filter(!is.na(rmsd)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = rmsd, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"RMSD\") + \n  xlab(\"Species\") + \n  geom_hline(yintercept = 2000) + \n  ylim(0, 3000)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncols_tds &lt;- imp_data_nc %&gt;% select(contains(\"_TD\")) %&gt;% select_if(~ sum(.)&gt;0) %&gt;% names()\n\ndf &lt;- tribble(\n  ~SYMBL, ~std_dev\n)\n\n\nfor (i in 1:length(cols_tds)) {  ## length(cols_tds)\n  t &lt;- imp_data_nc %&gt;% select(STANDPLOT_CN, cols_tds[i]) %&gt;% filter(!!sym(cols_tds[i]) &gt; 0)\n  \n  tdf &lt;- tribble(\n  ~SYMBL, ~std_dev, \n  cols_tds[i], sd(t[,2])\n  )\n  \n  df &lt;- add_row(df, tdf)\n}\n\nerror &lt;- left_join(error, df, join_by(SYMBL))\n\n\n\n\nCode\nerror %&gt;% filter(!is.na(std_dev)) %&gt;% ggplot() + \n  aes(x = reorder(SYMBL, -n_plots), y = std_dev, size = n_plots) + \n  geom_point() +\n  guides(x =  guide_axis(angle = 60)) + \n  labs(title = \"Standard Deviation\") + \n  xlab(\"Species\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nyaiVarImp(rf_reg_noclass)\n\n\n\n\n\n\n\n\n\n\n\nCode\nerror\n\n\n\n\n\n\nSYMBL\nn_plots\nntree\nvar_exp\nrmsd\nstd_dev\n\n\n\n\nPIPO_TD\n85\n50\n50.07\n53.209174\n142.37490\n\n\nABLA_TD\n317\n50\n69.85\n350.513099\n734.44932\n\n\nTSME_TD\n165\n50\n44.73\n193.882347\n375.27881\n\n\nPSME_TD\n353\n50\n50.75\n196.547071\n1157.86634\n\n\nABGR_TD\n131\n50\n72.30\n273.365611\n1366.79489\n\n\nLALY_TD\n20\n50\n57.49\n20.020107\n336.55374\n\n\nPIEN_TD\n96\n50\n78.39\n551.761740\n3152.80392\n\n\nPICO_TD\n155\n50\n34.44\n528.723451\n1109.06819\n\n\nLAOC_TD\n25\n50\n31.58\n373.664298\n2812.38729\n\n\nACGL_TD\n16\n50\n31.63\n15.173975\n115.73176\n\n\nTABR2_TD\n32\n50\n47.86\n109.147974\n413.61914\n\n\nCHNO_TD\n47\n50\n49.90\n78.846285\n322.81252\n\n\nABAM_TD\n608\n50\n68.56\n942.063661\n1240.23926\n\n\nTHPL_TD\n119\n50\n53.20\n146.157579\n371.27002\n\n\nTSHE_TD\n378\n50\n15.27\n1239.806493\n1806.83546\n\n\nBEPA_TD\n5\n50\n19.92\n14.890324\n170.94715\n\n\nPREM_TD\n28\n50\n56.31\n90.527217\n353.68410\n\n\nALRU2_TD\n10\n50\n11.42\n39.287714\n137.09518\n\n\nPOTR5_TD\n26\n50\n68.01\n86.578870\n390.00795\n\n\nPIAL_TD\n50\n50\n21.00\n43.900725\n107.77648\n\n\nABPR_TD\n4\n5\n-15.76\n13.697106\n106.01692\n\n\nPIMO3_TD\n36\n50\n30.57\n49.471881\n168.46352\n\n\nACMA3_TD\n13\n50\n24.13\n37.737724\n322.99601\n\n\nPRVI_TD\n8\n50\n61.91\n20.441630\n204.07519\n\n\n2TB_TD\n2\n5\n-49.24\n8.760698\n106.01692\n\n\nPSMA_TD\n2\n5\n-13.26\n2.920233\n0.00000\n\n\nPOBAT_TD\n5\n5\n31.90\n0.000000\n74.96528\n\n\nALRH2_TD\n1\n5\nNaN\n0.000000\nNA\n\n\nPISI_TD\n1\n5\n67.36\n0.000000\nNA\n\n\ntotal_TD\n1775\n50\n61.05\n1943.445095\n1727.99460\n\n\n\n\n\n\n\n\nCode\n# error %&gt;% ggplot() + \n#   aes(x = n_plots, y = var_exp, colour = reorder(SYMBL, -n_plots)) + \n#   geom_point() + \n#   guides(color = guide_legend(title = \"Species\", ncol = 2))\n\nerror %&gt;% ggplot() + \n  aes(x = n_plots, y = var_exp) + \n  geom_point() + \n  labs(title = \"Variation Explained v. # of subplots\")",
    "crumbs": [
      "Models",
      "9 RF Reg"
    ]
  },
  {
    "objectID": "9_RF_Regression.html#repetition",
    "href": "9_RF_Regression.html#repetition",
    "title": "9 RF Reg",
    "section": "Repetition",
    "text": "Repetition\n\nyai\n*Run yai\n\nCode\nt_rep_error &lt;- tribble(\n  ~SYMBL, ~n_plots, ~ntree, ~var_exp, ~rmsd, ~run\n)\n\nfor (i in 1:10) {\n  \n  rf &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T, \n            rfMode = \"regression\", \n            ntree = c(rep(50, 24), rep(5, 6)))\n  \n  \n  rf_summary &lt;- yaiRFsummary(rf)\n  oobe &lt;- rf_summary$forestAttributes\n  oobe &lt;- oobe %&gt;% rownames_to_column(\"SYMBL\") %&gt;% \n    select(-c(levels, type, errtag), var_exp = error)\n\n  \n  cols_tds &lt;- imp_data_nc %&gt;% select(contains(\"_TD\")) %&gt;% select_if(~ sum(.)&gt;0) %&gt;% names()\n  df &lt;- tribble(~SYMBL, ~n_plots)\n  for (i in 1:length(cols_tds)) {  ## length(cols_tds)\n    t &lt;- imp_data_nc %&gt;% select(STANDPLOT_CN, cols_tds[i]) %&gt;% filter(!!sym(cols_tds[i]) &gt; 0)\n    \n    tdf &lt;- tribble(\n    ~SYMBL, ~ n_plots, \n    cols_tds[i], nrow(t)\n    )\n    \n    df &lt;- add_row(df, tdf)\n  }\n  \n  \n  rmsd &lt;- rmsd(rf)\n  rmsd &lt;- rmsd %&gt;% rownames_to_column(\"SYMBL\")\n  \n  error &lt;- left_join(df, oobe, join_by(SYMBL))\n  error &lt;- left_join(error, rmsd, join_by(SYMBL))\n  error$run &lt;- i\n  \n  t_rep_error &lt;- add_row(t_rep_error, error)\n  \n  \n  # p1 &lt;- error %&gt;% filter(!is.na(var_exp)) %&gt;% ggplot() + \n  #   aes(x = reorder(SYMBL, -n_plots), y = var_exp, size = n_plots) + \n  #   geom_point() +\n  #   guides(x =  guide_axis(angle = 60)) + \n  #   labs(title = \"Variation Explained\") + \n  #   xlab(\"Species\") + \n  #   geom_hline(yintercept = 0)\n  # \n  # \n  # p2 &lt;- error %&gt;% filter(!is.na(rmsd)) %&gt;% ggplot() + \n  #   aes(x = reorder(SYMBL, -n_plots), y = rmsd, size = n_plots) + \n  #   geom_point() +\n  #   guides(x =  guide_axis(angle = 60)) + \n  #   labs(title = \"RMSD\") + \n  #   xlab(\"Species\")\n  \n  # print(p1)\n  # print(p2)\n}\n\n# save(t_rep_error, file = \"./data/t_rep_error.Rdata\")\n\n\n\n\n\n\nCode\nload(file = \"./data/t_rep_error.Rdata\")\n\nt_rep_error$run &lt;- rep(seq(1, 10), each = 30)\n\nave_error &lt;- t_rep_error %&gt;% group_by(SYMBL) %&gt;%\n  summarise(\n    ave_var = mean(var_exp, na.rm = T), \n    med_var = median(var_exp, na.rm = T), \n    sd_var = sd(var_exp, na.rm = T)\n    )\n\nave_error &lt;- ave_error %&gt;% mutate(\n  lower = ave_var - sd_var, upper = ave_var + sd_var, \n  lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var\n  )\n\nt_rep_error &lt;- t_rep_error %&gt;% filter(!is.na(var_exp))\n\nt_rep_error &lt;- left_join(t_rep_error, ave_error, join_by(SYMBL))\nt_rep_error &lt;- t_rep_error %&gt;% arrange(desc(n_plots))\n\nt &lt;- t_rep_error %&gt;% select(SYMBL) %&gt;% unique()\nt$rib &lt;- seq(1:30)\n\nt_rep_error &lt;- left_join(t_rep_error, t, join_by(SYMBL))\n\n# ave_error &lt;- ave_error %&gt;% mutate(SYMBL = factor(SYMBL, levels = unique(t_rep_error$SYMBL)))\n\nggplot(t_rep_error) + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +\n  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = 1, color = \"red\")) +\n  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = \"red\"), alpha = .2) +\n  geom_hline(yintercept = 0) +\n  guides(\n    x = guide_axis(angle = 60), \n    color = \"none\", \n    fill = \"none\") + \n  labs(\n    title = \"Variation explained, Mean in red, ntree 50 & 5\",\n    subtitle = \"Between the vertical lines there are between 10 and 486 subplots\"\n    ) + \n  geom_vline(xintercept = \"PSME_TD\") + \n  geom_vline(xintercept = \"POBAT_TD\") + \n  xlab(\"Species, Most to least plots, left to right\")\n\n\n\n\n\n\n\n\n\nCode\n #  scale_color_gradient(low = \"yellow\", high = \"blue\")\n\n# ave_error$lower\n\n\n\n\nCode\nggplot(t_rep_error) + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +\n  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = 1, color = \"red\")) +\n  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = \"red\"), alpha = .2) +\n  geom_hline(yintercept = 0) +\n  guides(\n    x = guide_axis(angle = 60), \n    color = \"none\", \n    fill = \"none\") + \n  labs(\n    title = \"Variation explained, Mean in red, ntree 50 & 5\", \n    subtitle = \"Between the vertical lines there are between 10 and 486 subplots\"\n    ) + \n  geom_vline(xintercept = \"PSME_TD\") + \n  geom_vline(xintercept = \"POBAT_TD\") + \n  xlab(\"Species, Most to least plots, left to right\") + \n  ylim(-25, 100)\n\n\nWarning: Removed 13 rows containing missing values or values outside the scale range (`geom_point()`).\n\n\nWarning: Removed 7 rows containing missing values or values outside the scale range (`geom_line()`).\n\n\n\n\n\n\n\n\n\n\n\nRMSD\n\n\nCode\nload(file = \"./data/t_rep_error.Rdata\")\n\nt_rep_error$run &lt;- rep(seq(1, 10), each = 30)\n\nave_error &lt;- t_rep_error %&gt;% group_by(SYMBL) %&gt;%\n  summarise(\n    ave_rmsd = mean(rmsd, na.rm = T), \n    med_rmsd = median(rmsd, na.rm = T), \n    sd_rmsd = sd(rmsd, na.rm = T)\n    )\n\n# ave_error &lt;- ave_error %&gt;% mutate(\n#   lower = ave_var - sd_var, upper = ave_var + sd_var, \n#   lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var\n#   )\n\nt_rep_error &lt;- t_rep_error %&gt;% filter(!is.na(rmsd))\n\nt_rep_error &lt;- left_join(t_rep_error, ave_error, join_by(SYMBL))\nt_rep_error &lt;- t_rep_error %&gt;% arrange(desc(n_plots))\n\nt &lt;- t_rep_error %&gt;% select(SYMBL) %&gt;% unique()\nt$rib &lt;- seq(1:30)\n\nt_rep_error &lt;- left_join(t_rep_error, t, join_by(SYMBL))\n\n# ave_error &lt;- ave_error %&gt;% mutate(SYMBL = factor(SYMBL, levels = unique(t_rep_error$SYMBL)))\n\nggplot(t_rep_error) + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = rmsd)) +\n  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_rmsd, group = 1, color = \"red\")) +\n  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = \"red\"), alpha = .2) +\n  geom_hline(yintercept = 2000) +\n  guides(\n    x = guide_axis(angle = 60), \n    color = \"none\", \n    fill = \"none\") + \n  labs(\n    title = \"Variation explained, Mean in red, ntree 50 & 5\",\n    subtitle = \"Between the vertical lines there are between 10 and 486 subplots\"\n    ) + \n  geom_vline(xintercept = \"PSME_TD\") + \n  geom_vline(xintercept = \"POBAT_TD\") + \n  xlab(\"Species, Most to least plots, left to right\") +\n  ylim(-10, 3000) \n\n\n\n\n\n\n\n\n\nCode\n #  scale_color_gradient(low = \"yellow\", high = \"blue\")\n\n# ave_error$lower\n\n\n\n\nCode\n# error %&gt;% ggplot() + \n#   aes(x = n_plots, y = var_exp, colour = reorder(SYMBL, -n_plots)) + \n#   geom_point() + \n#   guides(color = guide_legend(title = \"Species\", ncol = 2))\n\nerror %&gt;% ggplot() + \n  aes(x = n_plots, y = var_exp) + \n  geom_point() + \n  labs(title = \"Variation Explained v. # of subplots\")\n\n\n\n\n\n\n\n\n\nyai setup\n\n\nCode\n# This will be how the yai object is saved later. \nrun_name &lt;- \"rf_ntree_24.50s_6.5s\"\nrun_name &lt;- str_c(\"./data/\", run_name, \".R\")\n\n\nimp_data_nc &lt;- imp_data |&gt; filter(EcoRegion == \"M242D\" & TRAIN == T) |&gt; select(-c(EcoRegion, ECO_NAME, eco_code, \n                                 STAND_CN, TRAIN, largest_1, largest_2, largest_3, max_spp1, max_spp2, max_spp3, FPAG))\n\nimp_data_nc &lt;- imp_data_nc |&gt; filter(total_TD != 0)\n\ny_resp &lt;- imp_data_nc |&gt; select(STANDPLOT_CN, contains(\"TD\"))\n\nx_pred &lt;- imp_data_nc |&gt; select(STANDPLOT_CN, !contains(\"TD\"))\n\n\n\n# Prep\ny &lt;- y_resp\n\nCNs &lt;- imp_data_nc |&gt; select(STANDPLOT_CN)\n\ny &lt;- y %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\n\n# X Variables\nx &lt;- left_join(CNs, x_pred, join_by(STANDPLOT_CN))\n\nx &lt;- x %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\n# No Oaks in BA either\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- y[, names(sort(colSums(y), decreasing = T))]\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n################################################################################################",
    "crumbs": [
      "Models",
      "9 RF Reg"
    ]
  },
  {
    "objectID": "9_RF_Regression.html#yai-3",
    "href": "9_RF_Regression.html#yai-3",
    "title": "9 RF Reg",
    "section": "yai",
    "text": "yai\nRun yai for loop\n\n\nCode\n# i &lt;- 1\n# j &lt;- 1\n# k &lt;- 2\n# grps &lt;- 2\n# repeats &lt;- 2\n\nntree_error &lt;- tribble(~SYMBL, ~n_plots, ~ntree, ~var_exp, ~rmsd, ~run)\n\ngrps &lt;- 3\nrepeats &lt;- 5\n\ndf2 &lt;- NULL\n\nfor (i in 1:grps) {\n  \n  if (i == 1) {\n    for (k in 1:repeats) {\n    \n        # ntrees &lt;- rep((5), 30)\n        ntrees &lt;- rep((50), 30)\n          # ntrees &lt;- (50)\n        # print(ntrees)\n    \n    rf &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T,\n              rfMode = \"regression\",\n              ntree = ntrees)\n    \n    oobe &lt;- yaiRFsummary(rf)$forestAttributes\n    oobe &lt;- oobe %&gt;% rownames_to_column(\"SYMBL\") %&gt;%\n      select(-c(levels, type, errtag), var_exp = error)\n    rmsd &lt;- rmsd(rf)\n    rmsd &lt;- rmsd %&gt;% rownames_to_column(\"SYMBL\")\n    \n    df2 &lt;- df\n    \n    error &lt;- left_join(df2, oobe, join_by(SYMBL))\n    error &lt;- left_join(error, rmsd, join_by(SYMBL))\n    error$run &lt;- (i * 100) + k\n    \n    ntree_error &lt;- add_row(ntree_error, error)\n    }\n  }\n  \n  \n  if (i != 1) {\n    for (j in 1:repeats) {\n      \n      # ntrees &lt;- rep((2*i), 30)\n      ntrees &lt;- rep((75*i), 30)\n      # ntrees &lt;- (75*i)\n      # print(ntrees)\n\n    rf &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T,\n              rfMode = \"regression\",\n              ntree = ntrees)\n    \n      oobe &lt;- yaiRFsummary(rf)$forestAttributes\n      oobe &lt;- oobe %&gt;% rownames_to_column(\"SYMBL\") %&gt;%\n        select(-c(levels, type, errtag), var_exp = error)\n      rmsd &lt;- rmsd(rf)\n      rmsd &lt;- rmsd %&gt;% rownames_to_column(\"SYMBL\")\n      \n      df2 &lt;- df\n      \n      error &lt;- left_join(df2, oobe, join_by(SYMBL))\n      error &lt;- left_join(error, rmsd, join_by(SYMBL))\n      error$run &lt;- (i * 100) + j\n      \n      ntree_error &lt;- add_row(ntree_error, error)\n    }\n  }\n}\n\n\n# save(ntree_error, file = \"./data/ntree_error_sept20_3_grps.Rdata\")\nntree_error %&gt;%\n  filter(!is.na(var_exp))\n  # filter(SYMBL == \"total_TD\")\n\n# t &lt;- ntree_error %&gt;%\n#   filter(SYMBL == \"total_TD\")\n# t\n\n\n\nntree_error_sept19_5.Rdata has up to 500 trees.\nntree_error_sept19_10.Rdata has 1000 trees.\nntree_error_sept20_3_grps_5.Rdata has 5 runs for each ntree, and 3 sets of ntree values: 50, 150, 225.\n\n\n\nCode\nntree_error %&gt;% head()\n\n\n\n\n\n\nSYMBL\nn_plots\nntree\nvar_exp\nrmsd\nrun\n\n\n\n\ntotal_TD\n1775\n50\n47.76\n1970.0029\n101\n\n\nABAM_TD\n608\n50\n60.88\n986.1010\n101\n\n\nTSHE_TD\n378\n50\n33.81\n781.3226\n101\n\n\nPSME_TD\n353\n50\n95.36\n193.5669\n101\n\n\nABLA_TD\n317\n50\n68.57\n381.3099\n101\n\n\nTSME_TD\n165\n50\n52.64\n191.5042\n101\n\n\n\n\n\n\n\n\nCode\nerror_spp_tree_grps &lt;- ntree_error %&gt;% group_by(SYMBL, ntree) %&gt;% \n  summarise(\n    .groups = \"drop\",\n    mean_var = mean(var_exp, na.rm = T), \n    sd_var = sd(var_exp, na.rm = T), \n    mean_rmsd = mean(rmsd, na.rm = T),\n    sd_rmsd = sd(rmsd, na.rm = T)\n    )  \n  \nerror_spp_tree_grps %&gt;% ggplot() + \n  aes(x = ntree, y = mean_var, group = ntree) + \n  # geom_smooth()\n  geom_boxplot() + \n  labs(\n    title = \"Average %Variation Explaied per Species vs. ntree\",\n    # subtitle = \"PISI_TD, PSMA_TD, 2TB_TD, & ALRH2_TD often have NAs for variation explained.\"\n  )\n\n\n\n\n\n\n\n\n\n\n50, 150, 225 Plots\n\n\nCode\nn &lt;- ntree_error$ntree %&gt;% unique() %&gt;% sort()\n\nfor(i in 1:3) {\n\nt_rep_error &lt;- ntree_error[ntree_error$ntree == n[i],]\nt_rep_error &lt;- t_rep_error %&gt;% filter(!is.na(var_exp))\nt_rep_error &lt;- t_rep_error %&gt;% mutate(run2 = str_sub(run,-1,-1))\n\nave_error &lt;- t_rep_error %&gt;% group_by(SYMBL) %&gt;%\n  summarise(\n    ave_var = mean(var_exp, na.rm = T), \n    med_var = median(var_exp, na.rm = T), \n    sd_var = sd(var_exp, na.rm = T)\n    )\n\nave_error &lt;- ave_error %&gt;% mutate(\n  lower = ave_var - sd_var, upper = ave_var + sd_var, \n  lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var\n  )\n\nt_rep_error &lt;- t_rep_error %&gt;% filter(!is.na(var_exp))\n\nt_rep_error &lt;- left_join(t_rep_error, ave_error, join_by(SYMBL))\nt_rep_error &lt;- t_rep_error %&gt;% arrange(desc(n_plots))\n\nt &lt;- t_rep_error %&gt;% select(SYMBL) %&gt;% unique()\nt$rib &lt;- seq(1:30)\n\nt_rep_error &lt;- left_join(t_rep_error, t, join_by(SYMBL))\n\n# ave_error &lt;- ave_error %&gt;% mutate(SYMBL = factor(SYMBL, levels = unique(t_rep_error$SYMBL)))\n\np &lt;- ggplot(t_rep_error) + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +  ## , color = run2\n  # geom_boxplot(aes(x = reorder(SYMBL, -n_plots), y = var_exp, fill = SYMBL)) +\n  # geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = SYMBL)) +\n  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = \"red\"), alpha = .2) +\n  \n  geom_hline(yintercept = 0) +\n  geom_hline(yintercept = 100) +\n  \n  guides(\n    x = guide_axis(angle = 60), \n    # color = \"none\", \n    fill = \"none\"\n    ) + \n  \n  labs(\n    title = str_c(\"Boxplots: 5 RF runs at ntree = \", n[i]),\n    subtitle = \"PISI_TD, ALRH2_TD, PSMA_TD, & 2TB_TD often have NAs for variation explained.\"\n    ) + \n  xlab(\"Species\") + \n  ylab(\"% Variation Explained\") +\n  ylim(-10, 100) \n\nprint(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRMSD\n\n\nCode\nn &lt;- ntree_error$ntree %&gt;% unique() %&gt;% sort()\n\nfor(i in 1:3) {\n\nt_rep_error &lt;- ntree_error[ntree_error$ntree == n[i],]\n# t_rep_error &lt;- t_rep_error %&gt;% filter(!is.na(var_exp))\nt_rep_error &lt;- t_rep_error %&gt;% mutate(run2 = str_sub(run,-1,-1))\n\nave_error &lt;- t_rep_error %&gt;% group_by(SYMBL) %&gt;%\n  summarise(\n    ave_rmsd = mean(rmsd, na.rm = T), \n    med_rmsd = median(rmsd, na.rm = T), \n    sd_rmsd = sd(rmsd, na.rm = T)\n    )\n\n# ave_error &lt;- ave_error %&gt;% mutate(\n#   lower = ave_var - sd_var, upper = ave_var + sd_var, \n#   lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var\n#   )\n\nt_rep_error &lt;- t_rep_error %&gt;% filter(!is.na(rmsd))\n\nt_rep_error &lt;- left_join(t_rep_error, ave_error, join_by(SYMBL))\nt_rep_error &lt;- t_rep_error %&gt;% arrange(desc(n_plots))\n\nt &lt;- t_rep_error %&gt;% select(SYMBL) %&gt;% unique()\nt$rib &lt;- seq(1:30)\n\nt_rep_error &lt;- left_join(t_rep_error, t, join_by(SYMBL))\n\np &lt;- ggplot(t_rep_error) + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = rmsd)) +  ## , color = run2\n  # geom_boxplot(aes(x = reorder(SYMBL, -n_plots), y = var_exp, fill = SYMBL)) +\n  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_rmsd, group = 1, color = \"red\")) +\n  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  # geom_ribbon(aes(x = rib, ymin=lwr2, ymax=upr2, fill = \"red\"), alpha = .2) +\n  \n  geom_hline(yintercept = 0) +\n  geom_hline(yintercept = 2000) +\n  \n  guides(\n    x = guide_axis(angle = 60), \n    color = \"none\",\n    fill = \"none\"\n    ) + \n  \n  labs(\n    title = str_c(\"Boxplots: 5 RF runs at ntree = \", n[i]),\n    subtitle = \"PISI_TD, ALRH2_TD, PSMA_TD, & 2TB_TD often have NAs for variation explained.\"\n    ) + \n  xlab(\"Species\") + \n  ylab(\"% Variation Explained\") +\n  ylim(-10, 3000) \n\nprint(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPISI_TD, PSMA_TD, 2TB_TD, & ALRH2_TD have 1 or 2 plots. They are sometimes left with NAs for variation explained.",
    "crumbs": [
      "Models",
      "9 RF Reg"
    ]
  },
  {
    "objectID": "7_RF_GroupSpp_and_Counts.html",
    "href": "7_RF_GroupSpp_and_Counts.html",
    "title": "7 RF Groups & Counts",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and access\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \nlibrary(BAMMtools)                    # Natural Breaks\n\n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\nCreated on\n[1] \"2024-09-03 08:19:56 PDT\"\nLast updated on\n[1] \"2024-10-09 14:02:20 PDT\"",
    "crumbs": [
      "Models",
      "7 RF Groups & Counts"
    ]
  },
  {
    "objectID": "7_RF_GroupSpp_and_Counts.html#breaks",
    "href": "7_RF_GroupSpp_and_Counts.html#breaks",
    "title": "7 RF Groups & Counts",
    "section": "Breaks",
    "text": "Breaks\n\nsapply(y_resp_counts, n_distinct)\n\n     PIPO_TD      ABLA_TD      TSME_TD      PSME_TD      ABGR_TD      LALY_TD      PIEN_TD      PICO_TD      LAOC_TD      ACGL_TD     TABR2_TD      CHNO_TD      ABAM_TD      THPL_TD      TSHE_TD      BEPA_TD      PREM_TD     POTR5_TD      PIAL_TD     ALRU2_TD      ABPR_TD     PIMO3_TD      PRVI_TD     Other_TD     ACMA3_TD      PSMA_TD     ALRH2_TD     POBAT_TD      PISI_TD     total_TD STANDPLOT_CN    largest_1    largest_2    largest_3     max_spp1     max_spp2     max_spp3 \n           9           36           20           18           24            7           16           22           12            6           12           12           57           16           35            4            7            6            7            5            3            7            7            3            6            2            2            4            2           81         2739           76           26           10           27           26           21 \n\n\nFor N.Cascades, only total_td has enough distinct counts to need groupings that would avoid the yaImpute factor limit.\n\nggplot(y_resp_counts) + \n  aes(x = total_TD) + \n  geom_histogram(bins = 30)\n\n\n\n\n\n\n\n\n\nNatural jenks\nFinding the values of Total_TD that will be classed as high TD\n\nn &lt;- 49\n\nt &lt;- unique(y_resp_counts$total_TD)\nt &lt;- t |&gt; sort()\nt[n]\n\n[1] 50\n\nt &lt;- t[t &gt; n]\n\nFinding the natural breaks for those values that exceed the 53 class limit\n\nbreaks &lt;- getJenksBreaks(t, 4)\nbreaks\n\n[1]  50 124 211 362\n\n\nPlotting the values that will be classed as three classes of high.\n\nggplot() + \n  aes(x = t) + \n  geom_histogram(bins = 100) + \n  geom_vline(xintercept = breaks)\n\n\n\n\n\n\n\n\nChanging the values inside the breaks\n\nbreaks\n\n[1]  50 124 211 362\n\ny_resp_counts_grouped &lt;- y_resp_counts |&gt; \n  mutate(\n    total_TD = ifelse(total_TD &gt;= breaks[1] & total_TD &lt; breaks[2], breaks[1], total_TD), \n    total_TD = ifelse(total_TD &gt;= breaks[2] & total_TD &lt; breaks[3], breaks[2], total_TD), \n    total_TD = ifelse(total_TD &gt;= breaks[3], breaks[4], total_TD), \n    total_TD = as.integer(total_TD)\n    )\n\nt &lt;- y_resp_counts_grouped |&gt; select(total_TD)\n\nShowing the difference in histograms between the dataframes with and without grouping by breaks.\nggplot(t) + \n  aes(x = total_TD) + \n  geom_histogram(bins = 30) + \n  labs(title = \"With Breaks\")\n  # geom_vline(xintercept = breaks)\n\n\nggplot(y_resp_counts) + \n  aes(x = total_TD) + \n  geom_histogram(bins = 30) + \n  labs(title = \"With Out Breaks\")\n\n\n\n\n\n\n\n\n\n\nRemoving Columns\n\ny_resp_counts_grouped &lt;- y_resp_counts_grouped |&gt; select(-c(largest_3, max_spp3))\nnames &lt;- y_resp_counts_grouped |&gt; names()\nnames\n\n [1] \"PIPO_TD\"      \"ABLA_TD\"      \"TSME_TD\"      \"PSME_TD\"      \"ABGR_TD\"      \"LALY_TD\"      \"PIEN_TD\"      \"PICO_TD\"      \"LAOC_TD\"      \"ACGL_TD\"      \"TABR2_TD\"     \"CHNO_TD\"      \"ABAM_TD\"      \"THPL_TD\"      \"TSHE_TD\"      \"BEPA_TD\"      \"PREM_TD\"      \"POTR5_TD\"     \"PIAL_TD\"      \"ALRU2_TD\"     \"ABPR_TD\"      \"PIMO3_TD\"     \"PRVI_TD\"      \"Other_TD\"     \"ACMA3_TD\"     \"PSMA_TD\"      \"ALRH2_TD\"     \"POBAT_TD\"     \"PISI_TD\"      \"total_TD\"     \"STANDPLOT_CN\" \"largest_1\"    \"largest_2\"    \"max_spp1\"     \"max_spp2\"    \n\n\nSetting all columns to factors\n\nt &lt;- y_resp_counts_grouped |&gt; mutate_if(is.integer, as.factor)\nt &lt;- t |&gt; mutate_if(is.character, as.factor)\ny_resp_factors &lt;-  t\n\ny_resp_factors |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPIPO_TD\nABLA_TD\nTSME_TD\nPSME_TD\nABGR_TD\nLALY_TD\nPIEN_TD\nPICO_TD\nLAOC_TD\nACGL_TD\nTABR2_TD\nCHNO_TD\nABAM_TD\nTHPL_TD\nTSHE_TD\nBEPA_TD\nPREM_TD\nPOTR5_TD\nPIAL_TD\nALRU2_TD\nABPR_TD\nPIMO3_TD\nPRVI_TD\nOther_TD\nACMA3_TD\nPSMA_TD\nALRH2_TD\nPOBAT_TD\nPISI_TD\ntotal_TD\nSTANDPLOT_CN\nlargest_1\nlargest_2\nmax_spp1\nmax_spp2\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12964449010497_1\n0.0000\n0.00000\nzero\nzero\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12964449010497_3\n0.0000\n0.00000\nzero\nzero\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12964449010497_4\n0.0000\n0.00000\nzero\nzero\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12964657010497_1\n0.0000\n0.00000\nzero\nzero\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n12965290010497_2\n149.9306\n0.00000\nPIPO_TD\nzero\n\n\n0\n2\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n12965572010497_4\n149.9306\n74.96528\nABLA_TD\nTSME_TD\n\n\n\n\n\n\n\nsummary(y_resp_factors)\n\n    PIPO_TD        ABLA_TD        TSME_TD        PSME_TD        ABGR_TD     LALY_TD      PIEN_TD        PICO_TD        LAOC_TD     ACGL_TD     TABR2_TD       CHNO_TD        ABAM_TD        THPL_TD        TSHE_TD     BEPA_TD  PREM_TD  POTR5_TD  PIAL_TD  ALRU2_TD ABPR_TD  PIMO3_TD  PRVI_TD  Other_TD ACMA3_TD  PSMA_TD  ALRH2_TD POBAT_TD PISI_TD     total_TD              STANDPLOT_CN    largest_1          largest_2          max_spp1       max_spp2   \n 0      :2682   0      :2447   0      :2586   0      :2464   0      :2629   0 :2723   0      :2659   0      :2671   0      :2721   0:2725   0      :2709   0      :2696   0      :2162   0      :2634   0      :2407   0:2736   0:2724   0 :2724   0:2693   0:2731   0:2737   0 :2709   0:2733   0:2737   0 :2730   0:2737   0:2738   0:2736   0:2738   0      :1241   12964449010497_1:   1   Min.   :    0.00   Min.   :   0.00   zero   :1241   zero   :2135  \n 1      :  42   1      :  61   1      :  55   1      : 143   1      :  30   1 :   7   1      :  32   1      :  32   1      :   5   1:   9   1      :  13   1      :  14   1      : 113   1      :  50   1      :  91   1:   1   1:   8   1 :   6   1:  26   1:   3   2:   1   1 :  23   1:   1   1:   1   1 :   3   1:   2   1:   1   1:   1   1:   1   1      : 313   12964449010497_3:   1   1st Qu.:    0.00   1st Qu.:   0.00   ABAM_TD: 444   ABAM_TD: 114  \n 2      :   7   2      :  58   2      :  28   2      :  45   2      :  17   2 :   3   2      :  11   2      :   8   3      :   4   2:   2   3      :   4   2      :   8   2      :  66   2      :  25   2      :  43   3:   1   2:   1   2 :   4   2:  10   2:   3   4:   1   2 :   3   2:   1   3:   1   2 :   2                     2:   1            2      : 182   12964449010497_4:   1   Median :   74.97   Median :   0.00   ABLA_TD: 240   TSHE_TD:  98  \n 4      :   3   4      :  26   3      :  23   3      :  31   3      :  16   3 :   2   3      :   8   4      :   4   2      :   1   3:   1   4      :   4   3      :   6   6      :  51   3      :   9   3      :  43   6:   1   3:   1   3 :   2   3:   6   3:   1            3 :   1   4:   1            4 :   2                     3:   1            3      : 138   12964657010497_1:   1   Mean   :  378.90   Mean   :  53.12   TSHE_TD: 206   TSME_TD:  74  \n 3      :   1   6      :  23   4      :  13   4      :  13   4      :  11   4 :   2   4      :   6   3      :   3   5      :   1   5:   1   8      :   2   5      :   4   3      :  48   4      :   4   6      :  36            4:   2   6 :   2   4:   2   7:   1            5 :   1   6:   1            6 :   1                                       4      : 106   12965290010497_2:   1   3rd Qu.:  299.86   3rd Qu.:   0.00   PSME_TD: 188   PSME_TD:  64  \n 6      :   1   3      :  21   6      :   7   5      :  12   6      :   7   7 :   1   5      :   5   8      :   3   6      :   1   6:   1   2      :   1   10     :   3   4      :  43   5      :   3   5      :  23            5:   1   27:   1   5:   1                     6 :   1   7:   1            14:   1                                       6      : 103   12965572010497_4:   1   Max.   :25338.26   Max.   :6596.94   ABGR_TD:  94   THPL_TD:  47  \n (Other):   3   (Other): 103   (Other):  27   (Other):  31   (Other):  29   21:   1   (Other):  18   (Other):  18   (Other):   6            (Other):   6   (Other):   8   (Other): 256   (Other):  14   (Other):  96            6:   2             7:   1                     13:   1   8:   1                                                          (Other): 656   (Other)         :2733                                        (Other): 326   (Other): 207  \n\n\nThe largest count in North Cascades is 328 seedlings for a single species and 362 of all species on a subplot.\n# i &lt;- 1\nfor (i in 30:length(td_names)) { \n  \n  t &lt;- y_resp |&gt; select(td_names[i])\n  t &lt;- t |&gt; rename(x = td_names[i])\n  p3 &lt;- t |&gt; ggplot() +\n    aes(x = x) + \n    geom_histogram(\n      # y = after_stat(count), \n      bins = 30\n      ) + \n    labs(title = str_c(\"Raw \", td_names[i]))\n  \n  \n  \n  t &lt;- y_resp_factors |&gt; select(td_names[i])\n  t &lt;- t |&gt; rename(x = td_names[i])\n  p &lt;- t |&gt; ggplot() +\n    aes(x = x, fill = x) + \n    geom_bar(\n      # y = after_stat(count)\n      ) + \n    labs(title = str_c(\"Factor \", td_names[i])) + \n    scale_x_discrete(guide = guide_axis(angle = 90)) + \n    theme(legend.position=\"none\")\n  \n  t &lt;- y_resp_counts_grouped |&gt; select(td_names[i])\n  t &lt;- t |&gt; rename(x = td_names[i])\n  p2 &lt;- t |&gt; ggplot() +\n    aes(x = x) + \n    geom_histogram(\n      # y = after_stat(count), \n      bins = 53\n      ) + \n    labs(title = str_c(\"Counts \", td_names[i]))\n  \n  print(p)\n  print(p2)\n  print(p3)\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny_resp_factors$total_TD |&gt; n_distinct()\n\n[1] 51",
    "crumbs": [
      "Models",
      "7 RF Groups & Counts"
    ]
  },
  {
    "objectID": "7_RF_GroupSpp_and_Counts.html#regression-variation",
    "href": "7_RF_GroupSpp_and_Counts.html#regression-variation",
    "title": "7 RF Groups & Counts",
    "section": "Regression variation",
    "text": "Regression variation\n\nrf_imp &lt;- rf_yai |&gt; impute()\nrf_imp &lt;- rf_imp |&gt; select(contains(\"_TD\")) \nrf_imp &lt;- rf_imp |&gt; select(order(colnames(rf_imp)))\n\n\nABAM_TD 32.32 %var explained\n\nt &lt;- rf_imp[, 1:2]\n\nt &lt;- t |&gt; mutate(\n  # sq_dev = (ABAM_TD - ABAM_TD.o)^2, \n  ssr = (ABAM_TD.o - ABAM_TD)^2,\n  sst = (ABAM_TD.o - mean(t$ABAM_TD.o))^2\n  )\n\n# Root Meaning the squared difference\n# sqrt(mean(t$sq_dev))\n\nssr &lt;- sum(t$ssr)\nsst &lt;- sum(t$sst)\n\n1 - ssr/sst\n\n\nt &lt;- t |&gt; drop_na()|&gt; mutate(\n  \n  # ssres = (y_i - f_i)^2,\n  ssres = (ABAM_TD.o - ABAM_TD)^2,\n  \n  # sstot = (y_i - mean(t$y_i))^2,\n  sstot = (ABAM_TD.o - mean(t$ABAM_TD.o))^2, \n  \n  # ssreg = (f_i - mean(t$y_i))^2,\n  ssreg = (ABAM_TD - mean(t$ABAM_TD.o))^2,\n  \n  # st = ssres + ssreg, \n  st = ssres + ssreg\n  )\n\nr2 &lt;- sum(t$ssreg)/sum(t$st)\n\nmean(t$ssreg)/mean(t$st)",
    "crumbs": [
      "Models",
      "7 RF Groups & Counts"
    ]
  },
  {
    "objectID": "5_TD_Imp.html",
    "href": "5_TD_Imp.html",
    "title": "5 TD Imp",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\nCreated on\n[1] \"2024-08-26 10:05:07 PDT\"\nLast updated on\n[1] \"2024-10-09 14:01:10 PDT\"",
    "crumbs": [
      "Models",
      "5 TD Imp"
    ]
  },
  {
    "objectID": "5_TD_Imp.html#rf",
    "href": "5_TD_Imp.html#rf",
    "title": "5 TD Imp",
    "section": "RF",
    "text": "RF\nAdjust n1 and n2 to get RF to work.\n\nn1 is the number from max_spp1 to remove\nn2 is the number from max_spp2 to keep.\n3 and 19 are working in N.C.\n\nRun RandomForest\n\nn1 &lt;- 3\nn2 &lt;- 19\n\n# Prep\ny_above0 &lt;- yfull |&gt; filter(total_TD &gt; 0)\n\nCNs_wRegen &lt;- y_above0 |&gt; select(STANDPLOT_CN)\n\n# X Variables\nx_above0 &lt;- left_join(CNs_wRegen, x_pred, join_by(STANDPLOT_CN))\n\nx &lt;- x_above0 |&gt; \n  select(-c(a,g)) |&gt; \n  mutate(\n    f = factor(f), \n    p = factor(p)\n  ) |&gt; \n  relocate(f, p, .after = BAp) |&gt; \n  select(!all_of(remove))\n\n\n# Y variables\n\nt &lt;- y_above0 |&gt; group_by(max_spp1) |&gt; \n  summarise(\n    n = n(), \n    tpa = sum(largest_1)\n  ) |&gt; \n  arrange(n)\n\ntd_remove &lt;- t[1:n1,]$max_spp1 |&gt; as.character()\n\n\ny_rare &lt;- y_above0 |&gt; select(all_of(td_remove))\n\ny_rare &lt;- y_rare |&gt; mutate(\n  rare_TD = rowSums(y_rare[grep(\"_TD\", names(y_rare))])\n)\n\ny_above0$rare_TD &lt;- y_rare$rare_TD\n\ny_above0 &lt;- y_above0 |&gt; select(!all_of(td_remove))\n\n\n\n\n\ny &lt;- y_above0 |&gt; select(STANDPLOT_CN, max_spp1, max_spp2, largest_1, largest_2, total_TD)\n\ny_vars &lt;- names(y)\n\nspp2_list &lt;- y |&gt; group_by(max_spp2) |&gt; summarise(\n  n = n()\n) |&gt; arrange(desc(n))\n\nspp2_list &lt;- spp2_list$max_spp2[1:n2]\n\ny &lt;- y |&gt; mutate(\n  max_spp1 = ifelse(\n    max_spp1 %in% td_remove, \"rare\", max_spp1\n  ),\n  \n  max_spp2 = ifelse(\n    max_spp2 %in% spp2_list, max_spp2, \"Other\"\n  )\n)\n\ny &lt;- y |&gt; mutate(\n  max_spp1 = factor(max_spp1),\n  max_spp2 = factor(max_spp2)\n  )\n\n\n\n\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# save(rf_yai, file = str_c(\"RF_26AUG24_original_Y\", \".Rdata\"))\nload(str_c(\"data/RF_26AUG24_original_Y\", \".Rdata\"))",
    "crumbs": [
      "Models",
      "5 TD Imp"
    ]
  },
  {
    "objectID": "5_TD_Imp.html#ancillary-data",
    "href": "5_TD_Imp.html#ancillary-data",
    "title": "5 TD Imp",
    "section": "Ancillary data",
    "text": "Ancillary data\nCopying the St.Joe example in the yaImpute paper, I am adding the original TDs back onto the imputation.\n\ny_ancil &lt;- y_above0\n\ny_ancil &lt;- y_ancil |&gt; mutate(\n  max_spp1 = factor(max_spp1), \n  max_spp2 = factor(max_spp2)\n) |&gt; select(-c(max_spp3, largest_3))\n\ny_ancil &lt;- y_ancil |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny_ancil &lt;- y_ancil |&gt; as.data.frame()\n\nrf_imp_ancillary &lt;- impute(rf_yai, ancillaryData = y_ancil) |&gt; drop_na()\n# rf_imp_ancillary |&gt; head()\nrf_imp_ancillary |&gt; select(order(colnames(rf_imp_ancillary))) |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_TD\nABAM_TD.o\nABCO_TD\nABCO_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nACGL_TD\nACGL_TD.o\nACMA3_TD\nACMA3_TD.o\nALRU2_TD\nALRU2_TD.o\nBEOC2_TD\nBEOC2_TD.o\nBEPA_TD\nBEPA_TD.o\nCHLA_TD\nCHLA_TD.o\nCHNO_TD\nCHNO_TD.o\nCONU4_TD\nCONU4_TD.o\nLALY_TD\nLALY_TD.o\nLAOC_TD\nLAOC_TD.o\nlargest_1\nlargest_1.o\nlargest_2\nlargest_2.o\nMAFU_TD\nMAFU_TD.o\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\nOther_TD\nOther_TD.o\nPIAL_TD\nPIAL_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPISI_TD\nPISI_TD.o\nPOTR5_TD\nPOTR5_TD.o\nPREM_TD\nPREM_TD.o\nPRPE2_TD\nPRPE2_TD.o\nPRVI_TD\nPRVI_TD.o\nPSME_TD\nPSME_TD.o\nQUGA4_TD\nQUGA4_TD.o\nrare_TD\nrare_TD.o\nTABR2_TD\nTABR2_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965290010497_2\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0\n0\n74.96528\n149.93057\n0.0000\n0.00000\n0\n0\nPIPO_TD\nPIPO_TD\nzero\nzero\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n74.96528\n149.9306\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0\n0\n0\n74.96528\n149.93057\n0\n0\n0\n0\n\n\n12965856010497_1\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\nPOBAT_TD\nPSME_TD\nzero\nzero\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n74.96528\n0\n0\n74.96528\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0\n0\n0\n0\n\n\n12967289010497_3\n0\n0\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\nABGR_TD\nABGR_TD\nzero\nzero\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0\n0\n0\n0\n\n\n12970163010497_1\n0\n0\n0\n0\n0.00000\n0.00000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0\n0\n74.96528\n74.96528\n0.0000\n0.00000\n0\n0\nPSME_TD\nPSME_TD\nzero\nzero\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0\n0\n0.00000\n0\n0\n0\n0\n0\n74.96528\n74.96528\n0\n0\n0\n0\n\n\n12970308010497_2\n0\n0\n0\n0\n0.00000\n0.00000\n449.7917\n74.96528\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n74.96528\n0\n0\n449.79170\n74.96528\n0.0000\n74.96528\n0\n0\nABLA_TD\nABLA_TD\nzero\nLALY_TD\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0\n0\n0\n449.79170\n149.93056\n0\n0\n0\n0\n\n\n12970308010497_4\n0\n0\n0\n0\n0.00000\n0.00000\n224.8958\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n149.9306\n0.00000\n0\n0\n224.89585\n149.93057\n149.9306\n0.00000\n0\n0\nABLA_TD\nPIEN_TD\nLALY_TD\nzero\n0\n0\n0\n0\n0\n0\n0\n149.9306\n0\n0\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.00000\n0.00000\n0\n0\n0.00000\n0\n0\n0\n0\n0\n374.82641\n149.93057\n0\n0\n0\n0\n\n\n\n\n\n\n\nrmsd(rf_imp_ancillary) |&gt; head(n =10)\n\n\n\n\n\n\nrmsd\n\n\n\n\nPIPO_TD\n44.94914\n\n\nABLA_TD\n289.32679\n\n\nTSME_TD\n186.02935\n\n\nPSME_TD\n657.62816\n\n\nABGR_TD\n454.06698\n\n\nLALY_TD\n47.69618\n\n\nPIEN_TD\n261.37194\n\n\nPICO_TD\n267.14061\n\n\nLAOC_TD\n322.04298\n\n\nACGL_TD\n18.79321\n\n\n\n\n\n\n\nVar importance\n\nx |&gt; names()\n\n [1] \"CC\"       \"SDI\"      \"LAT\"      \"LON\"      \"ELEV\"     \"Northing\" \"Easting\"  \"SLOPE\"    \"BAp\"      \"f\"        \"p\"        \"PIPO_BA\"  \"PSME_BA\"  \"ABAM_BA\"  \"TSME_BA\"  \"ABGR_BA\"  \"PICO_BA\"  \"LALY_BA\"  \"PIAL_BA\"  \"PIEN_BA\"  \"ABLA_BA\"  \"LAOC_BA\"  \"THPL_BA\"  \"ALRU2_BA\" \"TSHE_BA\"  \"TABR2_BA\" \"CHNO_BA\"  \"POBAT_BA\" \"ABPR_BA\"  \"BEPA_BA\"  \"PREM_BA\"  \"POTR5_BA\" \"PIMO3_BA\" \"ACGL_BA\"  \"ACMA3_BA\" \"Other_BA\" \"ALRH2_BA\" \"PRVI_BA\" \n\n\n\nyaiVarImp(rf_yai)\n\n\n\n\n\n\n\n\n\n\nTerminal Buckets\n\nload(\"data/example_imputation.Rdata\")\n# a &lt;- t[8:9,]\n# a &lt;-  a %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\na\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_BA\nABAM_BA.o\nBAp\nBAp.o\nCC\nCC.o\nEasting\nEasting.o\nELEV\nELEV.o\nlargest_1\nlargest_1.o\nlargest_2\nlargest_2.o\nLAT\nLAT.o\nLON\nLON.o\nNorthing\nNorthing.o\nSDI\nSDI.o\nSLOPE\nSLOPE.o\ntotal_TD\ntotal_TD.o\nTSME_BA\nTSME_BA.o\nf\nf.o\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\np\np.o\n\n\n\n\n12990036010497_1\n16.90395\n33.80122\n47.81995\n61.28085\n24\n21\n-0.4848096\n-0.5877853\n4500\n4500\n449.7917\n374.8264\n449.7917\n149.9306\n48.95221\n48.95221\n-121.8302\n-121.8302\n0.8746197\n0.8090170\n154\n161\n55\n53\n899.5834\n524.7570\n30.86558\n17.08986\nC\nC\nTSME_TD\nABAM_TD\nABAM_TD\nTSME_TD\nM\nM\n\n\n12990036010497_4\n33.80122\n16.90395\n61.28085\n47.81995\n21\n24\n-0.5877853\n-0.4848096\n4500\n4500\n374.8264\n449.7917\n149.9306\n449.7917\n48.95221\n48.95221\n-121.8302\n-121.8302\n0.8090170\n0.8746197\n161\n154\n53\n55\n524.7570\n899.5834\n17.08986\n30.86558\nC\nC\nABAM_TD\nTSME_TD\nTSME_TD\nABAM_TD\nM\nM\n\n\n\n\n\n\nThe above example shows why I think that the CNs are in the terminal buckets. These two CNs are nearest neighbors in real and Random Forest’s Space. Each has been selected as the others nearest neighbor(assuming), and all of the observed values from one are written as the imputed values for the other and vice versa.",
    "crumbs": [
      "Models",
      "5 TD Imp"
    ]
  },
  {
    "objectID": "5_TD_Imp.html#heat-maps",
    "href": "5_TD_Imp.html#heat-maps",
    "title": "5 TD Imp",
    "section": "Heat maps",
    "text": "Heat maps\n\nMax spp 1\n\n\nCode\nrf_imp_test |&gt; select(max_spp1, max_spp1.o) |&gt; \n                  mutate(\n                    max_spp1 =  as.character(max_spp1), \n                    max_spp1.o =  as.character(max_spp1.o),\n                    num = 1) |&gt;\n              group_by(max_spp1, max_spp1.o) |&gt;\n              summarise(\n                     num = sum(num),\n                     .groups = \"drop\") |&gt;\n  drop_na() |&gt;\n  arrange(max_spp1, max_spp1.o) |&gt; \n  ggplot() +\n      aes(x = max_spp1, y = max_spp1.o, fill = num) +\n  # aes(x = max_spp1, y = max_spp1.o, fill = max_spp1.o) +\n      \n  geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\nMax spp 2\n\n\nCode\nrf_imp_test |&gt; select(max_spp2, max_spp2.o) |&gt; \n                  mutate(\n                    max_spp2 =  as.character(max_spp2), \n                    max_spp2.o =  as.character(max_spp2.o),\n                    equal = 1) |&gt;  \n              group_by(max_spp2, max_spp2.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  arrange(max_spp2, max_spp2.o) |&gt; \n  ggplot() +\n      aes(x = max_spp2, y = max_spp2.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  # scale_fill_gradient2(low = \"white\", mid = \"yellow\", high = \"red\", midpoint = 100) +\n  scale_fill_gradientn(\n                       colors = c(\"white\", \"red\"),\n                       # values = c(0, 15, 75, 855)\n                       ) +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\nSame as above, but without zero\n\n\nCode\nrf_imp_test |&gt; select(max_spp2, max_spp2.o) |&gt; \n                  mutate(\n                    max_spp2 =  as.character(max_spp2), \n                    max_spp2.o =  as.character(max_spp2.o),\n                    equal = 1) |&gt;  \n              group_by(max_spp2, max_spp2.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  arrange(max_spp2, max_spp2.o) |&gt; \n  filter(max_spp2 != \"zero\" & max_spp2.o != \"zero\") |&gt; \n  ggplot() +\n      aes(x = max_spp2, y = max_spp2.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  # scale_fill_gradient2(low = \"white\", mid = \"yellow\", high = \"red\", midpoint = 100) +\n  scale_fill_gradientn(\n                       colors = c(\"white\", \"red\"),\n                       # values = c(0, 15, 75, 855)\n                       ) +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\nCode\nrf_imp_test |&gt; select(f, f.o) |&gt; \n                  mutate(\n                    f =  as.character(f), \n                    f.o =  as.character(f.o),\n                    equal = 1) |&gt;  \n              group_by(f, f.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  ggplot() +\n      aes(x = f, y = f.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\np\n\n\nCode\nrf_imp_test |&gt; select(p, p.o) |&gt; \n                  mutate(\n                    p =  as.character(p), \n                    p.o =  as.character(p.o),\n                    equal = 1) |&gt;  \n              group_by(p, p.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt; \n  ggplot() +\n      aes(x = p, y = p.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\nunique(as.character(rf_imp_test$p)) |&gt; noquote()\n\n [1] D    &lt;NA&gt; A    M    H    F    Q    E    W    C    P   \n\n\n\nD doug fir\nA Alpine\nM Mountain Hemlock\nF Silver fir\nQ Probably Oak(Quercus), this isn’t in the Wenatchee guide\nE Sub-alpine fir\nW Grand Fir\nC W. Hemlock\nP Ponderosa\n\nThe graphs were perhaps a waste of time, but I thought I could perhaps show something.\nIt could be interesting to see what happens when using the species groups as opposed to actual seedlings.",
    "crumbs": [
      "Models",
      "5 TD Imp"
    ]
  },
  {
    "objectID": "5_TD_Imp.html#ancillary-data-1",
    "href": "5_TD_Imp.html#ancillary-data-1",
    "title": "5 TD Imp",
    "section": "Ancillary data",
    "text": "Ancillary data\n\ny_ancil &lt;- y_above0\n\ny_ancil &lt;- y_ancil |&gt; mutate(\n  max_spp1 = factor(max_spp1), \n  max_spp2 = factor(max_spp2)\n) |&gt; select(-c(max_spp3, largest_3))\n\ny_ancil &lt;- y_ancil |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny_ancil &lt;- y_ancil |&gt; as.data.frame()\n\nrf_imp_ancillary &lt;- impute(rf_yai, ancillaryData = y_ancil) |&gt; drop_na()\ny_ancillary_imp &lt;- rf_imp_ancillary |&gt; select(order(colnames(rf_imp_ancillary))) \ny_ancillary_imp |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_TD\nABAM_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nlargest_1\nlargest_1.o\nlargest_2\nlargest_2.o\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\nOther_TD\nOther_TD.o\nPISI_TD\nPISI_TD.o\nPSME_TD\nPSME_TD.o\nrare_TD\nrare_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965856010497_1\n0\n0\n0.00000\n0.00000\n0\n0.00000\n0\n0\n149.93057\n74.96528\n0.00000\n0.00000\nPOTR5_TD\nPSME_TD\nzero\nzero\n0\n0\n0\n0\n0.0000\n74.96528\n149.93057\n0.00000\n149.93057\n74.96528\n0\n0\n0\n0\n\n\n12967289010497_1\n0\n0\n74.96528\n0.00000\n0\n0.00000\n0\n0\n74.96528\n149.93057\n0.00000\n74.96528\nABGR_TD\nPSME_TD\nzero\nPIPO_TD\n0\n0\n0\n0\n0.0000\n149.93057\n0.00000\n74.96528\n74.96528\n224.89585\n0\n0\n0\n0\n\n\n12967289010497_2\n0\n0\n0.00000\n224.89585\n0\n0.00000\n0\n0\n149.93057\n224.89585\n74.96528\n0.00000\nPSME_TD\nABGR_TD\nPIPO_TD\nzero\n0\n0\n0\n0\n149.9306\n0.00000\n74.96528\n0.00000\n224.89585\n224.89585\n0\n0\n0\n0\n\n\n12967289010497_3\n0\n0\n0.00000\n74.96528\n0\n0.00000\n0\n0\n149.93057\n74.96528\n74.96528\n0.00000\nPSME_TD\nABGR_TD\nPIPO_TD\nzero\n0\n0\n0\n0\n149.9306\n0.00000\n74.96528\n0.00000\n224.89585\n74.96528\n0\n0\n0\n0\n\n\n12970163010497_1\n0\n0\n0.00000\n0.00000\n0\n0.00000\n0\n0\n149.93057\n74.96528\n0.00000\n0.00000\nPSME_TD\nPSME_TD\nzero\nzero\n0\n0\n0\n0\n149.9306\n74.96528\n0.00000\n0.00000\n149.93057\n74.96528\n0\n0\n0\n0\n\n\n12970308010497_3\n0\n0\n0.00000\n0.00000\n0\n74.96528\n0\n0\n149.93057\n524.75698\n74.96528\n74.96528\nLALY_TD\nLALY_TD\nPIAL_TD\nABLA_TD\n0\n0\n0\n0\n0.0000\n0.00000\n224.89585\n524.75698\n224.89585\n599.72226\n0\n0\n0\n0\n\n\n\n\n\ny_ancillary_imp |&gt; nrow()\n\n[1] 1106\n\n\nJust looking at an example to see what is imputed where\n\ny_ancillary_imp |&gt; \n  rownames_to_column(\"sCN\") |&gt; \n  mutate(CN = str_sub(sCN, 1, 15)) |&gt; \n  filter(CN == \"13199766010497_\") %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsCN\nABAM_TD\nABAM_TD.o\nlargest_1\nlargest_1.o\nlargest_2\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\nPSME_TD\ntotal_TD\ntotal_TD.o\nTSHE_TD\nCN\n\n\n\n\n13199766010497_1\n149.9306\n74.96528\n149.93057\n74.96528\n0.00000\nABAM_TD\nABAM_TD\nzero\nzero\n0.00000\n149.9306\n74.96528\n0.00000\n13199766010497_\n\n\n13199766010497_2\n0.0000\n449.79170\n74.96528\n449.79170\n74.96528\nPSME_TD\nABAM_TD\nTSHE_TD\nzero\n74.96528\n149.9306\n449.79170\n74.96528\n13199766010497_\n\n\n13199766010497_3\n149.9306\n1274.40980\n149.93057\n1274.40980\n0.00000\nABAM_TD\nABAM_TD\nzero\nzero\n0.00000\n149.9306\n1274.40980\n0.00000\n13199766010497_\n\n\n13199766010497_4\n149.9306\n1124.47924\n149.93057\n1124.47924\n0.00000\nABAM_TD\nABAM_TD\nzero\nzero\n0.00000\n149.9306\n1124.47924\n0.00000\n13199766010497_\n\n\n\n\n\n\nIt looks like subplots 1, 3, & 4 were all imputed to the same stand. The imputed values are all the same for this set, except subplot 2.\n\nChecking RMSD\nRMSD is calculated from the data that does not contain NAs.\nThe ancillary data was added to the yai object, and a new imputation was performed on the old prediction tree. The resulting dataframe uses the same distance measures from the original yai run, but contains the y data that we are actually interested in.\nThe replicates and bootstrap variables that were left out in the original run (and therefore the ancillary imputation) come out as NAs in the imputed data. For each variable, if it was used in the trees that best predicted that subplot as being in the same terminal node(bucket) as itself, it comes out as a value in the imputed data. If not, it comes out as an NA.\nThe RMSD of each variable is calculated from the full list of observed and imputed values for that variable. In the example case, there were ~1106 rows of subplots and bootstrap replicates that contained values and ~900 where that variable was left out of the tree.\nThe RMSD for this variable was calcuted on the 1106 rows that contained values.\n\n# Selecting the first and second columns, ABAM imputed and observed\nt &lt;- y_ancillary_imp[,1:2]\n# Finding the squared difference\nt &lt;- t |&gt; mutate(sq_dev = (ABAM_TD - ABAM_TD.o)^2)\n# Root Meaning the squared difference\nsqrt(mean(t$sq_dev))\n\n[1] 819.4351\n\n\nPulling the RMSD from the yaImpute\n\nt3 &lt;- rmsd(rf_imp_ancillary) |&gt; rownames_to_column(\"spp\")\nt3 |&gt; filter(spp == \"ABAM_TD\")\n\n\n\n\n\nspp\nrmsd\n\n\n\n\nABAM_TD\n819.4351\n\n\n\n\n\n\nPulling an example\n\nt  |&gt; rownames_to_column(\"CN\") |&gt; filter(str_detect(CN, \"^40220711010497\"))\n\n\n\n\n\nCN\nABAM_TD\nABAM_TD.o\nsq_dev\n\n\n\n\n40220711010497_1\n1499.306\n7271.632\n33319756\n\n\n40220711010497_2\n7271.632\n2473.854\n23018674\n\n\n40220711010497_3\n7271.632\n1499.306\n33319756\n\n\n40220711010497_4\n7271.632\n2323.924\n24479821\n\n\n\n\n\n\nSubplots 2, 3, & 4 were all imputed from 1 at 1’s observed value. 1 was imputed from somewhere else.\nLooking at the CNs used to impute to each plot, (I think)\n\nt &lt;- foruse(rf_yai, kth = 1, targetsOnly = T)\nt &lt;- t |&gt; rownames_to_column(\"CN\") |&gt; as.data.frame()\nt3 &lt;- NULL\nt3 &lt;- data.frame(CN = t$CN, \n                 use = t$use,\n                 dist = t$dist)\n\nt3 %&gt;% head()\n\n\n\n\n\nCN\nuse\ndist\n\n\n\n\n12965290010497_2\n24155367010900_2\n0.2853333\n\n\n12965572010497_4\n22954580010497_3\n0.4693333\n\n\n12965856010497_4\n22398195010497_4\n0.2320000\n\n\n12966246010497_1\n174763517020004_2\n0.2640000\n\n\n12969073010497_1\n29883211010497_3\n0.2773333\n\n\n12970308010497_2\n22827625010497_2\n0.1946667\n\n\n\n\n\n\n\na &lt;- y_ancillary_imp |&gt; \n  rownames_to_column(\"CN\") |&gt; \n  filter(CN == \"24155367010900_2\" | CN == \"12965290010497_2\") %&gt;% \n  select_if(~ !is.numeric(.) || sum(.) != 0) \n\nb &lt;- c(\"Used\", \"Imputed\")\ncbind(b,a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb\nCN\nABLA_TD\nABLA_TD.o\nlargest_1\nlargest_1.o\nmax_spp1\nmax_spp1.o\nmax_spp2\nmax_spp2.o\nrare_TD\nrare_TD.o\ntotal_TD\ntotal_TD.o\n\n\n\n\nUsed\n24155367010900_2\n0.00000\n74.96528\n74.96528\n74.96528\nPREM_TD\nABLA_TD\nzero\nzero\n74.96528\n0.0000\n74.96528\n74.96528\n\n\nImputed\n12965290010497_2\n74.96528\n0.00000\n74.96528\n149.93057\nABLA_TD\nPIPO_TD\nzero\nzero\n0.00000\n149.9306\n74.96528\n149.93057\n\n\n\n\n\n\nI think that yaImpute is using the standplot_cns in the terminal buckets. That would mean that the margin function is determining the if each tree is correct by whether or not the proportion of of each bucket that is the correct CN is larger than the proportion of the largest incorrect CN.\nThese appear to be the out of bag stands used for OOBe.\nI am not sure if yaImpute is using the TDs from all species for each selected nearest neighbor stand, or if they are being recomputed for each species, but it seems like the former.\nThere also appears to be something going on with the stands that are not being used to impute. In the table above, the Used row has imputed values. These pseudo imputations remind me of something I read in the documentation, but I can’t remember the specifics right now.\n\n\nVar importance\n\nx |&gt; names()\n\n [1] \"CC\"       \"SDI\"      \"LAT\"      \"LON\"      \"ELEV\"     \"Northing\" \"Easting\"  \"SLOPE\"    \"BAp\"      \"f\"        \"p\"        \"PIPO_BA\"  \"PSME_BA\"  \"ABAM_BA\"  \"TSME_BA\"  \"ABGR_BA\"  \"PICO_BA\"  \"LALY_BA\"  \"PIAL_BA\"  \"PIEN_BA\"  \"ABLA_BA\"  \"LAOC_BA\"  \"THPL_BA\"  \"ALRU2_BA\" \"TSHE_BA\"  \"TABR2_BA\" \"CHNO_BA\"  \"POBAT_BA\" \"ABPR_BA\"  \"BEPA_BA\"  \"PREM_BA\"  \"POTR5_BA\" \"PIMO3_BA\" \"ACGL_BA\"  \"ACMA3_BA\" \"Other_BA\" \"ALRH2_BA\" \"PRVI_BA\" \n\n\n\nyaiVarImp(rf_yai)",
    "crumbs": [
      "Models",
      "5 TD Imp"
    ]
  },
  {
    "objectID": "5_TD_Imp.html#heat-maps-1",
    "href": "5_TD_Imp.html#heat-maps-1",
    "title": "5 TD Imp",
    "section": "Heat maps",
    "text": "Heat maps\n\nMax spp 1\n\n\nCode\nrf_imp_test |&gt; select(max_spp1, max_spp1.o) |&gt; \n                  mutate(\n                    max_spp1 =  as.character(max_spp1), \n                    max_spp1.o =  as.character(max_spp1.o),\n                    num = 1) |&gt;\n              group_by(max_spp1, max_spp1.o) |&gt;\n              summarise(\n                     num = sum(num),\n                     .groups = \"drop\") |&gt;\n  drop_na() |&gt;\n  arrange(max_spp1, max_spp1.o) |&gt; \n  ggplot() +\n      aes(x = max_spp1, y = max_spp1.o, fill = num) +\n  # aes(x = max_spp1, y = max_spp1.o, fill = max_spp1.o) +\n      \n  geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\nMax spp 2\n\n\nCode\nrf_imp_test |&gt; select(max_spp2, max_spp2.o) |&gt; \n                  mutate(\n                    max_spp2 =  as.character(max_spp2), \n                    max_spp2.o =  as.character(max_spp2.o),\n                    equal = 1) |&gt;  \n              group_by(max_spp2, max_spp2.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  arrange(max_spp2, max_spp2.o) |&gt; \n  ggplot() +\n      aes(x = max_spp2, y = max_spp2.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  # scale_fill_gradient2(low = \"white\", mid = \"yellow\", high = \"red\", midpoint = 100) +\n  scale_fill_gradientn(\n                       colors = c(\"white\", \"red\"),\n                       # values = c(0, 15, 75, 855)\n                       ) +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\nSame as above, but without zero\n\n\nCode\nrf_imp_test |&gt; select(max_spp2, max_spp2.o) |&gt; \n                  mutate(\n                    max_spp2 =  as.character(max_spp2), \n                    max_spp2.o =  as.character(max_spp2.o),\n                    equal = 1) |&gt;  \n              group_by(max_spp2, max_spp2.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  arrange(max_spp2, max_spp2.o) |&gt; \n  filter(max_spp2 != \"zero\" & max_spp2.o != \"zero\") |&gt; \n  ggplot() +\n      aes(x = max_spp2, y = max_spp2.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  # scale_fill_gradient2(low = \"white\", mid = \"yellow\", high = \"red\", midpoint = 100) +\n  scale_fill_gradientn(\n                       colors = c(\"white\", \"red\"),\n                       # values = c(0, 15, 75, 855)\n                       ) +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\nf\n\n\nCode\nrf_imp_test |&gt; select(f, f.o) |&gt; \n                  mutate(\n                    f =  as.character(f), \n                    f.o =  as.character(f.o),\n                    equal = 1) |&gt;  \n              group_by(f, f.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt;\n  ggplot() +\n      aes(x = f, y = f.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)\n\n\n\n\n\n\n\n\n\n\n\np\n\n\nCode\nrf_imp_test |&gt; select(p, p.o) |&gt; \n                  mutate(\n                    p =  as.character(p), \n                    p.o =  as.character(p.o),\n                    equal = 1) |&gt;  \n              group_by(p, p.o) |&gt; \n              summarise(\n                     num = sum(equal), \n                     .groups = \"drop\") |&gt; \n  drop_na() |&gt; \n  ggplot() +\n      aes(x = p, y = p.o, fill = num) +\n        geom_tile() +\n  scale_x_discrete(guide = guide_axis(angle = 50)) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  geom_text(aes(label = num), color = \"black\", size = 4)",
    "crumbs": [
      "Models",
      "5 TD Imp"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html",
    "href": "3_RandomForests_Prep.html",
    "title": "3 RF Prep",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nadd_commas &lt;- function(n) {\n  t &lt;- prettyNum(n, \",\",scientific=FALSE)\n  return(noquote(t))\n}\n\n\nrem &lt;- function(data = keep, v) {\n  rem &lt;- v\n  setdiff(data, rem) %&gt;% sort() %&gt;% unique()\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\", \"add_commas\", \"rem\")\nCreated on\n[1] \"2024-08-08 11:03:12 PDT\"\nLast updated on\n[1] \"2024-10-09 14:00:32 PDT\"",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#northing-and-easting",
    "href": "3_RandomForests_Prep.html#northing-and-easting",
    "title": "3 RF Prep",
    "section": "Northing and Easting",
    "text": "Northing and Easting\n\npreds &lt;- preds |&gt; mutate(\n  Northing = round(cos(ASPECT * pi/180), 8), \n  Easting = round(sin(ASPECT * pi/180), 8)\n    ) |&gt; relocate(Northing, Easting, .after = ASPECT) \n\nsummary(preds)\n\n    PLT_CN                CC               BA              SDI           ECOSUBCD             FPAG              FLDTYPCD     FVS_Variant            ASPECT         Northing           Easting             SLOPE             LAT             LON              ELEV     \n Length:4075        Min.   :  0.00   Min.   :  0.00   Min.   :   0.0   Length:4075        Length:4075        Min.   :201.0   Length:4075        Min.   :  0.0   Min.   :-1.00000   Min.   :-1.00000   Min.   :  0.00   Min.   :45.60   Min.   :-123.5   Min.   : 100  \n Class :character   1st Qu.: 41.00   1st Qu.: 78.34   1st Qu.: 189.0   Class :character   Class :character   1st Qu.:201.0   Class :character   1st Qu.: 75.0   1st Qu.:-0.66913   1st Qu.:-0.66913   1st Qu.: 20.00   1st Qu.:46.63   1st Qu.:-121.8   1st Qu.:2500  \n Mode  :character   Median : 62.00   Median :143.82   Median : 339.0   Mode  :character   Mode  :character   Median :221.0   Mode  :character   Median :175.0   Median : 0.00000   Median : 0.00000   Median : 35.00   Median :47.70   Median :-121.2   Median :3500  \n                    Mean   : 58.68   Mean   :163.59   Mean   : 377.6                                         Mean   :255.8                      Mean   :171.4   Mean   : 0.04234   Mean   :-0.01066   Mean   : 36.89   Mean   :47.53   Mean   :-120.9   Mean   :3532  \n                    3rd Qu.: 80.00   3rd Qu.:238.98   3rd Qu.: 535.0                                         3rd Qu.:270.0                      3rd Qu.:262.0   3rd Qu.: 0.78801   3rd Qu.: 0.66913   3rd Qu.: 55.00   3rd Qu.:48.46   3rd Qu.:-120.4   3rd Qu.:4500  \n                    Max.   :100.00   Max.   :665.73   Max.   :1467.0                                         Max.   :999.0                      Max.   :360.0   Max.   : 1.00000   Max.   : 1.00000   Max.   :150.00   Max.   :49.00   Max.   :-117.3   Max.   :7500  \n\n\n\npreds &lt;- preds %&gt;% mutate(slope_deg = (atan(SLOPE) * (180/pi)))",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#ba-wider",
    "href": "3_RandomForests_Prep.html#ba-wider",
    "title": "3 RF Prep",
    "section": "BA wider",
    "text": "BA wider\n\nba_wide &lt;- ba_trees |&gt; select(-n) |&gt; pivot_wider(names_from = SYMBL, \n                 values_from = BA,\n                 values_fill = 0,\n                 names_glue = \"{SYMBL}_{'BA'}\") \n\nba_wide %&gt;% head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPLT_CN\nEcoRegion\nABGR_BA\nLAOC_BA\nPIPO_BA\nPSME_BA\nABAM_BA\nLALY_BA\nPIAL_BA\nTSME_BA\nPICO_BA\nABLA_BA\nPIEN_BA\nALRU2_BA\nACMA3_BA\nABPR_BA\nTSHE_BA\nTHPL_BA\nPIMO3_BA\nTABR2_BA\nCHNO_BA\nPOBAT_BA\nBEPA_BA\nPREM_BA\nCONU4_BA\n2TE_BA\nACGL_BA\nPOTR5_BA\nFRLA_BA\n2TB_BA\nALRH2_BA\nARME_BA\nMAFU_BA\nPRVI_BA\n2TREE_BA\nPISI_BA\nBEOC2_BA\nQUGA4_BA\nABCO_BA\nJUHI_BA\nSESE3_BA\nPRAV_BA\nSEGI2_BA\n\n\n\n\n12964130010497\nM242C\n183.4205\n5.518521\n95.767550\n4.426414\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497\nM242D\n0.0000\n0.000000\n29.042504\n34.198633\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497\nM242D\n0.0000\n0.000000\n9.882907\n151.221983\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497\nM242D\n0.0000\n0.000000\n44.196377\n77.769616\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497\nM242D\n0.0000\n0.000000\n0.000000\n2.778090\n4.053569\n3.822171\n83.6404\n54.52059\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965856010497\nM242D\n0.0000\n0.000000\n74.515032\n109.790670\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nba_wide &lt;- left_join(ba_wide, y, join_by(PLT_CN, EcoRegion))\nba_wide &lt;- ba_wide |&gt; relocate(EcoRegion, .after = PLT_CN)\n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPLT_CN\nEcoRegion\nABGR_BA\nLAOC_BA\nPIPO_BA\nPSME_BA\nABAM_BA\nLALY_BA\nPIAL_BA\nTSME_BA\nPICO_BA\nABLA_BA\nPIEN_BA\nALRU2_BA\nACMA3_BA\nABPR_BA\nTSHE_BA\nTHPL_BA\nPIMO3_BA\nTABR2_BA\nCHNO_BA\nPOBAT_BA\nBEPA_BA\nPREM_BA\nCONU4_BA\n2TE_BA\nACGL_BA\nPOTR5_BA\nFRLA_BA\n2TB_BA\nALRH2_BA\nARME_BA\nMAFU_BA\nPRVI_BA\n2TREE_BA\nPISI_BA\nBEOC2_BA\nQUGA4_BA\nABCO_BA\nJUHI_BA\nSESE3_BA\nPRAV_BA\nSEGI2_BA\n\n\n\n\n12964130010497\nM242C\n183.4205\n5.518521\n95.767550\n4.426414\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497\nM242D\n0.0000\n0.000000\n29.042504\n34.198633\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497\nM242D\n0.0000\n0.000000\n9.882907\n151.221983\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497\nM242D\n0.0000\n0.000000\n44.196377\n77.769616\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497\nM242D\n0.0000\n0.000000\n0.000000\n2.778090\n4.053569\n3.822171\n83.6404\n54.52059\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965856010497\nM242D\n0.0000\n0.000000\n74.515032\n109.790670\n0.000000\n0.000000\n0.0000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nba_wide &lt;- left_join(ba_wide, preds, join_by(PLT_CN, EcoRegion)) |&gt; \n  relocate(PLT_CN, CC, SDI, HABTYPCD = FPAG, EcoRegion, ECOSUBCD, LAT, LON, ELEV, ASPECT, Northing, Easting, SLOPE, \n           slope_deg, BA, FLDTYPCD, FVS_Variant)\n\nba_wide |&gt; names() %&gt;% cat()\n\nPLT_CN CC SDI HABTYPCD EcoRegion ECOSUBCD LAT LON ELEV ASPECT Northing Easting SLOPE slope_deg BA FLDTYPCD FVS_Variant ABGR_BA LAOC_BA PIPO_BA PSME_BA ABAM_BA LALY_BA PIAL_BA TSME_BA PICO_BA ABLA_BA PIEN_BA ALRU2_BA ACMA3_BA ABPR_BA TSHE_BA THPL_BA PIMO3_BA TABR2_BA CHNO_BA POBAT_BA BEPA_BA PREM_BA CONU4_BA 2TE_BA ACGL_BA POTR5_BA FRLA_BA 2TB_BA ALRH2_BA ARME_BA MAFU_BA PRVI_BA 2TREE_BA PISI_BA BEOC2_BA QUGA4_BA ABCO_BA JUHI_BA SESE3_BA PRAV_BA SEGI2_BA\n\n\n\nba_wide |&gt; nrow()\n\n[1] 4047",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#add-plants",
    "href": "3_RandomForests_Prep.html#add-plants",
    "title": "3 RF Prep",
    "section": "Add Plants",
    "text": "Add Plants\n\nba_spp &lt;- imp_data %&gt;% select(contains(\"BA\")) %&gt;% names() \ntd_spp &lt;- imp_data %&gt;% select(contains(\"TD\")) %&gt;% names()\n\nspp_list &lt;- append(ba_spp, td_spp) %&gt;% str_remove(\"_TD\") %&gt;% str_remove(\"_BA\") %&gt;% unique()\nspp_list &lt;- spp_list[spp_list != \"BAp\"] %&gt;% sort()\n\nplants_ref &lt;- plants_ref |&gt; select(SYMBL, SPCD, COMMON_NAME, SPGRPCD)\n\nplants_ref &lt;- plants_ref %&gt;% filter(SYMBL %in% spp_list)\n\n\n# con &lt;- dbConnect(RSQLite::SQLite(), db_path)\n# dbWriteTable(con, value = plants_ref, name = \"plants_ref\", overwrite=T)\n# dbDisconnect(con)",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#add-econames",
    "href": "3_RandomForests_Prep.html#add-econames",
    "title": "3 RF Prep",
    "section": "Add Econames",
    "text": "Add Econames\n\neco_names &lt;- tribble(~Eco3, ~ECO_NAME, ~eco_code, \n        \"242A\",  \"Puget Tr.\",    \"PT\", \n        \"342I\",  \"Columbia B.\",  \"CB\",\n        \"M242B\", \"W.Cascades\",   \"WC\",\n        \"M242C\", \"E.Cascades\",   \"EC\",\n        \"M242D\", \"N.Cascades\",   \"NC\",\n        \"M333A\", \"Ok. High\",      \"OH\")\n\n\n# con &lt;- dbConnect(RSQLite::SQLite(), db_path)\n# dbWriteTable(con, value = eco_names, name = \"eco_names\", overwrite=T)\n# dbDisconnect(con)",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#max_spp",
    "href": "3_RandomForests_Prep.html#max_spp",
    "title": "3 RF Prep",
    "section": "Max_spp",
    "text": "Max_spp\n\n# Function for finding the nth most prevalent species by TD.\n## Where b is the sorted list of all species by TD. \nn_largest &lt;- function(x = b, n) {\n  \n  # In descending order, prevelance\n  x1 &lt;- sort(x, decreasing = TRUE)\n  # Select the nth most prevelant. \n  x1[n]\n}\n\ny_resp &lt;- imp_data %&gt;% select(PLT_CN, EcoRegion, contains(\"TD\"))\nx_pred &lt;- imp_data %&gt;% select(!contains(\"TD\"))\n\ny &lt;- y_resp |&gt; select(-PLT_CN, -EcoRegion)\nb &lt;- names(y)\n\n# For the i through nth most trees in each subplot\nfor (i in 1:3) {\n    # set the new column name to largest_n\n    c_value &lt;- str_c(\"largest_\", i)\n    \n    # For each subplot the largest_n is the nth place in a descending list by TD unless all are zero. \n    y &lt;- y %&gt;%\n      rowwise() %&gt;%\n      mutate(!!c_value := n_largest(c_across(all_of(b)), i)) |&gt;\n      ungroup()\n}\n\n\n\n# The name of the species with the largest TD is the column name where the TD matches the largest_n\ny$max_spp1 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_1[x])][1])\ny$max_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][1])\n# The largest is always the largest or zero, but the second sometimes matches the first where either are zero or equal. \n# The alternate second and third replace the incorrect species names with the second name in the list.\n# So, where spp1 and spp2 are both 75, spp1 is the first name in the list, and spp2 is the second name in the list. \ny$alt_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][2])\ny$max_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][1])\ny$alt_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][2])\n\n\n# Replace the species names where they are equal with the alternates\ny &lt;- y |&gt; mutate(\n  max_spp2 = if_else(largest_1 == largest_2, alt_spp2, max_spp2),\n  max_spp3 = if_else(largest_2 == largest_3, alt_spp3, max_spp3)\n  ) |&gt; select(-c(alt_spp2, alt_spp3))#, alt_spp3\n\n# Set the species names to zero if there were no trees counted for that nth largest. \nyfull &lt;- y |&gt; mutate(\n  max_spp1 = ifelse(largest_1 == 0, \"zero\", max_spp1),\n  max_spp2 = ifelse(largest_2 == 0, \"zero\", max_spp2),\n  max_spp3 = ifelse(largest_3 == 0, \"zero\", max_spp3)\n  )\n# Replace the CNs\n\n\n# Put it back in front\nyfull$PLT_CN &lt;- y_resp$PLT_CN \nyfull &lt;- yfull |&gt; relocate(PLT_CN)\n\n# Look at one full example\n# yfull |&gt; filter(STANDPLOT_CN == \"22954484010497_4\") \n# Look at some examples of the results. \nyfull[4:8, 36:ncol(yfull)]\n\n\nyfull &lt;- yfull |&gt; mutate(\n  total_TD = rowSums(yfull[grep(\"_TD\", names(yfull))])\n)\n\nimp_data_fixed &lt;- left_join(x_pred, yfull, join_by(PLT_CN))\n\n\nimp_data &lt;- left_join(standlist, imp_data, join_by(PLT_CN))\n\n\n# con &lt;- dbConnect(RSQLite::SQLite(), db_path)\n# dbWriteTable(con, value = imp_data, name = \"imp_data\", overwrite=T)\n# dbDisconnect(con)",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#add-eco_code",
    "href": "3_RandomForests_Prep.html#add-eco_code",
    "title": "3 RF Prep",
    "section": "Add eco_code",
    "text": "Add eco_code\n\nimp_data_fixed &lt;- left_join(imp_data, eco_names, join_by(EcoRegion == Eco3)) %&gt;% \n  relocate(TRAIN, EcoRegion, ECO_NAME, eco_code, .after = PLT_CN)\n\n\n# con &lt;- dbConnect(RSQLite::SQLite(), db_path)\n# dbWriteTable(con, value = imp_data_fixed, name = \"imp_data\", overwrite=T)\n# dbDisconnect(con)",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#plots-cc-others",
    "href": "3_RandomForests_Prep.html#plots-cc-others",
    "title": "3 RF Prep",
    "section": "Plots, CC & others",
    "text": "Plots, CC & others\n\nCode\nt &lt;- imp_data |&gt; select_if(is.numeric)\nt &lt;- t |&gt; select(-c(LAT,LON))\n# names(t)\n\n\nfor(i in names(t[,1:6])) {\n  # print(mean(t[[i]]))\n  hist(\n    t[[i]], \n    main = i, \n    xlab = i)\n} \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnames(t) %&gt;% cat()\n\nCC BA SDI FLDTYPCD ASPECT Northing Easting SLOPE ELEV slope_deg ABGR_BA LAOC_BA PIPO_BA PSME_BA ABAM_BA LALY_BA PIAL_BA TSME_BA PICO_BA ABLA_BA PIEN_BA ALRU2_BA ACMA3_BA ABPR_BA TSHE_BA THPL_BA PIMO3_BA TABR2_BA CHNO_BA POBAT_BA BEPA_BA PREM_BA CONU4_BA 2TE_BA ACGL_BA POTR5_BA FRLA_BA 2TB_BA ALRH2_BA ARME_BA MAFU_BA PRVI_BA 2TREE_BA PISI_BA BEOC2_BA QUGA4_BA ABCO_BA JUHI_BA SESE3_BA PRAV_BA SEGI2_BA ABAM_TD TSHE_TD ABLA_TD PSME_TD PICO_TD ABGR_TD TSME_TD PIEN_TD THPL_TD LAOC_TD PIPO_TD CHNO_TD ABPR_TD PIMO3_TD TABR2_TD POTR5_TD PREM_TD ACGL_TD PIAL_TD PRVI_TD QUGA4_TD ACMA3_TD ALRU2_TD LALY_TD MAFU_TD CONU4_TD BEPA_TD ABCO_TD POBAT_TD ALRH2_TD PISI_TD FRLA_TD CHLA_TD 2TB_TD PRPE2_TD BEOC2_TD JUNI_TD PSMA_TD ILOP_TD JUHI_TD PRAV_TD SEGI2_TD",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#plots-maj-species",
    "href": "3_RandomForests_Prep.html#plots-maj-species",
    "title": "3 RF Prep",
    "section": "Plots, Maj Species",
    "text": "Plots, Maj Species\n\nCode\nba_cols &lt;- imp_data %&gt;% select(contains(\"_BA\")) %&gt;% names()\n\nfor(i in names(t[,ba_cols])) {\n  # print(mean(t[[i]]))\n  hist(\n    t[[i]], \n    main = str_c(i), \n    xlab = i)\n  \n  hist(\n    log(t[[i]]), \n    main = str_c(\"log of \",i), \n    xlab = i)\n}",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "3_RandomForests_Prep.html#plots-maj-species-1",
    "href": "3_RandomForests_Prep.html#plots-maj-species-1",
    "title": "3 RF Prep",
    "section": "Plots, Maj Species",
    "text": "Plots, Maj Species\n\nCode\ntds_cols &lt;- imp_data %&gt;% select(contains(\"_TD\")) %&gt;% names()\n\nfor(i in names(t[,tds_cols])) {\n  # print(mean(t[[i]]))\n  hist(\n    t[[i]], \n    main = str_c(i), \n    xlab = i)\n  \n  hist(\n    log(t[[i]]), \n    main = str_c(\"log of \",i), \n    xlab = i)\n}",
    "crumbs": [
      "Data Prep",
      "3 RF Prep"
    ]
  },
  {
    "objectID": "15_Personal_Notes.html",
    "href": "15_Personal_Notes.html",
    "title": "Personal Notes",
    "section": "",
    "text": "Libraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \n# library(randomForest)                 # RF package that yaImpute uses\n# library(yaImpute)                     # RF imputation\n# library(vegan)                        # Something to do the yaImpute\n\n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n# library(stars)\n# library(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nrmsd_spp &lt;-spprmsd_spp &lt;- function(imp_df, spp) {\n  \n  rmsd_t &lt;- imp_df %&gt;% drop_na() %&gt;% select(contains(spp)) %&gt;% select(contains(\"TD\"))\n  \n  v1 &lt;- rmsd_t %&gt;% select(ends_with(\"TD\")) %&gt;% names()\n  v2 &lt;- rmsd_t %&gt;% select(ends_with(\".o\")) %&gt;% names()\n  \n  rmsd_t &lt;- rmsd_t %&gt;% mutate(sq_dev = (rmsd_t[,v1] - rmsd_t[,v2])^2) \n  \n  return(sqrt(mean(rmsd_t$sq_dev)))\n}\n\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\", \"rmsd_spp\") %&gt;% unique()\n\n\n\nCreated on\n\n\n[1] \"2024-10-01 12:11:18 PDT\"\n\n\nLast updated on\n\n\n[1] \"2024-10-09 14:00:24 PDT\"\n\n\n\n\nStart\nThis is a link to the quarto/knitr execution option:\nhttps://quarto.org/docs/computations/execution-options.html#knitr-options\nThis has information on how to set options globally for the whole site. i.g. output width and sci-pen.\n\n\nEnd",
    "crumbs": [
      "Other",
      "Personal Notes"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html",
    "href": "13_Stem_exclusion.html",
    "title": "Stem Exclusion",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \nlibrary(foreign)                      # Write dbf\n                                                   \n# yaImpute and related                           \n# library(yaImpute)                     # RF imputation     \n# library(vegan)                        # Something to do the yaImpute \n# library(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                      \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n# No sci-notation. \noptions(scipen = 999)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"db_list\", \"add_commas\")\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nadd_commas &lt;- function(n) {\n  t &lt;- prettyNum(n, \",\",scientific=FALSE)\n  return(noquote(t))\n}\nCreated on\n[1] \"2024-10-01 10:37:54 PDT\"\nLast updated on\n[1] \"2024-10-09 14:00:03 PDT\"\nImport imp_data from RF Prep DB\nCode\ncon &lt;- dbConnect(RSQLite::SQLite(), \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/homemade_fvs_db_17sept24.db\")\nplants_ref &lt;- dbGetQuery(con, str_c(\"select * from plants_ref\"))\n# seedlings &lt;- dbGetQuery(con, str_c(\"select * from seedling where PLT_CN in (\", cns, \")\"))\ndbDisconnect(con)\nImport Structural Statistics table from FVS output\nCode\noutputDatabase &lt;- \"C:/RxFire/Regen/FVS/regen_091724_2118/regen_091724_2118.db\"\n\n\ncon &lt;- dbConnect(RSQLite::SQLite(), outputDatabase)\n\nkey &lt;- dbGetQuery(con, \"select CaseID, StandID, Variant from FVS_Cases\")\ncc &lt;- dbGetQuery(con, \"select CaseID, Year, CC from FVS_Compute\")\nba_sdi &lt;- dbGetQuery(con, \"select CaseID, Year, BA, SDI from FVS_Summary2\")\nstem &lt;- dbGetQuery(con, \"select CaseID, Year, Structure_Class from FVS_StrClass where Removal_Code == 0 \")\n\ndbDisconnect(con)\n\nxVars &lt;- left_join(key, cc, join_by(CaseID))\nxVars &lt;- left_join(xVars, ba_sdi, join_by(CaseID, Year))\nxVars &lt;- left_join(xVars, stem, join_by(CaseID, Year))\n\n\nkeep &lt;- append(keep, c(\"xVars\", \"standlist\", \"plants_ref\"))\nCreating a tag for stem exclusion mapping\nCode\nstem_ex_points &lt;- xVars %&gt;% select(-CaseID) %&gt;%\n  mutate(\n    PLT_CN = str_sub(StandID, 1, -3),\n    SUBP = str_sub(StandID, -1, -1)\n    ) %&gt;% relocate(PLT_CN, SUBP)\n# stem_ex_points %&gt;% head()\n\ncns &lt;- stem_ex_points %&gt;% select(PLT_CN) %&gt;% unique()\n\ncns &lt;- db_list(cns, PLT_CN)\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"c:/RxFire/Data/_FIADB_WA.db\")\npoints &lt;- dbGetQuery(con, str_c(\"select CN, Lat, Lon from PLOT where CN in (\", cns, \")\"))\ndbDisconnect(con)\npoints &lt;- points %&gt;% rename(PLT_CN = CN)\n# points\n\npoints$PLT_CN &lt;- as.character(points$PLT_CN)\n\nstem_ex_points$PLT_CN &lt;- as.character(stem_ex_points$PLT_CN)\n\nstem_ex_points &lt;- stem_ex_points %&gt;% mutate(\n  s_class = str_sub(Structure_Class, -2,-1)\n) %&gt;% select(-Structure_Class)\n\nt &lt;- left_join(points, stem_ex_points, join_by(PLT_CN))\n \n# write.dbf(t, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/1_ImpClean_CNs_StemExclusion_tracking_filters.dbf\")\nCreating structure class code that is more tidy\nCode\nstem &lt;- xVars |&gt; select(-CaseID)\n\nstem &lt;- stem |&gt; mutate(\n  s_class = str_sub(Structure_Class, -2,-1)\n)\n\nstem &lt;- stem |&gt; filter(!is.na(Year))\n\nstem &lt;- stem |&gt; filter(!is.na(s_class)) |&gt; select(-Structure_Class)\n\n# nrow(stem)/nrow(stem_ex)",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#with-and-without-regen-nplots",
    "href": "13_Stem_exclusion.html#with-and-without-regen-nplots",
    "title": "Stem Exclusion",
    "section": "With and without regen nplots",
    "text": "With and without regen nplots\nPulling CNs of subplots tagged SE and not\n\n\nCode\nCNs_w_regen &lt;- stem_ex_seedlings %&gt;% group_by(standplot_cn) %&gt;% \n  summarise(\n    .groups = \"drop\", \n    n = n(), \n    TPA = round(sum(TPA_UNADJ))\n    # spcd = SPCD\n    ) %&gt;% arrange(desc(TPA))\n\nCNs_wo_regen &lt;- not_stem_ex_seedlings %&gt;% group_by(standplot_cn) %&gt;% \n  summarise(\n    .groups = \"drop\", \n    n = n(), \n    TPA = round(sum(TPA_UNADJ))\n    # spcd = SPCD\n    ) %&gt;% arrange(desc(TPA))\n\n# CNs_wo_regen %&gt;% head()\n# CNs_w_regen %&gt;% head()",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#zero-regen",
    "href": "13_Stem_exclusion.html#zero-regen",
    "title": "Stem Exclusion",
    "section": "Zero regen",
    "text": "Zero regen\nFinding subplots where total_TD == 0\n\n\nCode\ncon &lt;- dbConnect(RSQLite::SQLite(), \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/homemade_fvs_db_17sept24.db\")\nimp_data &lt;- dbGetQuery(con, \"select * from imp_data\")\ndbDisconnect(con)\n\nimp_data %&gt;% filter(total_TD == 0) %&gt;% head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nSTAND_CN\nTRAIN\nEcoRegion\nECO_NAME\neco_code\nCC\nBAp\nSDI\nFPAG\nLAT\nLON\nELEV\nNorthing\nEasting\nSLOPE\nPIPO_BA\nPSME_BA\nABAM_BA\nTSME_BA\nABGR_BA\nPICO_BA\nLALY_BA\nPIAL_BA\nPIEN_BA\nABLA_BA\nALRU2_BA\nTSHE_BA\nABPR_BA\nLAOC_BA\nTHPL_BA\nTABR2_BA\nCHNO_BA\nPOBAT_BA\nBEPA_BA\nPREM_BA\nCONU4_BA\nPOTR5_BA\nPIMO3_BA\nACGL_BA\nFRLA_BA\nACMA3_BA\nMAFU_BA\nPRVI_BA\n2TREE_BA\nALRH2_BA\nQUGA4_BA\nPISI_BA\nABCO_BA\nJUHI_BA\nARME_BA\nSESE3_BA\nBEOC2_BA\nPRAV_BA\nPIPO_TD\nABLA_TD\nTSME_TD\nPSME_TD\nABGR_TD\nLALY_TD\nPIEN_TD\nPICO_TD\nLAOC_TD\nACGL_TD\nTABR2_TD\nCHNO_TD\nABAM_TD\nTHPL_TD\nTSHE_TD\nBEPA_TD\nPREM_TD\nALRU2_TD\nPOTR5_TD\nPIAL_TD\nABPR_TD\nPIMO3_TD\nACMA3_TD\nPRVI_TD\n2TB_TD\nCONU4_TD\nQUGA4_TD\nMAFU_TD\nABCO_TD\nFRLA_TD\nPSMA_TD\nPOBAT_TD\nALRH2_TD\nILOP_TD\nBEOC2_TD\nPRPE2_TD\nPISI_TD\nCHLA_TD\nPRAV_TD\nlargest_1\nlargest_2\nlargest_3\nmax_spp1\nmax_spp2\nmax_spp3\ntotal_TD\n\n\n\n\n12964449010497_1\n12964449010497\n1\nM242D\nN.Cascades\nNC\n13\n35.052090\n49\nCDS6\n47.41590\n-120.6538\n3300\n-0.9961947\n0.0871557\n72\n25.694288\n9.356814\n0\n0\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nzero\nzero\nzero\n0\n\n\n12964449010497_3\n12964449010497\n1\nM242D\nN.Cascades\nNC\n4\n5.396815\n10\nCDS6\n47.41590\n-120.6538\n3300\n-0.9876883\n0.1564345\n62\n3.348215\n2.048447\n0\n0\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nzero\nzero\nzero\n0\n\n\n12964449010497_4\n12964449010497\n1\nM242D\nN.Cascades\nNC\n10\n18.791683\n31\nCDS6\n47.41590\n-120.6538\n3300\n0.3420201\n0.9396926\n76\n0.000000\n18.791151\n0\n0\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nzero\nzero\nzero\n0\n\n\n12964657010497_1\n12964657010497\n1\nM242D\nN.Cascades\nNC\n22\n36.032566\n69\nCDS6\n47.40076\n-120.4951\n2300\n0.9986295\n-0.0523360\n58\n0.000000\n29.532336\n0\n0\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nzero\nzero\nzero\n0\n\n\n12969073010497_3\n12969073010497\n1\nM242D\nN.Cascades\nNC\n15\n26.881340\n52\nCES4\n48.09092\n-120.2393\n5500\n0.7431448\n-0.6691306\n45\n0.000000\n4.788463\n0\n0\n0\n22.09212\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nzero\nzero\nzero\n0\n\n\n12969073010497_4\n12969073010497\n1\nM242D\nN.Cascades\nNC\n13\n26.851990\n48\nCES4\n48.09092\n-120.2393\n5500\n0.4226183\n-0.9063078\n47\n0.000000\n2.524044\n0\n0\n0\n18.78165\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nzero\nzero\nzero\n0\n\n\n\n\n\n\nGet species list and see nrow for subplot, species summary\n\n\nCode\nspp &lt;- unique(stem_ex_seedlings$SYMBL)\nstem_ex_seedlings %&gt;% nrow()\n\n\n[1] 3898\n\n\nPlotting histograms of species both tagged as SE and not side-by-side\n\nCode\nfor(i in 1:21) {\n  p &lt;- stem_ex_seedlings %&gt;% filter(SYMBL == spp[i]) %&gt;% ggplot() + \n    aes(x = TPA_UNADJ) + \n    geom_histogram(bins = 30) + \n    labs(title = str_c(\"Species in Stem Exclusion: \", spp[i])) + \n    ylab(\"Number of plots\") + \n    xlab(\"Seedling TPA\")\n  \n  print(p)\n  \n  p &lt;- not_stem_ex_seedlings %&gt;% filter(SYMBL == spp[i]) %&gt;% ggplot() + \n    aes(x = TPA_UNADJ) + \n    geom_histogram(bins = 30) + \n    labs(title = str_c(\"Species NOT in Stem Exclusion: \", spp[i])) + \n    ylab(\"Number of plots\") + \n    xlab(\"Seedling TPA\")\n  \n  print(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere were more seedling species, but they get down to ones and twos after this.",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#tracking-filter",
    "href": "13_Stem_exclusion.html#tracking-filter",
    "title": "Stem Exclusion",
    "section": "Tracking Filter",
    "text": "Tracking Filter\nThis is essentially scratch. I used the 53,000 subplots/conditions list that I made while adding filtering tags to pull all non-periodic plots from FIA. Those CNs were used to create ArcPro feature classes to display the data. For each of the pre-FVS filtering steps, I extracted the Plt_CN and location, then wrote it to a dbf and added it to the map.\n\n\nCode\ntracking &lt;- read_csv(\"C:/RxFire/Regen/Regeneration_2_16Sept24/data/1_ImpClean_CNs_subp_tracking_filters.csv\", \n                     show_col_types = F)\n\ntracking %&gt;% nrow()\n\n\n[1] 53520\n\n\n\n\nCode\ntracking %&gt;% head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPLT_CN\nSUBP\nPeriodic\nSingle_cond\nForested\nDistcd_30\nDistcd_31\nDistcd_32\nNoFPAG\nTRTCD_30\nSub_mic_cond_equal\nSub_mic_prop_equal\nFPAG_ANW\nFPAG_PIAL\n\n\n\n\n40403474010497\n1\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nTRUE\n\n\n40403474010497\n2\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nTRUE\n\n\n40403474010497\n3\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nTRUE\n\n\n40403474010497\n4\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nTRUE\n\n\n12964130010497\n1\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\n\n\n12964130010497\n2\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\n\n\n\n\n\n\n\n\nCode\ntracking_plots &lt;- tracking %&gt;% select(-SUBP) %&gt;% unique()\ntracking_plots %&gt;% nrow()\n\n\n[1] 15935\n\n\nThere were 15,935 unique combinations of PLT_CN and filtering criteria.\n\n\nCode\ntracking_plots %&gt;% head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPLT_CN\nPeriodic\nSingle_cond\nForested\nDistcd_30\nDistcd_31\nDistcd_32\nNoFPAG\nTRTCD_30\nSub_mic_cond_equal\nSub_mic_prop_equal\nFPAG_ANW\nFPAG_PIAL\n\n\n\n\n40403474010497\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nTRUE\n\n\n12964130010497\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\n\n\n12964449010497\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\n\n\n12964657010497\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\nFALSE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\n\n\n12964991010497\nFALSE\nTRUE\nTRUE\nTRUE\nTRUE\nTRUE\nFALSE\nFALSE\nTRUE\nTRUE\nFALSE\nFALSE\n\n\n12965155010497\nFALSE\nFALSE\nTRUE\nTRUE\nTRUE\nTRUE\nTRUE\nFALSE\nTRUE\nFALSE\nFALSE\nFALSE\n\n\n\n\n\n\n\n\nCode\nn_distinct(tracking_plots$PLT_CN)\n\n\n[1] 13380\n\n\nOf the ~16k combinations, there were 13,380 unique PLT_CNs.\nAll 13,380 plots that are not periodic\n\n\nCode\ncns &lt;- tracking_plots %&gt;% select(PLT_CN) %&gt;% unique()\n\ncns &lt;- db_list(cns, PLT_CN)\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"c:/RxFire/Data/_FIADB_WA.db\")\npoints &lt;- dbGetQuery(con, str_c(\"select CN, Lat, Lon from PLOT where CN in (\", cns, \")\"))\ndbDisconnect(con)\n\npoints %&gt;% head()\n\n\n\n\n\n\nCN\nLAT\nLON\n\n\n\n\n12964130010497\n47.26911\n-120.2977\n\n\n12964449010497\n47.41590\n-120.6538\n\n\n12964657010497\n47.40076\n-120.4951\n\n\n12964975010497\n47.56052\n-120.8615\n\n\n12964991010497\n47.54505\n-120.4936\n\n\n12965155010497\n47.56636\n-120.6568",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#all-plots",
    "href": "13_Stem_exclusion.html#all-plots",
    "title": "Stem Exclusion",
    "section": "All plots",
    "text": "All plots\nWrite all points to dbf\n\n\nCode\ntracking_plots$PLT_CN &lt;- as.character(tracking_plots$PLT_CN)\npoints$CN &lt;- as.character(points$CN)\nt &lt;- left_join(points, tracking_plots, join_by(CN == PLT_CN))\n\n# write.dbf(t, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/1_ImpClean_CNs_subp_tracking_filters.dbf\")\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"c:/RxFire/Data/_FIADB_WA.db\")\npoints &lt;- dbGetQuery(con, str_c(\"select CN, Lat, Lon from PLOT\"))\ndbDisconnect(con)\n\npoints &lt;- points %&gt;% unique()\n\n# write.dbf(points, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_WA_30Sept24.dbf\")\n\n\nFind and write all points not in the 13k to find periodic plots\n\n\nCode\ntest &lt;- anti_join(points, tracking_plots, join_by(CN == PLT_CN))\n\ntest %&gt;% arrange(nchar(CN)) %&gt;% head()\n\n\n\n\n\n\nCN\nLAT\nLON\n\n\n\n\n24352\n45.70541\n-121.0679\n\n\n24354\n45.64929\n-121.1151\n\n\n24355\n47.91016\n-118.5972\n\n\n24357\n47.85655\n-118.2008\n\n\n24359\n47.85683\n-118.3094\n\n\n24360\n47.86439\n-118.4609\n\n\n\n\n\n\nCode\ntest &lt;- test %&gt;% drop_na()\n\n# test %&gt;% filter(CN == \"17959\")\n\n# write.dbf(test, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_Periodic_30Sept24.dbf\")\n\n\nThere are two ways that I use to find the periodic plots, the better way would have been to use design code. In the moment, I used the length of the PLT_CN. Short PLT_CNs are periodic, in my experience. I used design code when I filtered the tracking plots to find the ~13k. The plots from FIA that were not in that list are listed above, but arranged by the length of PLT_CN.",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#fire",
    "href": "13_Stem_exclusion.html#fire",
    "title": "Stem Exclusion",
    "section": "Fire",
    "text": "Fire\nThese all follow the same patter, find the plots with the titled filtering criteria, then write a .dbf.\nDistcds are 30, 31, or 32\n\n\nCode\ncns &lt;- tracking_plots %&gt;% filter(Distcd_30 == T | Distcd_31 == T | Distcd_32 == T) %&gt;% select(PLT_CN)\n\ncns &lt;- db_list(cns, PLT_CN)\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"c:/RxFire/Data/_FIADB_WA.db\")\ndist &lt;- dbGetQuery(con, str_c(\"select PLT_CN, DSTRBCD1, DSTRBCD2, DSTRBCD3 from COND where PLT_CN in (\", cns, \")\"))\ndbDisconnect(con)\n\n# dist %&gt;% group_by(PLT_CN) %&gt;% \n#   summarise(\n#     n = n()\n#   ) %&gt;% \n#   arrange(desc(n))\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"c:/RxFire/Data/_FIADB_WA.db\")\ndistcd &lt;- dbGetQuery(con, str_c(\"select PLT_CN, DSTRBCD1, DSTRBCD2, DSTRBCD3 from COND\"))\nplot &lt;- dbGetQuery(con, str_c(\"select CN, LAT, LON from PLOT\"))\ndbDisconnect(con)\n\ndist &lt;- left_join(plot, distcd, join_by(CN == PLT_CN)) %&gt;% drop_na()\n\ndist_0 &lt;- dist %&gt;% filter(DSTRBCD1 == 30 | DSTRBCD2 == 30 | DSTRBCD3 == 30)\ndist_1 &lt;- dist %&gt;% filter(DSTRBCD1 == 31 | DSTRBCD2 == 31 | DSTRBCD3 == 31)\ndist_2 &lt;- dist %&gt;% filter(DSTRBCD1 == 32 | DSTRBCD2 == 32 | DSTRBCD3 == 32)\n\nd &lt;- add_row(dist_0, dist_1)\nd &lt;- add_row(d, dist_2)\nd &lt;- d %&gt;% unique()\n\n# write.dbf(d, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_Fire_30Sept24.dbf\")",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#forest",
    "href": "13_Stem_exclusion.html#forest",
    "title": "Stem Exclusion",
    "section": "Forest",
    "text": "Forest\nfilter(FORTYPCD &gt; 0)\n\n\nCode\ncon &lt;- dbConnect(RSQLite::SQLite(), \"c:/RxFire/Data/_FIADB_WA.db\")\ncond &lt;- dbGetQuery(con, str_c(\"select * from COND\"))\nplot &lt;- dbGetQuery(con, str_c(\"select * from PLOT\"))\ndbDisconnect(con)\n\nplot_j &lt;-plot %&gt;% select(PLT_CN = CN, LAT, LON) %&gt;% unique()\n\nforest &lt;- cond %&gt;% filter(FORTYPCD &gt; 0) %&gt;% select(PLT_CN)\n\n\nft &lt;- left_join(forest, plot_j, join_by(PLT_CN)) %&gt;% drop_na()\n\n# write.dbf(ft, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_Forest_30Sept24.dbf\")",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#single-cond",
    "href": "13_Stem_exclusion.html#single-cond",
    "title": "Stem Exclusion",
    "section": "Single cond",
    "text": "Single cond\nfilter(CONDPROP_UNADJ == 1)\n\n\nCode\nsingle &lt;- cond %&gt;% filter(CONDPROP_UNADJ == 1) %&gt;% select(PLT_CN)\n\nt &lt;- left_join(single, plot_j, join_by(PLT_CN)) %&gt;% drop_na()\n\n# write.dbf(t, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_SingleCond_30Sept24.dbf\")",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#nofpag",
    "href": "13_Stem_exclusion.html#nofpag",
    "title": "Stem Exclusion",
    "section": "NoFPAG",
    "text": "NoFPAG\nfilter(is.na(HABTYPCD1))\n\n\nCode\nnofpag &lt;- cond %&gt;% filter(is.na(HABTYPCD1)) %&gt;% select(PLT_CN, HABTYPCD1) %&gt;% unique()\nt &lt;- left_join(nofpag, plot_j, join_by(PLT_CN))\n\n# write.dbf(t, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_nofpag_30Sept24.dbf\")",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#trtcd",
    "href": "13_Stem_exclusion.html#trtcd",
    "title": "Stem Exclusion",
    "section": "TRTcd",
    "text": "TRTcd\nTRTCDs = 30\n\n\nCode\n# names(cond) %&gt;% sort()\n\ntrt &lt;- cond %&gt;% filter(TRTCD1 == 30 | TRTCD2 == 30 | TRTCD3 == 30) %&gt;% select(PLT_CN, contains(\"TRTCD\")) %&gt;% unique()\ntrt &lt;- trt[,1:4]\nt &lt;- left_join(trt, plot_j, join_by(PLT_CN)) %&gt;% drop_na()\n\n# write.dbf(t, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_trtcd_30Sept24.dbf\")",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#fpag_anw",
    "href": "13_Stem_exclusion.html#fpag_anw",
    "title": "Stem Exclusion",
    "section": "FPAG_ANW",
    "text": "FPAG_ANW\nFPAG starts with A, N, or W\n\n\nCode\n# names(cond) %&gt;% sort()\n\nfpagA &lt;- cond %&gt;% filter(startsWith(HABTYPCD1, \"A\")) %&gt;% select(PLT_CN, HABTYPCD1) %&gt;% unique()\nfpagN &lt;- cond %&gt;% filter(startsWith(HABTYPCD1, \"N\")) %&gt;% select(PLT_CN, HABTYPCD1) %&gt;% unique()\nfpagW &lt;- cond %&gt;% filter(startsWith(HABTYPCD1, \"W\")) %&gt;% select(PLT_CN, HABTYPCD1) %&gt;% unique()\n\nfpagANW &lt;- add_row(fpagA, fpagN)\nfpagANW &lt;- add_row(fpagANW, fpagW)\n\nt &lt;- left_join(fpagANW, plot_j, join_by(PLT_CN)) %&gt;% drop_na()\n\n# write.dbf(t, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_fpagANW_30Sept24.dbf\")",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "13_Stem_exclusion.html#fpag_pial",
    "href": "13_Stem_exclusion.html#fpag_pial",
    "title": "Stem Exclusion",
    "section": "FPAG_Pial",
    "text": "FPAG_Pial\nfilter(HABTYPCD1 == “PIAL”)\n\n\nCode\n# names(cond) %&gt;% sort()\n\nfpagA &lt;- cond %&gt;% filter(HABTYPCD1 == \"PIAL\") %&gt;% select(PLT_CN, HABTYPCD1) %&gt;% unique()\n\n\nt &lt;- left_join(fpagA, plot_j, join_by(PLT_CN)) %&gt;% drop_na()\n\n# write.dbf(t, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/FIA_PLOTS_fpagPIAL_30Sept24.dbf\")",
    "crumbs": [
      "Plots",
      "Stem Exclusion"
    ]
  },
  {
    "objectID": "11_Heatmap.html",
    "href": "11_Heatmap.html",
    "title": "11- 1st Map",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(randomForest)                 # RF package that yaImpute uses\nlibrary(yaImpute)                     # RF imputation\nlibrary(vegan)                        # Something to do the yaImpute\n\n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n# library(stars)\nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\nlibrary(sf)                           # Simple Features/vector data\nlibrary(terra)                        # Raster functions\nlibrary(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\nCreated on\n[1] \"2024-09-06 14:25:31 PDT\"\nLast updated on\n[1] \"2024-10-09 13:59:44 PDT\"",
    "crumbs": [
      "Maps",
      "11- 1st Map"
    ]
  },
  {
    "objectID": "11_Heatmap.html#making-them-alike",
    "href": "11_Heatmap.html#making-them-alike",
    "title": "11- 1st Map",
    "section": "Making them alike",
    "text": "Making them alike\nI need plt_cn, species and tpa.\n\nagp_nc_seed_counts &lt;- agp_nc_seedlings %&gt;% group_by(PLT_CN, SPECIES_SYMBOL) %&gt;% \n  summarise(\n    .groups =  \"drop\", \n    # n = n(), \n    agp_sum_tpa = sum(TPA_UNADJ) %&gt;% round()\n  ) %&gt;% arrange(desc(agp_sum_tpa))\n\nagp_nc_seed_counts %&gt;% nrow()\n\n[1] 7534\n\nagp_nc_seed_counts %&gt;% head()\n\n\n\n\n\nPLT_CN\nSPECIES_SYMBOL\nagp_sum_tpa\n\n\n\n\n40220375010497\nTSHE\n38382\n\n\n30764972020004\nPIPO\n34184\n\n\n273642268489998\nTSHE\n30436\n\n\n188764567020004\nPICO\n25788\n\n\n174763863020004\nPICO\n22265\n\n\n30763617020004\nTSHE\n19191\n\n\n\n\n\n\n\nagp_nc_seed_counts &lt;- left_join(agp_nc_seed_counts, agp_nc_conds, join_by(PLT_CN))\nagp_nc_seed_counts %&gt;% nrow()\n\n[1] 7534\n\nagp_nc_seed_counts %&gt;% head()\n\n\n\n\n\nPLT_CN\nSPECIES_SYMBOL\nagp_sum_tpa\nFORTYPCD\nFLDTYPCD\n\n\n\n\n40220375010497\nTSHE\n38382\n301\n301\n\n\n30764972020004\nPIPO\n34184\n221\n221\n\n\n273642268489998\nTSHE\n30436\n301\n301\n\n\n188764567020004\nPICO\n25788\n281\n281\n\n\n174763863020004\nPICO\n22265\n281\n281\n\n\n30763617020004\nTSHE\n19191\n264\n264\n\n\n\n\n\n\n\nRF\n\nrf_imputation &lt;- rf_imputation %&gt;% mutate(PLT_CN = str_remove(STANDPLOT_CN, \"_.\")) %&gt;% relocate(PLT_CN)\ncns &lt;- rf_imputation %&gt;% select(PLT_CN) %&gt;% unique()\n\ncns &lt;- db_list(cns, PLT_CN)\n\ncon &lt;- dbConnect(RSQLite::SQLite(), clean_paths(r\"(C:\\RxFire\\Data\\SQLite_FIADB_ENTIRE.db)\"))\nrf_nc_conds &lt;- dbGetQuery(con, str_c(\"select PLT_CN, FORTYPCD, FLDTYPCD from COND where PLT_CN in (\", cns, \")\"))\ndbDisconnect(con)\n\n\nzt &lt;- rf_nc_conds %&gt;% mutate(\n  both_nas = ifelse(is.na(FORTYPCD) & is.na(FLDTYPCD), T, F),\n  either_nas = ifelse(is.na(FORTYPCD) | is.na(FLDTYPCD), T, F)\n)\n\nsum(zt$both_nas)\n\n[1] 0\n\nsum(zt$either_nas)\n\n[1] 0\n\nrf_nc_conds %&gt;% head()\n\n\n\n\n\nPLT_CN\nFORTYPCD\nFLDTYPCD\n\n\n\n\n22398239010497\n301\n264\n\n\n24150792010900\n264\n301\n\n\n24186703010900\n264\n264\n\n\n24185416010900\n301\n301\n\n\n22398320010497\n201\n201\n\n\n24186143010900\n304\n304\n\n\n\n\n\n\n\nrf_imputation &lt;- rf_imputation %&gt;% mutate(PLT_CN = str_remove(STANDPLOT_CN, \"_.\")) %&gt;% relocate(PLT_CN)\n\nrf_nc_seed_counts &lt;- rf_imputation %&gt;% \n  # select_if(is.numeric) %&gt;% \n  select(PLT_CN, ends_with(\"TD\")) %&gt;%\n  pivot_longer(cols = -c(PLT_CN), names_to = \"SPECIES_SYMBOL\", values_to = \"TPA\")\n\nrf_nc_seed_counts &lt;- rf_nc_seed_counts %&gt;% group_by(PLT_CN, SPECIES_SYMBOL) %&gt;% \n  summarise(\n    # n = n(), \n    imp_sum_tpa = sum(TPA) %&gt;% round(), \n    .groups = \"drop\"\n  ) %&gt;% \n  arrange(desc(imp_sum_tpa))\n\nrf_nc_seed_counts &lt;- rf_nc_seed_counts %&gt;% mutate(SPECIES_SYMBOL = str_remove(SPECIES_SYMBOL, \"_TD\"))\n\nrf_nc_seed_counts &lt;- left_join(rf_nc_seed_counts, rf_nc_conds, join_by(PLT_CN))\n\n\nrf_nc_seed_counts %&gt;% nrow()\n\n[1] 8679\n\nrf_nc_seed_counts %&gt;% head()\n\n\n\n\n\nPLT_CN\nSPECIES_SYMBOL\nimp_sum_tpa\nFORTYPCD\nFLDTYPCD\n\n\n\n\n346864572489998\ntotal\n27437\n265\n266\n\n\n346864572489998\nrare\n26463\n265\n266\n\n\n40220711010497\ntotal\n23614\n270\n270\n\n\n40220711010497\nABAM\n23314\n270\n270\n\n\n29881630010497\ntotal\n14393\n301\n301\n\n\n444202461489998\ntotal\n12294\n264\n264",
    "crumbs": [
      "Maps",
      "11- 1st Map"
    ]
  },
  {
    "objectID": "1.5_DB_Create.html",
    "href": "1.5_DB_Create.html",
    "title": "1.5 DB Create",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \n# library(yaImpute)                     # RF imputation     \n# library(vegan)                        # Something to do the yaImpute \n# library(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                      \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n# Rachel's libraries\n# library(RSQLite)       # Already loaded                    \nlibrary(sqldf)                                        \n# library(DBI)                                        \nlibrary(data.table)                                        \n                                 \n\n\n# No sci-notation. \noptions(scipen = 999)\nFunctions\nCreated on\n[1] \"2024-08-07 09:01:15 PDT\"\nLast updated on\n[1] \"2024-10-09 13:59:20 PDT\"",
    "crumbs": [
      "Data Prep",
      "1.5 DB Create"
    ]
  },
  {
    "objectID": "1.5_DB_Create.html#ba-live",
    "href": "1.5_DB_Create.html#ba-live",
    "title": "1.5 DB Create",
    "section": "BA live",
    "text": "BA live\nBALIVE from the cond table says it is only populated for forested plots. I thought that meant I would need to calculate it for the non-forest conditions, but it appears that it is populated for all of these plots.\n\ncond_ba &lt;- cond %&gt;% select(PLT_CN, BALIVE)\n\npreds_eco &lt;- buffer_ecos %&gt;% select(PLT_CN = CN, ECOSUBCD, FLDTYPCD, HABTYPCD1)\npreds_eco$PLT_CN &lt;- as.character(preds_eco$PLT_CN)\n\npreds_eco &lt;- left_join(preds_eco, cond_ba, join_by(PLT_CN))",
    "crumbs": [
      "Data Prep",
      "1.5 DB Create"
    ]
  },
  {
    "objectID": "1.5_DB_Create.html#cc",
    "href": "1.5_DB_Create.html#cc",
    "title": "1.5 DB Create",
    "section": "CC",
    "text": "CC\n\ncond_cc &lt;- cond %&gt;% select(PLT_CN, CC = LIVE_CANOPY_CVR_PCT, CC2 = LIVE_MISSING_CANOPY_CVR_PCT)\n\nsum(is.na(cond_cc$CC))\n\n[1] 2046\n\nsum(is.na(cond_cc$CC2))\n\n[1] 2046\n\n\nCC is not recorded for most of these plt_cns. I looked at the calculations and it would be easier to run this in FVS. That means that I do not need to run FVS for SDI.\n\n# con &lt;- dbConnect(RSQLite::SQLite() , \"C:/RxFire/Data/_FIADB_WA.db\")\n# \n# cond.cn &lt;-   dbGetQuery(con, str_c(\"select CN, PLT_CN from COND where PLT_CN in (\", cns, \")\"))\n# fvs_trees_plot &lt;- dbGetQuery(con, str_c(\"select * from FVS_TREEINIT_PLOT where STAND_CN in (\", cns, \")\"))\n# fvs_plots_plot &lt;- dbGetQuery(con, str_c(\"select * from FVS_STANDINIT_PLOT where STAND_CN in (\", cns, \")\"))\n# \n# cns &lt;- db_list(cond.cn, CN)\n# fvs_trees_cond &lt;- dbGetQuery(con, str_c(\"select * from FVS_TREEINIT_COND where STAND_CN in (\", cns, \")\"))\n# fvs_plots_cond &lt;- dbGetQuery(con, str_c(\"select * from FVS_STANDINIT_COND where STAND_CN in (\", cns, \")\"))\n# \n# dbDisconnect(con)\n\nThe FVS_Ready tables to not have all of our plots in either the cond or plot tables. I need to build the tables.",
    "crumbs": [
      "Data Prep",
      "1.5 DB Create"
    ]
  },
  {
    "objectID": "1.5_DB_Create.html#parts-1-3",
    "href": "1.5_DB_Create.html#parts-1-3",
    "title": "1.5 DB Create",
    "section": "Parts 1-3",
    "text": "Parts 1-3\n\n# Part 1 Setup\n\nstandlist &lt;- cns_buffer\n\ntarget_stands &lt;- standlist |&gt; select(CN) |&gt; unique() |&gt; as.data.table()\n\ntarget_stands &lt;- setkey(target_stands, CN)\n\n\nplt_cn &lt;- db_list(target_stands, CN)\n\n# Part 2 Tree Table ------------------------------------------------------------------------------------------------\n\ntree_header &lt;- c(\n  \"STAND_CN\", \"STATUSCD\", \"Tree_count\", \"SPCD\", \"DBH\", \"HT\", \"ACTUALHT\", \"CR\", \"SUBP\", \"TREE\", \"AGENTCD\", \n  \"Species\", \"History\", \"CrRatio\"\n  )\n\n# This loop iterates through every state database and extracts the tree data from FIA\ntree_table &lt;- NULL\n\n# connect to the sqlite file\ncon = dbConnect(RSQLite::SQLite(), \"C:/RxFire/Data/_FIADB_WA.db\")\n\n\ntree &lt;- as.data.table(\n  dbGetQuery(\n    con, str_c('select PLT_CN, INVYR, STATUSCD, TPA_UNADJ, SPCD, DIA, HT, ACTUALHT, CR, SUBP, TREE, AGENTCD from TREE ', \n               'where PLT_CN in (', plt_cn, \")\")\n    )\n  )\n\ntree &lt;- tree |&gt; mutate(\n  Species = SPCD, \n  History = ifelse(STATUSCD == 1, 1, 8),\n  # History = ifelse(STATUSCD != 1 | !is.na(AGENTCD), 8, 1),\n  CrRatio = CR\n) |&gt; select(-INVYR)\n\n# tree %&gt;% select(STATUSCD, AGENTCD, History) %&gt;% unique()\n\nforest_type &lt;- as.data.table(dbGetQuery(con, 'select * FROM REF_FOREST_TYPE'))\ndbDisconnect(con)\n\nnames(tree) &lt;- toupper(tree_header)\n\n# Part 3 Plot Table --------------------------------------------------------------------------------------------\n\nstand_header &lt;- c(\"STAND_CN\", \"INV_YEAR\", \"CASE\", \"BASAL_AREA_FACTOR\", \"INV_PLOT_SIZE\", \"BRK_DBH\")\n\n# connect to the sqlite file\ncon &lt;-  dbConnect(RSQLite::SQLite(), \"C:/RxFire/Data/_FIADB_WA.db\")\n\nplot_table &lt;- as.data.table(dbGetQuery(con, str_c(\n  'select CN, INVYR from PLOT where CN in (', \n  plt_cn, \")\")\n  ))\n\nplot_table &lt;- setkey(plot_table, CN)\n\n\nplot_table &lt;- plot_table |&gt;  \n  mutate(\n    INV_YEAR = 2014, \n    CASE = (INVYR), \n    INVYR = NA, \n    BASAL_AREA_FACTOR = 0, \n    INV_PLOT_SIZE = 1, \n    BRK_DBH = 999\n  ) |&gt; \n  as.data.table() |&gt; rename(STAND_CN = CN) |&gt; select(-INVYR)",
    "crumbs": [
      "Data Prep",
      "1.5 DB Create"
    ]
  },
  {
    "objectID": "1.5_DB_Create.html#part-4",
    "href": "1.5_DB_Create.html#part-4",
    "title": "1.5 DB Create",
    "section": "Part 4",
    "text": "Part 4\n\n# Part 4 Seedling Table ----------------------------------------------------------------------------------------\n\ntree_header &lt;- c(\n  \"STAND_CN\", \"STATUSCD\", \"Tree_count\", \"SPCD\", \"DBH\", \"HT\", \"ACTUALHT\", \"CR\", \"SUBP\", \"TREE\", \"AGENTCD\", \n  \"Species\", \"History\", \"CrRatio\"\n  )\n\n# This loop iterates through every state database and extracts the tree data from FIA\nseed &lt;- NULL\n\n# connect to the sqlite file\ncon &lt;-  dbConnect(RSQLite::SQLite(), \"C:/RxFire/Data/_FIADB_WA.db\")\n\nseed &lt;- as.data.table(\n  dbGetQuery(\n    con, str_c('select PLT_CN, INVYR, SUBP, TPA_UNADJ, SPCD from SEEDLING ', \n               'where PLT_CN in (', plt_cn, \")\")\n    )\n  ) \n\ndbDisconnect(con)\n \nseed &lt;- seed |&gt; mutate(\n  STAND_CN   =  PLT_CN,      \n  INVYR      =  INVYR,         \n  STATUSCD   =  1,         \n  Tree_count =  TPA_UNADJ,         \n  SPCD       =  SPCD,         \n  DBH        =  0.1,         \n  HT         =  NA,\n  ACTUALHT   =  NA,\n  CR         =  NA,\n  SUBP       =  SUBP,\n  TREE       =  NA,\n  AGENTCD    =  NA,\n  Species    = SPCD,\n  History    = 1,\n  CrRatio    = NA\n) |&gt; select(\n  STAND_CN, INVYR, STATUSCD, Tree_count, SPCD, DBH, HT, ACTUALHT, \n  CR, SUBP, TREE, AGENTCD, Species,History, CrRatio) |&gt; \n  select(-INVYR)\n\nnames(seed) &lt;- seed |&gt; names() |&gt; toupper()\n\n\n\n# Fixing the Tree column. \nseed &lt;- seed |&gt; group_by(STAND_CN) |&gt; \n  mutate(\n    Nrow = row_number(), \n    TREE = (100100 + Nrow)\n  ) |&gt; ungroup() |&gt; select(-Nrow)\n\nfvs_tree &lt;- add_row(tree, seed)",
    "crumbs": [
      "Data Prep",
      "1.5 DB Create"
    ]
  },
  {
    "objectID": "1.5_DB_Create.html#part-5",
    "href": "1.5_DB_Create.html#part-5",
    "title": "1.5 DB Create",
    "section": "Part 5",
    "text": "Part 5\n\nplot_table &lt;- plot_table |&gt; rename(OYEAR = CASE)\nfvs_tree &lt;- fvs_tree |&gt; select(STAND_CN, TREE, TREE_COUNT, HISTORY, SPECIES, DBH, HT, CR, CRRATIO)\n\nfvs_tree &lt;- fvs_tree |&gt; mutate(STAND_CN      =  as.character(STAND_CN),  \n                   # STANDPLOT_CN  =  as.character(STANDPLOT_CN),\n                   TREE          =  as.character(TREE), \n                   TREE_COUNT    =  as.numeric(TREE_COUNT), \n                   HISTORY       =  as.numeric(HISTORY), \n                   SPECIES       =  as.character(SPECIES), \n                   DBH           =  as.numeric(DBH), \n                   HT            =  as.numeric(HT), \n                   CR            =  as.numeric(CR), \n                   CRRATIO       =  as.numeric(CRRATIO)\n                     )\n# str(fvs_tree)\n\n\n# Part 5 Create DB ---------------------------------------------------------------------------------\ngetwd()\n\n\n# Just to make it easier to integrate this into the other scripts I am renaming the tables FVS_...\n\n\ncon &lt;- dbConnect(RSQLite::SQLite(), dbname = \"./data/homemade_fvs_db_08Oct24.db\")\n\n\n\ndbWriteTable(conn = con, name = \"FVS_PLOTINIT\", value = plot_table, overwrite = T)\ndbWriteTable(conn = con, name = \"FVS_TREEINIT\", value = fvs_tree, overwrite = T)\n\n# Set the schema\ndbExecute(con, str_c(\"CREATE TABLE FVS_PLOTINIT_PLOT (\",\n                     \"STAND_CN TEXT, \",\n                     # \"STANDPLOT_CN TEXT, \",\n                     \"INV_YEAR INTEGER, \",\n                     \"OYEAR INTEGER, \",\n                     \"BASAL_AREA_FACTOR REAL, \",\n                     \"INV_PLOT_SIZE REAL, \",\n                     \"BRK_DBH REAL)\"))\n\nplot_table |&gt; names()\n\ndbExecute(con, str_c(\"INSERT INTO FVS_PLOTINIT_PLOT SELECT * FROM FVS_PLOTINIT\"))\ndbExecute(con, \"DROP TABLE FVS_PLOTINIT\")\n\n# 9.2 TREE SCHEMA ---------------------------------------------------------\n\n\ndbExecute(con, str_c(\"CREATE TABLE FVS_TREEINIT_PLOT ( \",\n                     \"STAND_CN TEXT, \",\n                     # \"STANDPLOT_CN TEXT, \",\n                     \"TREE TEXT, \",\n                     \"TREE_COUNT REAL, \",\n                     \"HISTORY   REAL, \",\n                     \"SPECIES   TEXT, \",\n                     \"DBH REAL, \",\n                     \"HT REAL, \",\n                     \"CR    REAL, \",\n                     \"CRRATIO   REAL)\"))\n\n\ndbExecute(con, str_c(\"INSERT INTO FVS_TREEINIT_PLOT SELECT * FROM FVS_TREEINIT\"))\ndbExecute(con, \"DROP TABLE FVS_TREEINIT\")\n\n\n\ndbListTables(conn = con)\ndbDisconnect(con)",
    "crumbs": [
      "Data Prep",
      "1.5 DB Create"
    ]
  },
  {
    "objectID": "1.0_Import_Clean.html",
    "href": "1.0_Import_Clean.html",
    "title": "1 Import Clean",
    "section": "",
    "text": "Libraries\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nadd_commas &lt;- function(n) {\n  t &lt;- prettyNum(n, \",\",scientific=FALSE)\n  return(noquote(t))\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\", \"add_commas\")\nCreated on\n[1] \"2024-08-04 09:34:31 PDT\"\nLast updated on\n[1] \"2024-10-09 13:59:04 PDT\"",
    "crumbs": [
      "Data Prep",
      "1 Import Clean"
    ]
  },
  {
    "objectID": "1.0_Import_Clean.html#missing-trees",
    "href": "1.0_Import_Clean.html#missing-trees",
    "title": "1 Import Clean",
    "section": "Missing Trees",
    "text": "Missing Trees\nTree’d plots in ecos\n\ncns &lt;- buffer_ecos |&gt; select(CN)\ncns &lt;- db_list(cns, CN)\n\ncon &lt;- dbConnect(RSQLite::SQLite() , \"C:/RxFire/Data/_FIADB_WA.db\")\ntrees &lt;- dbGetQuery(con, str_c(\"select * from TREE where PLT_CN in (\", cns, \")\"))\nseedlings &lt;- dbGetQuery(con, str_c(\"select * from SEEDLING where PLT_CN in (\", cns, \")\"))\ndbDisconnect(con)\n\ntrees &lt;- clean_na_cols(trees)\n\nt &lt;- trees |&gt; select(PLT_CN, TREECOUNT = TPA_UNADJ, SPCD)\ntnull &lt;- trees |&gt; select(PLT_CN, TREECOUNT = TPA_UNADJ, SPCD, STATUSCD)\nseedlings &lt;- seedlings |&gt; select(PLT_CN, TREECOUNT, SPCD)\n\nt &lt;- add_row(t, seedlings)\n# t |&gt; nrow()\ntnull &lt;- tnull %&gt;% filter(is.na(TREECOUNT)) %&gt;% unique()\nt &lt;- t |&gt; filter(!is.na(TREECOUNT))\n# t |&gt; nrow()\n\n\nt &lt;- t |&gt; group_by(PLT_CN) |&gt; \n  summarise(n = n(), \n            tpa = sum(TREECOUNT))\n# t |&gt; arrange(tpa) |&gt; head()\n\nnrow(buffer_ecos)\n\n[1] 4147\n\nt |&gt; nrow()\n\n[1] 4099\n\nnrow(buffer_ecos) - nrow(t)\n\n[1] 48\n\n\nOf the 4147 plots in ecos without fire damage, 4099 have trees (live or dead). That means 48 do not.\n\ntnull %&gt;% group_by(STATUSCD) %&gt;% summarise(n = n())\n\n\n\n\n\nSTATUSCD\nn\n\n\n\n\n0\n308\n\n\n2\n2401\n\n\n3\n154\n\n\n\n\n\n\nTree’d plots in habs\n\ncns &lt;- buffer_habs |&gt; select(CN)\ncns &lt;- db_list(cns, CN)\n\ncon &lt;- dbConnect(RSQLite::SQLite() , \"C:/RxFire/Data/_FIADB_WA.db\")\ntrees &lt;- dbGetQuery(con, str_c(\"select * from TREE where PLT_CN in (\", cns, \")\"))\nseedlings &lt;- dbGetQuery(con, str_c(\"select * from SEEDLING where PLT_CN in (\", cns, \")\"))\ndbDisconnect(con)\n\ntrees &lt;- clean_na_cols(trees)\n\nt &lt;- trees |&gt; select(PLT_CN, TREECOUNT = TPA_UNADJ, SPCD)\ntnull &lt;- trees |&gt; select(PLT_CN, TREECOUNT = TPA_UNADJ, SPCD, STATUSCD)\nseedlings &lt;- seedlings |&gt; select(PLT_CN, TREECOUNT, SPCD)\n\nt &lt;- add_row(t, seedlings)\ntnull &lt;- tnull %&gt;% filter(is.na(TREECOUNT)) %&gt;% unique()\nt &lt;- t |&gt; filter(!is.na(TREECOUNT))\n\n\nt &lt;- t |&gt; group_by(PLT_CN) |&gt; \n  summarise(n = n(), \n            tpa = sum(TREECOUNT))\n# t |&gt; arrange(tpa) |&gt; head()\n\nnrow(buffer_habs)\n\n[1] 4607\n\nt |&gt; nrow()\n\n[1] 4580\n\nnrow(buffer_habs) - nrow(t)\n\n[1] 27\n\n\nOf the 4607 plots in ecos without fire damage, 4580 have trees (live or dead). That means 27 do not.\n\ntnull %&gt;% group_by(STATUSCD) %&gt;% summarise(n = n())\n\n\n\n\n\nSTATUSCD\nn\n\n\n\n\n0\n359\n\n\n2\n2636\n\n\n3\n203\n\n\n\n\n\n\n\nSTATUSCD\n\nStatus code. A code indicating whether the sample tree is live, cut, or dead at the time of measurement.\n\n0 No status - Tree is not presently in the sample (remeasurement plots only). Tree was incorrectly tallied at the previous inventory, currently not tallied due to definition or procedural change, or is not tallied because it is located on a nonsampled condition (e.g., hazardous or denied). RECONCILECD = 5-9 required for remeasured annual inventory data but not for periodic inventory data.\n1 Live tree.\n2 Dead tree.\n3 Removed - Cut and removed by direct human activity related to harvesting, silviculture or land clearing. This tree is assumed to be utilized.\n\nWhen a tree has status code = 0 or 3, it doesn’t have height or diameter. All that is recorded is species. I think these need to be removed, but I can’t think of if they need tpa or not. Keeping them might not affect anything.\nIf we include the dead trees and we need to have a tpa for them, I can add it based on diameter.",
    "crumbs": [
      "Data Prep",
      "1 Import Clean"
    ]
  },
  {
    "objectID": "10_Hyperparameters.html",
    "href": "10_Hyperparameters.html",
    "title": "10 Hyper Params",
    "section": "",
    "text": "Libraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                       # Read xlsx\n# library(writexl)                      # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\nlibrary(foreach)                      # Parallel helper   \nlibrary(doParallel)                   # Parallel functions\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\", \"imp_data\", \"imp_data_nc\")\nCreated on\n[1] \"2024-08-28 10:45:55 PDT\"\nLast updated on\n[1] \"2024-10-09 13:59:30 PDT\"",
    "crumbs": [
      "Parameters",
      "10 Hyper Params"
    ]
  },
  {
    "objectID": "10_Hyperparameters.html#parallel-example",
    "href": "10_Hyperparameters.html#parallel-example",
    "title": "10 Hyper Params",
    "section": "Parallel example",
    "text": "Parallel example\nyai_parallel with foreach test\n\n\nCode\n# time_in &lt;- Sys.time()\n\n#setup parallel backend to use many processors\ncores=detectCores()\ncl &lt;- makeCluster(cores[1]-2) #not to overload your computer\nregisterDoParallel(cl)\n\nntree_error &lt;- foreach(i=1:4, .combine=rbind, .packages = c(\"tidyverse\", \"yaImpute\")) %dopar% {\n\n  ntree_error &lt;- yai_parallel(repeats = 2, ntrees = rep((2), 30))\n  \n}\n#stop cluster\nstopCluster(cl)\n\n# time_out &lt;- Sys.time()\n# time_par &lt;- time_out - time_in\n# time_par &lt;- as.duration(time_par)\n\n# test &lt;- ntree_error %&gt;% filter(SYMBL == \"total_TD\") %&gt;% arrange(desc(run))\n\n\nRunning the test set in parallel was finished in better than half the time.",
    "crumbs": [
      "Parameters",
      "10 Hyper Params"
    ]
  },
  {
    "objectID": "10_Hyperparameters.html#average-error-1",
    "href": "10_Hyperparameters.html#average-error-1",
    "title": "10 Hyper Params",
    "section": "Average error",
    "text": "Average error\nPlot average %variation per ntree, 500, 50, 5 + comparisons\n\nCode\n### 500, 50 ,5\nerror_500_50_5 %&gt;% \n  filter(!is.na(var_exp)) %&gt;% \n  ggplot() + \n  aes(x = as.character(ntree), y = var_exp, group = ntree) + \n  # geom_smooth()\n  geom_boxplot() + \n  labs(\n    title = \"Average %Variation Explaied vs. ntree, 500, 50, 5\",\n    # subtitle = \"PISI_TD, PSMA_TD, 2TB_TD, & ALRH2_TD often have NAs for variation explained.\"\n  ) + \n  geom_hline(yintercept = 46, linetype = 2) +\n  ylim(-160,100)\n### 50 ,5\n# Adding group ids for comparison plot\ng &lt;- error_50_5 %&gt;% filter(ntree == 50) %&gt;% select(SYMBL, ntree) %&gt;% unique()\ng &lt;- g %&gt;% mutate(\n  g = ifelse(SYMBL == \"total_TD\", \"total\", NA), \n  g = ifelse(SYMBL %in% cols_tds[2:23], \"50\", g),\n  g = ifelse(SYMBL %in% cols_tds[24:30], \"5\", g)\n)\n\ng &lt;- left_join(error_50_5, g, join_by(SYMBL, ntree)) %&gt;% drop_na()\ng_50_5 &lt;- g\ng %&gt;% \n  filter(!is.na(var_exp)) %&gt;% \n  ggplot() + \n  aes(x = g, y = var_exp) + \n  # geom_smooth()\n  geom_boxplot() + \n  labs(\n    title = \"Average %Variation Explaied vs. ntree, 50 & 5\",\n    # subtitle = \"PISI_TD, PSMA_TD, 2TB_TD, & ALRH2_TD often have NAs for variation explained.\"\n  ) + \n  geom_hline(yintercept = 46, linetype = 2) +\n  ylim(-160,100)\n### 500\ng &lt;- error_500 %&gt;% filter(ntree == 500) %&gt;% select(SYMBL, ntree) %&gt;% unique()\ng &lt;- g %&gt;% mutate(\n  g = ifelse(SYMBL == \"total_TD\", \"total\", NA), \n  g = ifelse(SYMBL %in% cols_tds[2:23], \"50\", g),\n  g = ifelse(SYMBL %in% cols_tds[24:30], \"5\", g)\n)\n\ng &lt;- left_join(error_500, g, join_by(SYMBL, ntree)) %&gt;% drop_na()\ng_500 &lt;- g\n\ng %&gt;% \n  filter(!is.na(var_exp)) %&gt;% \n  ggplot() + \n  aes(x = g, y = var_exp) + \n  # geom_smooth()\n  geom_boxplot() + \n  labs(\n    title = \"Average %Variation Explaied vs. ntree, 500\",\n    # subtitle = \"PISI_TD, PSMA_TD, 2TB_TD, & ALRH2_TD often have NAs for variation explained.\"\n  ) + \n  geom_hline(yintercept = 46, linetype = 2) +\n  ylim(-160,100)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are perhaps slight differences in these 3 approaches, but nothing striking.\n\nAve RMSD\nPlot average rmsd per ntree, 500, 50, 5\n\nCode\nerror_500_50_5 %&gt;% filter(SYMBL == \"total_TD\") %&gt;% \n  ggplot(aes(x = SYMBL, y = rmsd)) + \n  geom_boxplot() + \n  ylim(1200, 3000) + \n  labs(\n    title = \"total_TD rmsd, total_TD at 500, others at 50, & 5\"\n  ) + geom_hline(yintercept = 2000)\nerror_50_5 %&gt;% filter(SYMBL == \"total_TD\") %&gt;% \n  ggplot(aes(x = SYMBL, y = rmsd)) + \n  geom_boxplot() + \n  ylim(1200, 3000) + \n  labs(\n    title = \"total_TD rmsd, y-vars set to 50 and 5\"\n  ) + geom_hline(yintercept = 2000)\nerror_500 %&gt;% filter(SYMBL == \"total_TD\") %&gt;% \n  ggplot(aes(x = SYMBL, y = rmsd)) + \n  geom_boxplot() + \n  ylim(1200, 3000) + \n  labs(\n    title = \"total_TD rmsd, All y-vars set to 500 ntree\"\n  ) + geom_hline(yintercept = 2000)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is perhaps a reduction in RMSD when ntree is set to 500 for total and 5 for the last 6 species when compared to either the 10 runs with ntree set at 50 for all but the last 6, or where it was set at 500 for all. On average over the ten runs, the set with 500, 50, and 5 was lowest. The set where everything was set to 500 had the most variation and highest RMSD.",
    "crumbs": [
      "Parameters",
      "10 Hyper Params"
    ]
  },
  {
    "objectID": "10_Hyperparameters.html#dots",
    "href": "10_Hyperparameters.html#dots",
    "title": "10 Hyper Params",
    "section": "Dots",
    "text": "Dots\nSetup for dot plots, 500, 50, 5\n\n\nCode\nt_rep_error &lt;- error_500_50_5\n\nave_error &lt;- t_rep_error %&gt;% group_by(SYMBL, ntree) %&gt;%\n  summarise(\n    .groups = \"drop\",\n    ave_var = mean(var_exp, na.rm = T), \n    med_var = median(var_exp, na.rm = T), \n    ave_rmsd = mean(rmsd, na.rm = T),\n    sd_var = sd(var_exp, na.rm = T)\n    )\n\nave_error &lt;- ave_error %&gt;% mutate(\n  lower = ave_var - sd_var, upper = ave_var + sd_var, \n  lwr2 = ave_var - 2*sd_var, upr2 = ave_var + 2*sd_var\n  )\n\nt_rep_error &lt;- t_rep_error %&gt;% filter(!is.na(var_exp))\n\nt_rep_error &lt;- left_join(t_rep_error, ave_error, join_by(SYMBL, ntree))\nt_rep_error &lt;- t_rep_error %&gt;% arrange(desc(n_plots))\n\nt &lt;- t_rep_error %&gt;% select(SYMBL) %&gt;% unique()\nt$rib &lt;- seq(1:30)\n\nt_rep_error &lt;- left_join(t_rep_error, t, join_by(SYMBL))\n\n\nAll points in the 500, 50, 5 repetition set. The first is at full scale, the second at fixed y limits.\nPlot %Variation by species, 500, 50, 5\n\n\nCode\nt_rep_error %&gt;% \n  # filter(ntree == 50) %&gt;% \n  ggplot() + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +\n  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = 1, color = \"red\")) +\n  geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  geom_hline(yintercept = 0) +\n  guides(\n    x = guide_axis(angle = 60), \n    color = \"none\", \n    fill = \"none\") + \n  labs(\n    title = \"Variation explained, Mean in red, ntree 500, 50, & 5\",\n    subtitle = \"Between the vertical lines there are between 10 and 486 subplots\"\n    ) + \n  geom_vline(xintercept = \"PSME_TD\") + \n  geom_vline(xintercept = \"POBAT_TD\") + \n  xlab(\"Species, Most to least plots, left to right\")\n\n\n\n\n\n\n\n\n\nCode\nt_rep_error %&gt;% \n  # filter(ntree == 50) %&gt;% \n  ggplot() + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = var_exp)) +\n  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_var, group = 1, color = \"red\")) +\n  geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  geom_hline(yintercept = 0) +\n  guides(\n    x = guide_axis(angle = 60), \n    color = \"none\", \n    fill = \"none\") + \n  labs(\n    title = \"Variation explained, Mean in red, ntree 500, 50, & 5\",\n    subtitle = \"Between the vertical lines there are between 10 and 486 subplots\"\n    ) + \n  geom_vline(xintercept = \"PSME_TD\") + \n  geom_vline(xintercept = \"POBAT_TD\") + \n  xlab(\"Species, Most to least plots, left to right\") + \n  ylim(-10, 100)\n\n\n\n\n\n\n\n\n\n\nRMSD\nPlot RMSD by species, 500, 50, 5\n\n\nCode\nt_rep_error %&gt;% \n  # filter(ntree == 50) %&gt;% \n  ggplot() + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = rmsd)) +\n  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_rmsd, group = 1, color = \"red\")) +\n  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  geom_hline(yintercept = 0) +\n  guides(\n    x = guide_axis(angle = 60), \n    color = \"none\", \n    fill = \"none\") + \n  labs(\n    title = \"RMSD, Mean in red, ntree 500, 50, & 5\",\n    subtitle = \"Between the vertical lines there are between 10 and 486 subplots\"\n    ) + \n  geom_vline(xintercept = \"PSME_TD\") + \n  geom_vline(xintercept = \"POBAT_TD\") + \n  xlab(\"Species, Most to least plots, left to right\")\n\n\n\n\n\n\n\n\n\nPlotting total_TD for the best set of rmsd for total_TD\n\n\nCode\n# t_rep_error %&gt;% filter(SYMBL == \"total_TD\" & rmsd &lt; 1500)\n\nt_rep_error %&gt;% \n  filter(run == 105) %&gt;%\n  ggplot() + \n  geom_point(aes(x = reorder(SYMBL, -n_plots), y = rmsd)) +\n  geom_line(aes(x = reorder(SYMBL, -n_plots), y = ave_rmsd, group = 1, color = \"red\")) +\n  # geom_ribbon(aes(x = rib, ymin=lower, ymax=upper, fill = \"red\"), alpha = .3) +\n  geom_hline(yintercept = 0) +\n  guides(\n    x = guide_axis(angle = 60), \n    color = \"none\", \n    fill = \"none\") + \n  labs(\n    title = \"RMSD, Mean in red, ntree 500, 50, & 5\",\n    subtitle = \"Between the vertical lines there are between 10 and 486 subplots\"\n    ) + \n  geom_vline(xintercept = \"PSME_TD\") + \n  geom_vline(xintercept = \"POBAT_TD\") + \n  xlab(\"Species, Most to least plots, left to right\")\n\n\n\n\n\n\n\n\n\nThe run 105 seems to have better than average rmsd.\n#………………….\n\nntree_error_sept19_5.Rdata has up to 500 trees.\nntree_error_sept19_10.Rdata has 1000 trees.\nntree_error_sept20_3_grps_5.Rdata has 5 runs for each ntree, and 3 sets of ntree values: 50, 150, 225.\nntree_error_sept23_50.500.Rdata has from 50-500 ntrees by 50, with 10 repeats for each.",
    "crumbs": [
      "Parameters",
      "10 Hyper Params"
    ]
  },
  {
    "objectID": "12_Error_Map.html",
    "href": "12_Error_Map.html",
    "title": "12 Error Map",
    "section": "",
    "text": "There were two options presented, both use RMSD of max species per subplot set to the FIA points:\n\n4 bars for subplots & height for error\n4 overlapping circles for subplots with color for error.\n\nIn both cases I need to get the rmsd per subplot and the max species per subplot joined with the FIA CNs.\nIf I map rmsd, the error for rare species will be close to zero. If I map %Variation explained, that doesn’t really tell us anything about the difference in TPA. I could map the averages over the sets of ten yai runs, but we will not be imputing the data that way.\nI am not sure what the difference would be, and I would like to see it, when RMSD is calculated over the pixel counts. So, I would need to include the observed vs imputed values when joining the data.\nThe table I need has columns: standplot_cn, max_spp, observed_TD, imputed_TD, rmsd_max_spp. It will not add time to include the observed, imputed, and rmsd for each species. So, I will add those.\nI have run many different yai distance calculations. The most default is where ntree is 50. The best in terms of least RMSD was the run with 500 for total_TD, the rest at 50 and 5 for the last 6.\nRun 105 in this set had better than average RMSD.\n\n\nCode\nload(file = \"./data/ntree_error_sept23_500.50.5_10reps.Rdata\")\nerror_500_50_5 &lt;- ntree_error\n\n\nThis one has the runs with ntree from 50 - 500\n\n\nCode\nload(file = \"./data/ntree_error_sept23_50.500.Rdata\")\nerror_500 &lt;- ntree_error\n\n\nNeither of those datasets have CNs. They show error by species.\nI think the easiest way to do this is just to use the yai from the default regression run.\nLibraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(randomForest)                 # RF package that yaImpute uses\nlibrary(yaImpute)                     # RF imputation\nlibrary(vegan)                        # Something to do the yaImpute\n\n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n# library(stars)\nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\nlibrary(sf)                           # Simple Features/vector data\nlibrary(terra)                        # Raster functions\nlibrary(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nrmsd_spp &lt;-spprmsd_spp &lt;- function(imp_df, spp) {\n  \n  rmsd_t &lt;- imp_df %&gt;% drop_na() %&gt;% select(contains(spp)) %&gt;% select(contains(\"TD\"))\n  \n  v1 &lt;- rmsd_t %&gt;% select(ends_with(\"TD\")) %&gt;% names()\n  v2 &lt;- rmsd_t %&gt;% select(ends_with(\".o\")) %&gt;% names()\n  \n  rmsd_t &lt;- rmsd_t %&gt;% mutate(sq_dev = (rmsd_t[,v1] - rmsd_t[,v2])^2) \n  \n  return(sqrt(mean(rmsd_t$sq_dev)))\n}\n\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\", \"rmsd_spp\") %&gt;% unique()\n\n\n\nCreated on\n\n\n[1] \"2024-09-24 10:15:35 PDT\"\n\n\nLast updated on\n\n\n[1] \"2024-10-09 13:59:57 PDT\"",
    "crumbs": [
      "Maps",
      "12 Error Map"
    ]
  },
  {
    "objectID": "12_Error_Map.html#imp_data",
    "href": "12_Error_Map.html#imp_data",
    "title": "12 Error Map",
    "section": "imp_data",
    "text": "imp_data\n\n\nCode\ncon &lt;- dbConnect(RSQLite::SQLite(), clean_paths(r\"(C:\\RxFire\\Regen\\Regeneration_2_16Sept24\\data/homemade_fvs_db_17sept24.db)\"))\nimp_data &lt;- dbGetQuery(con, \"select * from imp_data\")\ndbDisconnect(con)\n\nimp_data_nc &lt;- imp_data %&gt;% filter(eco_code == \"NC\" & TRAIN == T)\nimp_data_nc &lt;- imp_data_nc |&gt; filter(total_TD != 0)",
    "crumbs": [
      "Maps",
      "12 Error Map"
    ]
  },
  {
    "objectID": "12_Error_Map.html#yai",
    "href": "12_Error_Map.html#yai",
    "title": "12 Error Map",
    "section": "yai",
    "text": "yai\nLoad yai object\n\n\nCode\nload(file = \"./data/rf_reg_noclass_sept18.R\")\nrf &lt;- rf_reg_noclass\nrm(rf_reg_noclass)",
    "crumbs": [
      "Maps",
      "12 Error Map"
    ]
  },
  {
    "objectID": "14_Research.html",
    "href": "14_Research.html",
    "title": "Research",
    "section": "",
    "text": "This page consists of various research tasks. See sections titles for task descriptions.\nLibraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \n# library(randomForest)                 # RF package that yaImpute uses\n# library(yaImpute)                     # RF imputation\n# library(vegan)                        # Something to do the yaImpute\n\n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n# library(stars)\n# library(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nrmsd_spp &lt;-spprmsd_spp &lt;- function(imp_df, spp) {\n  \n  rmsd_t &lt;- imp_df %&gt;% drop_na() %&gt;% select(contains(spp)) %&gt;% select(contains(\"TD\"))\n  \n  v1 &lt;- rmsd_t %&gt;% select(ends_with(\"TD\")) %&gt;% names()\n  v2 &lt;- rmsd_t %&gt;% select(ends_with(\".o\")) %&gt;% names()\n  \n  rmsd_t &lt;- rmsd_t %&gt;% mutate(sq_dev = (rmsd_t[,v1] - rmsd_t[,v2])^2) \n  \n  return(sqrt(mean(rmsd_t$sq_dev)))\n}\n\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\", \"rmsd_spp\") %&gt;% unique()\nCreated on\n[1] \"2024-10-01 11:56:23 PDT\"\nLast updated on\n[1] \"2024-10-09 14:00:20 PDT\"",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#plot-table",
    "href": "14_Research.html#plot-table",
    "title": "Research",
    "section": "PLOT table",
    "text": "PLOT table\n\nWater\n\n2.4.19 WATERCD,\n\nWater on plot code. Water body &lt;1 acre in size or a stream &lt;30 feet wide that has the greatest impact on the area within the sampled portions of any of the four subplots. The coding hierarchy is listed in order from large permanent water to temporary water. May not be populated for some FIA work units. + 0 None - no water sources within the sampled condition class(es). + 1 Permanent streams or ponds too small to qualify as noncensus water. + 2 Permanent water in the form of deep swamps, bogs, marshes without standing trees present and less than 1.0 acre in size, or with standing trees. + 3 Ditch/canal - human-made channels used as a means of moving water, e.g., for irrigation or drainage, which are too small to qualify as noncensus water. + 4 Temporary streams. + 5 Flood zones - evidence of flooding when bodies of water exceed their natural banks. + 9 Other temporary water.\n\n\nVisits and Sampling\nThis could be a good code to use in filtering, if it is filled for all plots.\n\n2.4.41 SAMP_METHOD_CD,\n\nSample method code. A code indicating if the plot was observed in the field or remotely sensed in the office. 1 = Field visited, meaning a field crew physically examined the plot and recorded information at least about subplot 1 center condition (see SUBP_EXAMINE_CD below) + When the plot is sampled remotely, the number of subplots examined (SUBP_EXAMINE_CD) usually equals 1.\n\n2.4.42 SUBP_EXAMINE_CD,\n\nSubplots examined code. A code indicating the number of subplots examined. By default, PLOT_STATUS_CD = 1 plots have all 4 subplots examined. 4 = All four subplots fully described (no assumptions/inferences).\n\n1.2.1 Sampling, Phase 1 (P1) is used for stratification, while Phase 2 (P2) consists of plots that are visited or photo-interpreted.\n2.4.11 PLOT_NONSAMPLE_REASN_CD\n\nPlot nonsampled reason code. A code indicating the reason an entire plot was not sampled. 1-11 = not-sampled. Perhaps NULL indicates sampled.\n\n2.4.50 NF_PLOT_STATUS_CD,\n\nNonforest plot status code. A code describing the sampling status of the nonforest plot. 1 = Sampled at least one accessible nonforest land condition present on the plot.\n\n\nHexagons\nEmap hexagons are not the hexagons that outline FIA plots for large area estimation. The hexagons refered to in Intesity are the ones that I needed for the error map.\n\n2.4.40 EMAP_HEX,\n\nEMAP hexagon. The identifier for the approximately 160,000 acre Environmental Monitoring and Assessment Program (EMAP) hexagon in which the plot is located. EMAP hexagons are available to the public, cover the coterminous United States, and have been used in summarizing and aggregating data about numerous natural resources.\n\n2.4.44 INTENSITY,\n\nIntensity. A code used to identify Federal base grid annual inventory plots and plots that have been added to intensify a particular sample. Under the Federal base grid, one plot is collected in each theoretical hexagonal polygon, which is slightly more than 5,900 acres in size. Plots with INTENSITY = 1 are part of the Federal base grid. In some instances, States and/or agencies have provided additional support to increase the sampling intensity for an area. Supplemental plots have INTENSITY set to higher numbers depending on the amount of plot intensification chosen for the particular estimation unit. Populated when MANUAL 1.0.",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#cond-table",
    "href": "14_Research.html#cond-table",
    "title": "Research",
    "section": "COND table",
    "text": "COND table\n\n2.5.9 COND_STATUS_CD,\n\nCondition status code. A code indicating the basic land classification.\n\n\n\nCond Status cd\n\n\n\n2.5.159 FOREST_COND_STATUS_CHANGE_CD,\n\nForest land condition status change code. A code indicating change in forest land condition.\n\n3.1.27 AGENTCD, Cause of death (agent) code. (core: all remeasured plots when the tree was alive at the previous visit and at revisit is dead or removed OR the tree is standing dead in the current inventory and the tree is ingrowth, through growth, or a missed live tree; core optional: all initial plot visits when tree qualifies as a mortality tree) When PLOT.MANUAL 1.0, this attribute was collected on only dead and cut trees. When PLOT.MANUAL &lt;1.0, this attribute was collected on all trees (live, dead, and cut). Cause of damage was recorded for live trees if the presence of damage or pathogen activity was serious enough to reduce the quality or vigor of the tree. When a tree was damaged by more than one agent, the most severe damage was coded. When no damage was observed on a live tree, 00 was recorded. Damage recorded for dead trees was the cause of death. Each FIA program records specific codes that may differ from one State to the next. These codes fall within the ranges listed below. For the specific codes used in a particular State, contact the FIA work unit responsible for that State (table 1-1).\n\n30 = Fire\n00 = No agent recorded (only allowed on live trees in data prior to 1999).\n\n\n\nWater\n2.5.35 PHYSCLCD,\nPhysiographic class code. A code indicating the general effect of land form, topographical position, and soil on moisture available to trees. +Note: When PLOT.MANUAL &lt;1.0, this attribute is populated for all forest periodic plots and all NCRS periodic plots that were measured as “nonforest with trees” (e.g., wooded pasture, windbreaks).\nXeric sites (normally low or deficient in available moisture)\n\n11 Dry Tops - Ridge tops with thin rock outcrops and considerable exposure to sun and wind.\n12 Dry Slopes - Slopes with thin rock outcrops and considerable exposure to sun and wind. Includes most mountain/steep slopes with a southern or western exposure.\n13 Deep Sands - Sites with a deep, sandy surface subject to rapid loss of moisture following precipitation. Typical examples include sand hills, ridges, and flats in the South, sites along the beach and shores of lakes and streams.\n19 Other Xeric - All dry physiographic sites not described above.\n\nMesic sites (normally moderate but adequate available moisture)\n\n21 Flatwoods - Flat or fairly level sites outside of floodplains. Excludes deep sands and wet, swampy sites.\n22 Rolling Uplands - Hills and gently rolling, undulating terrain and associated small streams. Excludes deep sands, all hydric sites, and streams with associated floodplains.\n23 Moist Slopes and Coves - Moist slopes and coves with relatively deep, fertile soils. Often these sites have a northern or eastern exposure and are partially shielded from wind and sun. Includes moist mountain tops and saddles.\n24 Narrow floodplains/Bottomlands - Floodplains and bottomlands less than 1/4 mile in width along rivers and streams. These sites are normally well drained but are subjected to occasional flooding during periods of heavy or extended precipitation. Includes associated levees, benches, and terraces within a 1/4 mile limit. Excludes swamps, sloughs, and bogs.\n25 Broad Floodplains/Bottomlands - Floodplains and bottomlands 1/4/-mile or wider along rivers and streams. These sites are normally well drained but are subjected to occasional flooding during periods of heavy or extended precipitation. Includes associated levees, benches, and terraces. Excludes swamps, sloughs, and bogs with year-round water problems.\n29 Other Mesic - All moderately moist physiographic sites not described above.\n\nHydric sites (normally abundant or overabundant moisture all year)\n\n31 Swamps/Bogs - Low, wet, flat, forested areas usually quite extensive that are flooded for long periods except during periods of extreme drought. Excludes cypress ponds and small drains.\n32 Small Drains - Narrow, stream-like, wet strands of forest land often without a well-defined stream channel. These areas are poorly drained or flooded throughout most of the year and drain the adjacent higher ground.\n33 Bays and wet pocosins - Low, wet, boggy sites characterized by peaty or organic soils. May be somewhat dry during periods of extended drought. Examples include sites in the Carolina bays in the Southeast United States.\n34 Beaver ponds.\n35 Cypress ponds.\n39 Other hydric - All other hydric physiographic sites.\n\n2.5.131 FOREST_COMMUNITY_PNWRS,\nForest type (Pacific Islands), Pacific Northwest Research Station. A code indicating the forest type that best describes the species with the plurality of crown cover for all live trees in the condition class that are not overtopped. Recorded for all accessible forest land condition classes in the Pacific Islands. Only populated by certain FIA work units (SURVEY.RSCD = 26). + Note: Pacific Island forest types are taken from Mueller-Dombois and Fosberg (1998).\n\n1 Strand or halophytic vegetation - vegetation near the shore containing species adapted to high rates of evaporation by wind and to high salt concentrations from windblown ocean spray or inundation by salt water.\n2 Mangrove swamps - trees with high salt tolerance growing on tidally inundated shores and in landlocked depressions. Many species have pneumatophores, adaptive structures for aeration of waterlogged root systems.\n3 Lowland tropical rainforest - multistoried forest with many canopydwelling epiphytes, open ground, and shrub layers. This forest community can extend up the lower slopes with windward rainy exposures.\n4 Montane rainforest -the predominant type on moist hilltops and mountain slopes in many tropical islands. Forests of low stature that are rich in shrubs and epiphytes.\n5 Cloud forest - These forests are covered with clouds or fog much of the time. The trees have low canopies and are often dripping with moisture. The trees are typically small-leafed and covered with masses of epiphytic mosses and liverworts, which also form a deep ground cover.\n6 Mesophytic or moist forest - seasonally dry evergreen forests on leeward, drier slopes.\n7 Xerophytic - forests found on truly dry, rain-shadow, leeward mountain slopes and lowlands.\n8 Agroforestry - tree species are included in crop or animal production agricultural ecosystems.\n9 Plantations - an area planted with tree species for the purpose of timber production. Species planted are mainly eucalypt, mahogany, and pine species that replace indigenous forests and savannas.",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#subp-regen-table",
    "href": "14_Research.html#subp-regen-table",
    "title": "Research",
    "section": "SUBP Regen Table",
    "text": "SUBP Regen Table\n\n6.2.10 REGEN_SUBP_STATUS_CD,\n\nRegeneration subplot status code. A code indicating whether or not the subplot was sampled for advanced regeneration. This attribute was retired starting with INVYR = 2015. Data for all years are now populated in REGEN_MICR_STATUS_CD.\n\n6.2.12 SUBPLOT_SITE_LIMITATIONS,\n\nSubplot site limitations. A code indicating if the site has a limitation on at least 30 percent of the accessible forest area of the subplot that would inhibit or preclude the presence of regenerating seedlings. This attribute was retired starting with INVYR = 2015. Note: For INVYR &lt;2015, the field guide referenced the sampling unit as the subplot even though seedlings are and have only been counted on the microplots.\n\n1 No site limitation.\n2 Rocky surface with little or no soil.\n3 Water-saturated soils (during the growing season).\n6.2.13 MICROPLOT_SITE_LIMITATIONS,\n\nMicroplot site limitations. A code indicating if the site has a limitation on at least 30 percent of the accessible forest area of the microplot that would inhibit or preclude the presence of regenerating seedlings. + Same codes as above.\n\n6.2.22 REGEN_MICR_STATUS_CD,\n\nRegeneration microplot status code. A code indicating whether the microplot was sampled for advanced regeneration. Based on the procedures described in Bechtold and Patterson (2005), POP_STRATUM.ADJ_FACTOR_REGEN_MICR should be applied when making population estimates. This compensates for any nonsampled microplots or cases where the sampling status is ambiguous (codes 3 through 9).\n\n1 Advance regeneration sampled - accessible forest land condition present on the microplot.\n2 Advance regeneration sampled - no accessible forest land condition present on the microplot.\n3 Advance regeneration nonsampled - accessible forest land condition present on the microplot, but advance regeneration variables cannot be assessed (core SEEDLING.TREECOUNT is still measured).\n4 Advance regeneration nonsampled - QA/QC did not measure subplot/microplot for tree/sapling/seedling data (PLOT.QA_STATUS = 2-5 only).\n5 Nonsampled - subplot not sampled (SUBPLOT.SUBP_STATUS_CD = 3).\n9 Advance regeneration sample status is ambiguous - collected under earlier, more general definition; refer to REGEN_SUBP_STATUS_CD.",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#seedling-regeneration-table",
    "href": "14_Research.html#seedling-regeneration-table",
    "title": "Research",
    "section": "Seedling Regeneration Table",
    "text": "Seedling Regeneration Table\n6.3.14 SEEDLING_SOURCE_CD,\nSeedling source code. A code indicating the source of the seedlings\n\n1 Other seedling.\n2 Stump sprout.\n3 Competitive oak, hickory, or butternut seedling (Note: Research indicates that competitive seedlings are highly likely to become dominant or codominant stems in the next stand during forest succession. To be classified as competitive, stems must have a root collar diameter [d.r.c.] &gt;0.75 inches or have a length of at least 3 feet. In situations with relatively high tally, it should only be necessary to check at least 10% of d.r.c.’s.)\n\n6.3.15 LENGTH_CLASS_CD,\nLength class code. A code indicating the length class of the seedlings.\n\n1, 2 inches to less than 6 inches.\n2, 6 inches to less than 12 inches.\n3, 1 foot to less than 3 feet.\n4, 3 feet to less than 5 feet.\n5, 5 feet to less than 10 feet.\n6, Greater than or equal to 10 feet.",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#ground-cover-table",
    "href": "14_Research.html#ground-cover-table",
    "title": "Research",
    "section": "Ground Cover Table",
    "text": "Ground Cover Table\n7.1.12 GRND_CVR_TYP,\nGround cover type. A code indicating the ground cover type found on each transect segment. If multiple ground cover types (e.g., BARE, LITT, ROCK) are present on a segment, a separate record is populated for each category. Individual categories add up to 100 percent for each 10-foot segment along the transect.",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#subplot-soil-sample-layer-table",
    "href": "14_Research.html#subplot-soil-sample-layer-table",
    "title": "Research",
    "section": "Subplot Soil Sample Layer Table",
    "text": "Subplot Soil Sample Layer Table\nLook at this table. It has soil moisture measurements, but I am not sure that the sampling procedure will be helpful. If there are samples on our CNs, then it is worth looking at this further\n\n8.2.29 TEXTURE_CD,\n\nTexture code. A code indicating the texture of the soil layer.\n\n0, Organic.\n1, Loamy.\n2, Clayey.\n3, Sandy.\n4, Coarse sand.\n9, Not measured.\n\nThere are a bunch of codes for ph and nutrients.",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#population-tables",
    "href": "14_Research.html#population-tables",
    "title": "Research",
    "section": "Population tables",
    "text": "Population tables\nThese aren’t useful here, but there is information that is used to infer the data to a population.",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#plot-geometry-table",
    "href": "14_Research.html#plot-geometry-table",
    "title": "Research",
    "section": "Plot Geometry Table",
    "text": "Plot Geometry Table\n\n10.1.23 FVS_LOC_CD,\n\nForest vegetation simulator location code",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#treemap-code",
    "href": "14_Research.html#treemap-code",
    "title": "Research",
    "section": "TreeMap Code",
    "text": "TreeMap Code\nThis is the TreeMap code copied from github in Sept. of 2024.\n\nParts 1 and 2 are just reading the code.\nFunction lookup is learning about unfamiliar function.\nPseudo-code is re-writing the TreeMap code in plain language\n\n\n\nPart 1\n\n\nCode\n# Perform random forests imputation of FIA plot data\n# written by Isaac Grenfell\n\nlibrary(yaImpute)\nlibrary(raster)\nlibrary(rgdal)\nlibrary(foreign)\nlibrary(parallel)\nlibrary(foreach)\nlibrary(doParallel)\n\n\n###Change this to match current directory and path\ncur.zone &lt;- \"z1\"\noutfolder &lt;- cur.zone\n\nsetwd(\"F:\\\\Tree_List_c2012\\\\FIA\\\\working_KLR\")\nmeters.db &lt;- read.dbf(\"FIA_LFRDB_Albers.dbf\")\n\n###Change this to match current directory and path\nsetwd(paste(\"F:\\\\Tree_List_c2014\\\\target_data\\\\final\\\\\", outfolder, sep=\"\"))\nlist.files()\n\ncwd &lt;- getwd()\nflist.tif &lt;- Sys.glob(\"*.tif\")\n\n# Create raster stack of input target grids\nraster.stack &lt;- stack(flist.tif)\np4s.albers &lt;- proj4string(raster.stack)\nraster.list &lt;- vector(\"list\", length(flist.tif))\nnrasters &lt;- length(flist.tif)\nfor(i in 1:length(flist.tif))  \n{\n  raster.list[[i]] &lt;- raster()  \n}\n\n###Extract values about training points\nnfiles.raster &lt;- length(flist.tif)\n\n# Read in x table of reference data\nallplot &lt;- read.table(\"F:\\\\Tree_List_c2014\\\\x_table\\\\x_table_final_EVG_Karin_reclass_plus_loblolly_manual.txt\", header=T, sep=\",\")\nremap &lt;- read.table(paste(\"F:\\\\Tree_List_c2014\\\\target_data\\\\working_KLR\\\\EVG_remap\\\\\", cur.zone, \"_EVG_remap.txt\", sep=\"\"), sep=\":\")\n\n#Limit allplot to just the veg types in the zone remap table\nplot.df &lt;- allplot[allplot$EVT_GP %in% remap$V1,]\ndim(plot.df)\n\n###Change this to match current directory and path\ndir.create(paste(\"F:\\\\Tree_List_c2014\\\\outputs\\\\\", cur.zone, \"_disturb\", sep=\"\"))\nplot.df$CN &lt;- factor(plot.df$CN)\nwrite.csv(plot.df, paste(\"F:\\\\Tree_List_c2014\\\\outputs\\\\\", cur.zone, \"_disturb\\\\\", cur.zone, \"_x_table_allplots_reclass.txt\", sep=\"\"), row.names = F)\n\nmerge.df &lt;- merge(plot.df, meters.db, by = \"CN\")\n\n##Build X predictor matrix\nevg.fac &lt;- as.factor(plot.df$EVT_GP)\ndc.code.fac &lt;- as.factor(plot.df$disturb_code)\ndc.year.fac &lt;- as.factor(plot.df$disturb_year)\ndc.year.num &lt;- as.numeric(plot.df$disturb_year)\n\n\n\nlev.dc &lt;- levels(dc.code.fac)\nlev.year &lt;- levels(dc.year.fac)\n\nplot.df[,18] &lt;- evg.fac\n\n\n##Build Y response matrix\nplot.df$POINT_X &lt;- merge.df$POINT_X\nplot.df$POINT_Y &lt;- merge.df$POINT_Y\n\n\n###Change this to match current directory and path\nsetwd(paste(\"F:\\\\Tree_List_c2014\\\\target_data\\\\final\\\\\", outfolder, sep=\"\"))\n\n####Reclass evgs\nevg.reclass &lt;- remap\nn.evgs &lt;- dim(evg.reclass)[1]\n\nevg.out &lt;- rep(0, dim(plot.df)[1])\nevg.vec &lt;- plot.df$\"EVT_GP\"\nfor(i in 1:n.evgs)  \n{  \n  cur.evg &lt;- evg.reclass[i, 1]  \n  sub.ind &lt;- evg.vec == cur.evg  \n  evg.out[sub.ind] &lt;- i  \n}   \nevg.in &lt;- as.factor(evg.out)\n\nplot.df$\"EVT_GP\" &lt;- as.factor(evg.out)\nplot.df$disturb_code &lt;- as.factor(plot.df$disturb_code)\n\n#Create X Table\nX.df &lt;- plot.df[,5:20]\n\naspect.temp &lt;- X.df$ASPECT\nrad.temp &lt;- (pi/180)*aspect.temp\nnorthing.temp &lt;- cos(rad.temp)\neasting.temp &lt;- sin(rad.temp)\nX.df &lt;- X.df[,-2]\nX.df$NORTHING &lt;- northing.temp\nX.df$EASTING &lt;-     easting.temp\n\nrownames(X.df) &lt;- plot.df$ID\nid.table &lt;-  plot.df$ID\nY.df &lt;- data.frame(plot.df[,16:18])\nrownames(Y.df) &lt;- plot.df$ID\n#X.df &lt;- X.df[,-c(9, 10)]\n\n# build the random forests model (X=all predictors, Y=EVG, EVC, EVH)\nset.seed(56789)\nyai.treelist &lt;- yai(X.df, Y.df, method = \"randomForest\", ntree = 249)\n\nyai.treelist\n\n\n\n\nPart 2\n\n\nCode\n# build dataframes from the raster data\nraster.coords &lt;- coordinates(raster.stack)\nasp.raster &lt;- raster.stack[[1]]\ndem.raster &lt;- raster.stack[[2]]\n\ncurrow.vals &lt;- cellFromRow(dem.raster, 1500)\ncoords.currow &lt;- raster.coords[currow.vals,]\n\nextract.currow &lt;- extract(raster.stack, coords.currow)\np4s.latlong &lt;- CRS(\"+proj=longlat +datum=NAD83\") \n\nmaxrow &lt;- max(as.numeric(rownames(X.df)))\n\nnrows.out &lt;- dim(raster.stack)[1]\nncols.out &lt;- dim(raster.stack)[2]\n\nrs2 &lt;- raster.stack\ncoords.all &lt;- raster.coords\n\nx.vec &lt;- coords.all[,1]\nx.mat &lt;- matrix(x.vec, nrow=nrows.out)\n\nx.raster.out &lt;- raster(x.mat)\nx.raster.out@extent &lt;-dem.raster@extent\nx.raster.out@crs &lt;-dem.raster@crs\n\ny.vec &lt;- coords.all[,2]\ny.mat &lt;- matrix(y.vec, nrow=nrows.out)\n\ny.raster.out &lt;- raster(y.mat)\ny.raster.out@extent &lt;-dem.raster@extent\ny.raster.out@crs &lt;-dem.raster@crs\n\n# impute.row()   ------------------------------------------------------------------------------\n\n# Perform imputation\nimpute.row &lt;- function(currow)  \n{  \n  library(yaImpute) \n  library(raster) \n  library(rgdal)\n  currow.vals &lt;- cellFromRow(dem.raster, currow)\n  coords.currow &lt;- raster.coords[currow.vals,]  \n  \n  # get data from each row of rasters (coordinates)\n  sp.currow &lt;- SpatialPoints(coords.currow, CRS(p4s.albers)) \n  extract.currow &lt;- extract(rs2,   sp.currow)\n  \n  colseq &lt;- 1:length(extract.currow[,1])\n  valid.cols &lt;- colseq[as.logical(1-is.na(extract.currow[,1]))]\n  ncols.df &lt;- dim(extract.currow)[2]\n  extract.currow &lt;- data.frame(extract.currow)\n  extract.currow$\"POINT_X\" &lt;- sp.currow$x\n  extract.currow$\"POINT_Y\" &lt;-sp.currow$y\n  extract.currow &lt;- na.exclude(extract.currow)\n  X.df.temp &lt;- data.frame(extract.currow)\n  nrow.temp &lt;- dim(X.df.temp)[1]\n  \n  aspect.temp &lt;- X.df.temp$ASPECT  \n  rad.temp &lt;- (pi/180)*aspect.temp  \n  northing.temp &lt;- cos(rad.temp)  \n  easting.temp &lt;- sin(rad.temp)\n  \n  X.df.temp &lt;- X.df.temp[,-1]  \n  X.df.temp$NORTHING &lt;- northing.temp  \n  X.df.temp$EASTING &lt;-  easting.temp  \n  temp.evg &lt;- X.df.temp$'EVT_GP'\n  \n  #get nonappearing evgs   \n  evg.orig &lt;- 1:n.evgs \n  evg.val &lt;- evg.orig  \n  evg.val.temp &lt;- X.df.temp$'EVT_GP'  \n  n.evgs.orig &lt;- length(sort(unique(evg.orig)))  \n  evg.orig.seq &lt;- 1:n.evgs.orig  \n  \n  nonappearing.evgs &lt;- evg.val[-sort(unique(as.numeric(as.character(evg.val.temp))))]  \n  n.dummy.rows &lt;- length(nonappearing.evgs)  \n  X.df.temp.old &lt;- X.df.temp\n\n  \n  \n  \n  \n\nif(n.dummy.rows &gt; 0)    \n  {    \n    dummy.rows &lt;- X.df.temp[1:n.dummy.rows,]    \n    tempchar &lt;- as.character(X.df.temp$'EVT_GP')    \n    X.df.temp$'EVT_GP' &lt;- tempchar    \n    dummy.rows$'EVT_GP' &lt;- as.character(nonappearing.evgs)    \n    X.df.temp &lt;- rbind(X.df.temp, dummy.rows)    \n  }\n  \n  n.rows.orig &lt;- dim(extract.currow)[1]   \n  temp.fac &lt;- factor(X.df.temp$'EVT_GP', levels = levels(evg.in))  \n  dc.code.fac.temp &lt;- factor( X.df.temp$disturb_code, levels=lev.dc)  \n  \n  X.df.temp$'EVT_GP' &lt;- as.factor(temp.fac)  \n  X.df.temp$disturb_code &lt;- dc.code.fac.temp   \n  nrow.temp &lt;- dim(X.df.temp)[1]  \n  impute.out &lt;- rep(-1, nrow.temp)  \n  \n  nc.orig &lt;- dim(coords.currow)[1]  \n  impute.out &lt;- rep(NA,nc.orig)  \n  nrows.orig &lt;- dim(extract.currow)[1]  \n  if(nrow.temp &gt; 0)    \n  {    \n    colseq.out &lt;- 1:dim(X.df.temp)[1]    \n    rownames.all &lt;- colseq.out+maxrow    \n    rownames(X.df.temp) &lt;- paste(\"T-\", rownames.all)    \n    \n    # take object from formed random forests model and use X.df.temp dataframe to make predictions    \n    temp.newtargs &lt;- newtargets(yai.treelist, newdata = X.df.temp)    \n    temp.xall &lt;- temp.newtargs$xall    \n    out.neiIds &lt;- temp.newtargs$neiIdsTrgs    \n    out.trgrows &lt;- temp.newtargs$trgRows    \n    yrows &lt;- as.numeric(out.neiIds[,1])    \n    id.out &lt;- id.table[yrows]    \n    impute.out[valid.cols] &lt;- yrows[1:nrows.orig]    \n  }\n  \n  return(impute.out)  \n}\n\n# end ----------------------------------------------------------------------\n\ncl &lt;- makeCluster(20, port=\"10187\")\nregisterDoParallel(cl)\n\nmout &lt;- foreach(m = 1:nrows.out, .packages = c(\"raster\", \"rgdal\", \"yaImpute\"), .combine=\"rbind\") %dopar%   impute.row(m)\n\nstopCluster(cl)\ncloseAllConnections()\n\n###this will return a matrix, all thats left is to write it out as a raster\n\nm.raster &lt;-dem.raster\n\nm.raster.out &lt;- raster(mout)\nm.raster.out@extent &lt;-dem.raster@extent\nm.raster.out@crs &lt;-dem.raster@crs\n\n###Change this!\nsetwd(paste(\"F:\\\\Tree_List_c2014\\\\outputs\\\\\", cur.zone, \"_disturb\", sep=\"\"))\nfout &lt;- paste(cur.zone, \"_index-yes-disturb.tif\", sep=\"\")\nwriteRaster(m.raster.out, fout, overwrite=TRUE)",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#function-lookup",
    "href": "14_Research.html#function-lookup",
    "title": "Research",
    "section": "Function Lookup",
    "text": "Function Lookup\n\nbase::Sys.glob\n\nFunction to do wildcard expansion (also known as ‘globbing’) on file paths.\n\nraster::proj4string\n\nGet or set the coordinate reference system (CRS) of a Raster* object.\n\nbase::vector\n\nvector produces a ‘simple’ vector of the given length and mode, where a ‘simple’ vector has no attribute,\n\nraster::coordinates\n\nThese functions get coordinates of the center of raster cells for a row, column, or cell number of a Raster* object.\n\nraster::cellFromRow\n\nGet cell number(s) of a Raster* object from row and/or column numbers. Cell numbers start at 1 in the upper left corner, and increase from left to right, and then from top to bottom. The last cell number equals the number of cells of the Raster* object.\n\nraster::stack\n\nA RasterStack is a collection of RasterLayer objects with the same spatial extent and resolution. A RasterStack can be created from RasterLayer objects, or from raster files, or both. It can also be created from a SpatialPixelsDataFrame or a SpatialGridDataFrame object.\n\nparallel::makeCluster\n\nCreates a set of copies of R running in parallel and communicating over sockets.\n\ndoParallel::registerDoParallel\n\nThe registerDoParallel function is used to register the parallel backend with the foreach package.\n\nforeach::foreach\n\n%do%⁠ and ⁠%dopar%⁠ are binary operators that operate on a foreach object and an R expression. The expression, ex, is evaluated multiple times in an environment that is created by the foreach object, and that environment is modified for each evaluation as specified by the foreach object. ⁠%do%⁠ evaluates the expression sequentially, while ⁠%dopar%⁠ evaluates it in parallel. The results of evaluating ex are returned as a list by default, but this can be modified by means of the .combine argument.\n\nuser::impute.row\n\nCreated above\n\nparallel::stopCluster\n\nCreates a set of copies of R running in parallel and communicating over sockets.\n\nshowConnections {base}::closeAllConnections\n\ncloses (and destroys) all user connections, restoring all sink diversions as it does so.\n\nsp::SpatialPoints\n\ncreate objects of class SpatialPoints-class or SpatialPointsDataFrame-class from coordinates, and from coordinates and data.frames",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "14_Research.html#pseudo-code",
    "href": "14_Research.html#pseudo-code",
    "title": "Research",
    "section": "Pseudo-Code",
    "text": "Pseudo-Code\n\nPart 1\n\nSet zone and working directory\nlist files and save tiff paths\nstack tiffs\nProject the stack\ncreate a vector of tiff paths and get the length\nfor each tiff use the raster function to make it a raster object\nget the number of files\nPull in the TreeMap tree list\nset remap as the EVG list\nremove plots to Veg types in current zone and get the new dimensions\nsave the filtered plots\njoin the plots to the FIA_LFRDB.dbf\n\n**Build X and Y\n\nSet EVT, dist_code, dist_yr as factors plus another for dist_yr as numeric.\nrecord factor levels for dist_cd and year.\nAdd evt group to plot.df\nset the X and Ys is plot.df\nEnter the output folder\ncreate a vector of length to fill\nfor the number of evgs,\n\n\nset the current evg to match the rows of column 1 in evg.reclass.\nset sub.ind to equal be T/F where the current evg vector matches the reclass\nset evg.out to be i where T\n\n\nSet evg.in to factor(evg.out)\nadd the evg to plot.df\nas dist_cd to plot.df\nCreate the X table with aspect, and other variables.\nCreate the Y table.\nRun yai.\n\n\n\nCode\nyai.treelist &lt;- yai(X.df, Y.df, method = \"randomForest\", ntree = 249)\n\n\nThey may have used bootstrap = T in the training of the model, but it is not here in the code. That is why they do not get the empty classes error.\n\n\nPart 2\nBuild dfs\n\nGet the raster coordinates for cell centers\nPull out the aspect and elevation rasters\nPull cell numbers in row 1500 from the dem\nGet the coordinates of the centers for this row.\nextract the data from the stack at these coordinates.\nset coordinate system to p4s.latlong\nMake a raster for the current rows Xs\nMake a raster for the current rows Ys\n\nImpute Rows Function\n\nGet the current row and the center coordinates\nMake spatial points from centers\nextract raster stack to spatial points.\nSet up a df of the needed dimensions for the extracted data.\nAdd the X and Y coordinates.\nCorrect aspect to N and E.\nPull out and sort unique EVGs\nMake another list with EVGs that do not appear.\nif there are EVGs that do not appear, add rows for temporary variables\n*Maybe remove the CNs that have EVGs that do not appear.\nUse the yai object to get new targets for the filtered EVTs.\nreturn the new tagets for the current row.\n\nImpute the Map\n\nFor each row, in parallel, impute the new targets to a matrix\nCreate a raster from the matrix.\nsave and exit.",
    "crumbs": [
      "Other",
      "Research"
    ]
  },
  {
    "objectID": "2_FVS_Variables.html",
    "href": "2_FVS_Variables.html",
    "title": "2 FVS Vars",
    "section": "",
    "text": "Libraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \n# library(yaImpute)                     # RF imputation     \n# library(vegan)                        # Something to do the yaImpute \n# library(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                      \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\n# No sci-notation. \noptions(scipen = 999)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"db_list\", \"add_commas\")\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nadd_commas &lt;- function(n) {\n  t &lt;- prettyNum(n, \",\",scientific=FALSE)\n  return(noquote(t))\n}\n\n\n\nCreated on\n\n\n[1] \"2024-08-06 11:34:49 PDT\"\n\n\nLast updated on\n\n\n[1] \"2024-10-09 14:00:27 PDT\"\n\n\n\n\nIntro\nThis is the second document in a data pipeline from raw input data to Random Forests imputation. This page will deal with running FVS to get the RF predictor variables from FVS, then further filtering the data by Stem Exclusion and inventory cycle.\nThe standlist that I will read in has been filtered for the following: See 1_Import_Clean for specifics.\nThere were 7,168 plots within the 60k buffer. 7,168 plots\n\nCurrent plot design 6,800 plots\nEco-regions (level 4) in WA that exist inside the OkWen 60km Buffer, not the FOA 60 km buffer. 13,380 plots\nSingle condition plots. 9,965 plots\nForest or Savanna/not water or Un-sampled. 9,016 plots\n\nI wasn’t sure here, Non-Forest in this code means less than 10% cover. These were included.\n4,400 plots were only Accessible Forest\n\nArtificial regen 8,451 plots\nConditions such as Pasture, Range, Beaches and Windbreaks 3,835 plots\nFire damage 3,552 plots\n\n3,531 of these have trees.\n\nHabtypcd exists 3,448 plots\n\nThere are 104 CNs that do not have a habitat type code. I dropped them. I could go into the veg tables and determine an alternative code, but that might be laborious.\nOn those 3,448 plots, there were 13,792 subplots, 4 for each plot.\n\nmicrocond == subpcond 13,792 subplots\nFPAG/Habtypcd1 indicates Artificial, Non-Veg, or Water 13,784 subplots, 3,446 plots \n\nThere was one plot that was coded PIAL. I changed that by looking at the P2Veg and tree tables, then selecting the most appropriate code.\n\nInside those subplots, there were 350 unique habitat type codes that had 722 descriptions in the various publications.\n\n399 of the 722 had the same descriptions in different publications.\n\nThere were 42 habitat type codes that were not in the reference data.\n\n308 codes were unique and in the reference data.\n\nOf those that had repeat descriptions, they mostly had the same major trees, but there was variation in the grass/forb/shrubs.\nThere were 138 FPAGs\nThere were 68 FPAs\nThe same 6 EcoRegions are present.\n\n\n\nImport\nThe saved list of filtered plots is at “C:/RxFire/Regen/Regeneration_2_16Sept24/1_Import_Clean.csv”.\n\n# \"C:\\RxFire\\Regen\\Regeneration_2_16Sept24\\data\\homemade_fvs_db_08Oct24.db\"\n# \"C:\\RxFire\\Regen\\Regeneration_2_16Sept24\\data\\1_Import_Clean_JS_ECOSUBCD.csv\"\nstandlist &lt;- read_csv(\"./data/1_Import_Clean_JS_ECOSUBCD.csv\", \n                      # show_col_types = F\n                      col_types = \"ccnnnnnnnnccnnnnnnnnnnnnn\"\n                      ) %&gt;% select(CN)\nstandlist |&gt; glimpse()\n\nRows: 4,075\nColumns: 1\n$ CN &lt;chr&gt; \"24150101010900\", \"22398239010497\", \"24149614010900\", \"24151234010900\", \"24149217010900\", \"24151898010900\", \"24150792010900\", \"24153161010900\", \"24152642010900\", \"24183298010900\", \"24183014010900\", \"24182570010900\", \"24184034010900\", \"24181879010900\", \"24183554010900\", \"24182317010900\", \"24185085010900\", \"24184569010900\", \"22398316010497\", \"24186703010900\", \"24185416010900\", \"22398320010497\", \"24186143010900\", \"22398322010497\", \"24185701010900\", \"24187148010900\", \"22398319010497\", \"24192363010900\", \"22398354010497\", \"22398359010497\", \"24193687010900\", \"24193223010900\", \"22398357010497\", \"24191871010900\", \"24193999010900\", \"22398353010497\", \"22398356010497\", \"22398361010497\", \"22398358010497\", \"22398362010497\", \"24194797010900\", \"24204728010900\", \"24203073010900\", \"22398371010497\", \"22398370010497\", \"24202790010900\", \"22398373010497\", \"24205290010900\", \"22398375010497\", \"2420…\n\n\n\n\nFVS\nFVS runs faster if I subset the FIA database. It makes a call to the database for each stand, so a smaller database means less searching for matching CNs. I have not done that here, yet. The current iteration is running off of the full WA db.\n\n\nCode\n# rm(list = ls())\n\nlibrary(RSQLite)\nlibrary(tidyverse, quietly = T, warn.conflicts = F)\nlibrary(readxl)\n\noptions(scipen = 999)\n\n\n# 1. Set paths ---------------------------------------------------------------\n## Set all the file paths and names in this section. Then, run the rest of the script in sections 2. \n\n## Set the working directory\nfvs_wd &lt;- \"C:/RxFire/Regen/FVS\"\n\n## Where are the FVS executables? FVSbin? \n#  Include the /FVS prefix to variant.exe. \nFVSbin &lt;-  \"C:/FVSbin_v5.1/FVS\"\n\n# name = regen_MMDDYY_HHMM\nname &lt;- str_c(\"regen_\", \n              strftime(Sys.Date(),\"%m%d%y\"), \n              \"_\", \n              strftime(Sys.time(),\"%H%M\"))\n\ngetwd()\n## Set the path to the stand input database here, aka the output db from 3_CNs_to_FVS:\ninputDatabase &lt;- 'C:/RxFire/Regen/Regeneration_2_16Sept24/data/homemade_fvs_db_08Oct24.db'\n\n# State Original DB\n\n\n# 1.2 Standlist from xlsx -------------------------------------------------\n\nstandlist &lt;- standlist &lt;- read_csv(\"./data/1_Import_Clean_JS_ECOSUBCD.csv\", show_col_types = F) %&gt;% select(CN) \n# standlist &lt;- standlist[1:100, ]\n\n## I don't think I need to have the actual Variant. This is just to read the initial conditions. \nstandlist$FVSVariant &lt;- \"EC\"\n\n\n\n\n\n# 2. Batch file Creation -----------------------------------------------------\n## Run everything in section 2. There shouldn't be anything to change.\n#  Except, maybe createInputFile(group_stands$CN[s], if CN was read in as Stand_CN. \n\nint &lt;- Sys.time()\n\ncreate_dir &lt;- function(dir) {\n    if (!dir.exists(dir)) {\n      print(paste(\"Making Run directory: \", dir))\n      dir.create(dir)\n      } else(\n        print(str_c(dir, \", already exists\"))\n      )\n}\n\n# Create directory where FVS runs will be sent:\nRunDirectory &lt;- str_c(fvs_wd, '/', name)\ncreate_dir(RunDirectory)\n\n# Create input Directory\ninputDirectory &lt;- str_c(RunDirectory, \"/In\")\ncreate_dir(inputDirectory)\n\n# Create Cmd Directory\nCmdDirectory &lt;- str_c(RunDirectory, \"/Cmd\")\ncreate_dir(CmdDirectory)\n\n## The path to the FVS output database is set here:\noutputDatabase &lt;- str_c(RunDirectory, \"/\", name, \".db\")\n\n\n## This function creates the string for a single stand in FVS.\ncreateInputFile &lt;- function(stand, managementID, inputDatabase, outputDatabase){\n  # Create .key file\n  input &lt;- paste0('STDIDENT\\n',                     \n                  stand, '\\n',                     \n                  'STANDCN\\n',                     \n                  stand, '\\n',                     \n                  'MGMTID\\n',                     \n                  managementID,                     \n                  '\\n',                             \n                  'NUMCYCLE          1\\n', # Set time intervals. \n                  # 0 = Change all cycles | Cycle length to one year\n                  'TIMEINT           0         1\\n',\n                  'SCREEN\\n',               \n                  ## Database in    \n                  'DATABASE\\n',\n                  'DSNIN\\n',                                                \n                  inputDatabase, '\\n',  \n                  ## Stand\n                  'StandSQL\\n',                                             \n                  'SELECT * FROM FVS_PLOTINIT_PLOT\\n',\n                  # 'SELECT * FROM FVS_PlotInit\\n',  # For a different table name                   \n                  # \"WHERE  STANDPLOT_CN  = '%STAND_CN%'\\n\",                     \n                  \"WHERE  STAND_CN  = '%STAND_CN%'\\n\",                     \n                  'EndSQL\\n',                                                    \n                  'DSNIN\\n',                                          \n                  inputDatabase, '\\n',                                             \n                  ## Tree\n                  'TreeSQL\\n',\n                  'SELECT * FROM FVS_TREEINIT_PLOT\\n',\n                  # 'SELECT * FROM FVS_TreeInit\\n',                              \n                  # \"WHERE  STANDPLOT_CN  = '%STAND_CN%'\\n\",                            \n                  \"WHERE  STAND_CN  = '%STAND_CN%'\\n\",                            \n                  'EndSQL\\n',                                                          \n                  'END\\n',   \n                  ##\n                  'STRCLASS\\n',\n                  # year of compute 0 = Every cycle\n                  'COMPUTE           0\\n',                                                                        # Compute below here\n                  # # acancov defined when str_class is used, after thin Canopy\n                  'CC = bcancov\\n',\n                  'END\\n',                                                                                            # Compute ends\n                  'DATABASE\\n',                                                                                     # DB Out Starts\n                  'DSNOUT\\n',                                      \n                  outputDatabase, '\\n',\n                  'SUMMARY           2\\n',\n                  'StrClsDB\\n',\n                  'COMPUTDB\\n',\n                  'END\\n',\n                  'Process\\n\\n')                                    \n                   \n  \n}\n\nwrite(str_c(\"set RScript=\", \" \\\"\", \"C:/Program Files/R/R-4.4.1/bin/Rscript.exe\", \"\\\"\",\n            \"\\n \\n\",\n            \"cd \", inputDirectory, \"\\n\\n\"), paste0(RunDirectory, '\\\\test.bat'), append = \"TRUE\")\n\n\n\nfor (g in unique(standlist$FVSVariant)) {\n  masterkeys &lt;- NULL\n  group_stands &lt;- subset(standlist, FVSVariant == g)\n  for (s in 1:nrow(group_stands)) {\n    \n    keywords &lt;- createInputFile(stand = group_stands$CN[s], managementID = group_stands$CN[s], \n                                inputDatabase = inputDatabase,\n                                outputDatabase = outputDatabase\n                                )\n    \n    masterkeys &lt;- paste0(masterkeys, keywords)\n  }\n  # Print to the key file\n  masterkeys &lt;- paste0(masterkeys, \"\\nSTOP\\n\")\n  # \"\\n STOP?\\n\" or \"\\nSTOP\\n\", outfile has errors 1 & 2, invalid keyword & no Stop\n  file_name &lt;- str_sub(g, end = -5)\n  write(masterkeys, file = str_c(inputDirectory, '\\\\', g, '.key'))\n  \n  ## Create the .in file ##\n  fvs_in &lt;- paste0(g, \".key\\n\",\n                   g, \".fvs\\n\",\n                   g, \".out\\n\",\n                   g, \".trl\\n\",\n                   g, \".sum\\n\")\n  \n  fvs_in_file &lt;- paste0(inputDirectory, '\\\\', g, '.in')\n  write(fvs_in, file = fvs_in_file)\n  fvs_bat &lt;- paste0(FVSbin, unique(group_stands$FVSVariant), \".exe &lt; \", g, \".in &gt;\",\n                    RunDirectory, \"/Cmd/\", g, \".txt\", \" 2&gt;&1\", \"\\n\",\n                    # Send each CMD file to this script\n                    \"%RScript%\",\" C:/RxFire/Scripts/ErrorProcessing/RcmdProcess.R \",\n                    \"\\\"\", RunDirectory, \"/Cmd/\", g, \".txt\", \"\\\"\", \"\\n\")\n  \n  write(fvs_bat, paste0(RunDirectory, '\\\\test.bat'), append = \"TRUE\")\n}\n\n# Summarize the OUT files\nfvs_errors &lt;- str_c(\"\\nREM This one cleans in extra files out and summarizes the output the Run Directory \\n\",\n                    \"%RScript%\",\" C:/RxFire/Scripts/ErrorProcessing/RfvsProcess.R \",\n                    \"\\\"\", RunDirectory, \"/In\", \"\\\"\")\n\nwrite(fvs_errors, paste0(RunDirectory, '\\\\test.bat'), append = \"TRUE\")\n\n# write(\"PAUSE\", paste0(inputDirectory, '\\\\test.bat'), append = \"TRUE\")\n\ncon &lt;- dbConnect(RSQLite::SQLite(), outputDatabase)\ndbWriteTable(conn = con, name = \"standlist\", value = standlist, overwrite = T)\ndbDisconnect(con)\n\nout &lt;- Sys.time()\n\nprint(out - int)\n\n# Run this Batch file\nshell.exec(str_c(RunDirectory, '\\\\test.bat'))\n\n\nI am copying some stuff from the above code here. That way I don’t need to run fvs each time.\n\nI accidentally overwrote the last db and the copy while altering the imputation data. I also had not yet added the changes from Missoula, so I am going through it now and fixing all of it. 9/17/24\n\n\n# outputDatabase &lt;- \"C:\\RxFire\\Regen\\FVS\\regen_100824_1643\\regen_100824_1643.db\"\n\noutputDatabase &lt;- \"C:/RxFire/Regen/FVS/regen_100824_1643/regen_100824_1643.db\"\n\n32 minutes to run.\n11 min to run on second time through. I ran it at night this time.\n\n\nExtract variables\nIn this case, the output table compute has the before anything CC and Year. The other tables have an start and end year. So, using the compute table makes it easy to select the correct Year without setting INV_Year in the database.\n\ncon &lt;- dbConnect(RSQLite::SQLite(), outputDatabase)\n\nxVars &lt;- dbGetQuery(con, str_c(\n  \"Select \n   FVS_Compute.CC, \n   FVS_Summary2.Year, FVS_Summary2.BA, FVS_Summary2.SDI, \n   FVS_Cases.CaseID, FVS_Cases.StandID\n   From FVS_Cases \n   LEFT join FVS_Compute on FVS_Compute.CaseID = FVS_Cases.CaseID\n   LEFT join FVS_Summary2 on FVS_Summary2.CaseID = FVS_Cases.CaseID \n   Where FVS_SUMMARY2.YEAR = 2014\"))\n\ndbDisconnect(con)\n\n\nkeep &lt;- append(keep, c(\"xVars\", \"standlist\", \"outputDatabase\"))\n\nclean_mem()\n\n          used (Mb) gc trigger  (Mb) max used  (Mb)\nNcells 1227808 65.6    2429354 129.8  2429354 129.8\nVcells 2207490 16.9    8388608  64.0  3455571  26.4\n\n\n\n\nFilter\n\n\nInventory Cycle\nGet PLT_CN and pull the PLOT ids\n\nplt_cn &lt;- db_list(xVars, StandID)\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"c:/RxFire/Data/_FIADB_WA.db\")\nplots &lt;- dbGetQuery(con, str_c(\"select * from PLOT where CN in (\", plt_cn, \")\"))\ndbDisconnect(con)\nplots &lt;- plots |&gt; rename(PLT_CN = CN)\nplots &lt;- clean_na_cols(plots)\n\nstandlist &lt;- standlist %&gt;% rename(PLT_CN = CN) %&gt;% mutate(PLT_CN = as.character(PLT_CN))\nt_plots &lt;- left_join(standlist, plots, join_by(PLT_CN))\nt_plots |&gt; nrow() %&gt;% add_commas()\n\n[1] 4,075\n\n\n\n# For each PLOTid, find the years of each visit. \na &lt;- t_plots |&gt; \n  select(PLT_CN, PREV_PLT_CN, INVYR, PLOT) |&gt; \n  group_by(PLOT, INVYR) |&gt; \n  summarise(\n    n = n(), \n    .groups = \"drop\") |&gt; \n  \n  arrange(PLOT, desc(INVYR)) |&gt; select(-n)\n\n# Add a tag for first or second visit\na &lt;- a |&gt; group_by(PLOT) |&gt; \n  mutate(\n    instance = str_c(\"visit_\", row_number())\n    )\n\n# Make it wider to see where there was only one visit*\nplot_yr &lt;- a |&gt; select(PLOT, INVYR, instance) |&gt; \n  pivot_wider(\n    names_from = instance, values_from = INVYR)\n\nplot_yr |&gt; nrow() %&gt;% add_commas()\n\n[1] 2,533\n\nplot_yr |&gt; head()\n\n\n\n\n\nPLOT\nvisit_1\nvisit_2\n\n\n\n\n50024\n2018\nNA\n\n\n50074\n2017\n2007\n\n\n50166\n2011\nNA\n\n\n50194\n2011\nNA\n\n\n50221\n2017\n2007\n\n\n50226\n2019\n2009\n\n\n\n\n\n\n\n2,533 PLOTs with 4075 visits.\n\nNumber of visits\n\nv1 &lt;- a |&gt; filter(instance == \"visit_1\")\nsum(!is.na(plot_yr$visit_1)) %&gt;% add_commas()\n\n[1] 2,533\n\n## [1] 6064\nv2 &lt;- a |&gt; filter(instance == \"visit_2\")\nsum(!is.na(plot_yr$visit_2)) %&gt;% add_commas()\n\n[1] 1,542\n\n## [1] 2481\n\n\n2,533 PLOTs, 1,542 had earlier visits.\n\n\nplots_2vis &lt;- plot_yr |&gt; filter(!is.na(visit_2)) |&gt; select(PLOT)\nplots_1vis &lt;- plot_yr |&gt; filter(is.na(visit_2)) |&gt; select(PLOT)\n\nplots_2vis &lt;- left_join(plots_2vis, t_plots, join_by(PLOT))\nplots_1vis &lt;- left_join(plots_1vis, t_plots, join_by(PLOT))\n\nplots_2vis &lt;- plots_2vis |&gt; \n  group_by(PLOT, PLT_CN, INVYR) |&gt; \n  summarise(\n    n = n(), \n    .groups = \"drop\") |&gt; \n  arrange(PLOT, desc(INVYR)) |&gt; \n  group_by(PLOT) |&gt; \n  mutate(instance = str_c(\"visit_\", row_number())) |&gt; \n  ungroup()\n\n# write_csv(splots_2vis, \"C:/RxFire/Regen/Regen_Notes/Subplots_w2visits.csv\")\n\nplots_2vis &lt;- plots_2vis |&gt; \n  filter(instance == \"visit_2\") |&gt; select(PLT_CN, INVYR, instance)\n\nplots_1vis &lt;- plots_1vis |&gt; \n  group_by(PLOT, PLT_CN, INVYR) |&gt; \n  summarise(\n    n = n(), \n    .groups = \"drop\") |&gt;\n  arrange(PLOT, desc(INVYR)) |&gt; \n  group_by(PLOT) |&gt; \n  mutate(instance = str_c(\"visit_\", row_number())) |&gt; \n  ungroup()\n\n\nplots_1vis &lt;- plots_1vis |&gt; \n  filter(instance == \"visit_1\") |&gt; select(PLT_CN, INVYR, instance)\n\n\nsummary(plots_2vis)\n\n    PLT_CN              INVYR        instance        \n Length:1542        Min.   :2002   Length:1542       \n Class :character   1st Qu.:2004   Class :character  \n Mode  :character   Median :2006   Mode  :character  \n                    Mean   :2006                     \n                    3rd Qu.:2008                     \n                    Max.   :2010                     \n\n\n\nnrow(plots_1vis) %&gt;% add_commas()\n\n[1] 991\n\nnrow(plots_2vis) %&gt;% add_commas()\n\n[1] 1,542\n\n(nrow(plots_1vis) + nrow(plots_2vis)) %&gt;% add_commas()\n\n[1] 2,533\n\n\n\n1,542 PLOTs with two vists, 991 with one of 2,533.\n\n1,542 + 991 = 2,533 for training, 1,542 for testing.\n\n\ntraining_set &lt;- add_row(plots_2vis, plots_1vis) |&gt; select(-instance)\ntesting_set &lt;- anti_join(t_plots, training_set, join_by(PLT_CN, INVYR)) |&gt; select(PLT_CN, INVYR)\n\ntraining_set$TRAIN &lt;- T\ntesting_set$TRAIN &lt;- F\n\nstandlist &lt;- add_row(training_set, testing_set)\n\nsum(standlist$TRAIN)\n\n[1] 2533\n\n\n\n# getwd()\n# write_csv(standlist, \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/train_and_test_09Oct24.csv\")\n\n\nxVars &lt;- xVars %&gt;% select(-c(CaseID, Year)) %&gt;% relocate(PLT_CN = StandID)\n\n# con &lt;- dbConnect(RSQLite::SQLite(), \"C:/RxFire/Regen/Regeneration_2_16Sept24/data/homemade_fvs_db_08Oct24.db\")\n# dbWriteTable(conn = con, name = \"x_pred\", value = xVars, overwrite = T)\n# dbDisconnect(con)",
    "crumbs": [
      "Data Prep",
      "2 FVS Vars"
    ]
  },
  {
    "objectID": "4_RF_by_Eco.html",
    "href": "4_RF_by_Eco.html",
    "title": "4 RF Ecos",
    "section": "",
    "text": "Libraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \n# library(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \n# library(kableExtra)                   # Better html tables, change sizes        \n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\n\n\n\nCreated on\n\n\n[1] \"2024-08-10 11:39:33 PDT\"\n\n\nLast updated on\n\n\n[1] \"2024-10-09 14:00:49 PDT\"\n\n\n\n\nImport\n\nrm(list = ls())\n\n\nimp_db &lt;- clean_paths(r\"(./data/homemade_fvs_db2.db)\")\n\n\ncon &lt;- dbConnect(RSQLite::SQLite(), imp_db)\n\nimp_data &lt;- dbGetQuery(con, \"select * from imp_data\")\n\neco_names &lt;- tribble(~Eco3, ~ECO_NAME, \n        \"242A\",  \"Puget Tr.\", \n        \"342I\",  \"Columbia B.\", \n        \"M242B\", \"W.Cascades\", \n        \"M242C\", \"E.Cascades\", \n        \"M242D\", \"N.Cascades\", \n        \"M333A\", \"Ok. High\")\n\n\nn_cascades &lt;- imp_data |&gt; filter(EcoRegion == \"M242D\") |&gt; select(-EcoRegion)\n\n\n\nN. Cascades\n\n# n_cascades |&gt; str()\nnames(n_cascades)\n\n [1] \"STANDPLOT_CN\" \"CC\"           \"SDI\"          \"FPAG\"         \"LAT\"          \"LON\"          \"ELEV\"         \"ASPECT\"       \"SLOPE\"        \"BAp\"          \"PIPO_BA\"      \"PSME_BA\"      \"ABAM_BA\"      \"TSME_BA\"      \"ABGR_BA\"      \"PICO_BA\"      \"LALY_BA\"      \"PIAL_BA\"      \"PIEN_BA\"      \"ABLA_BA\"      \"LAOC_BA\"      \"THPL_BA\"      \"ALRU2_BA\"     \"TSHE_BA\"      \"TABR2_BA\"     \"CHNO_BA\"      \"POBAT_BA\"     \"ABPR_BA\"      \"BEPA_BA\"      \"PREM_BA\"      \"CONU4_BA\"     \"POTR5_BA\"     \"PIMO3_BA\"     \"ACGL_BA\"      \"FRLA_BA\"      \"ACMA3_BA\"     \"2TREE_BA\"     \"ALRH2_BA\"     \"QUGA4_BA\"     \"PRVI_BA\"      \"MAFU_BA\"      \"PISI_BA\"      \"ABCO_BA\"      \"JUHI_BA\"      \"ARME_BA\"      \"BEOC2_BA\"     \"PIPO_TD\"      \"ABLA_TD\"      \"TSME_TD\"      \"PSME_TD\"      \"ABGR_TD\"      \"LALY_TD\"      \"PIEN_TD\"      \"PICO_TD\"      \"LAOC_TD\"      \"ACGL_TD\"      \"TABR2_TD\"     \"CHNO_TD\"      \"ABAM_TD\"     \n[60] \"THPL_TD\"      \"TSHE_TD\"      \"BEPA_TD\"      \"PREM_TD\"      \"POTR5_TD\"     \"PIAL_TD\"      \"ALRU2_TD\"     \"ABPR_TD\"      \"PIMO3_TD\"     \"PRVI_TD\"      \"2TB_TD\"       \"ACMA3_TD\"     \"CONU4_TD\"     \"QUGA4_TD\"     \"MAFU_TD\"      \"ABCO_TD\"      \"PSMA_TD\"      \"ALRH2_TD\"     \"POBAT_TD\"     \"BEOC2_TD\"     \"PRPE2_TD\"     \"CHLA_TD\"      \"PISI_TD\"     \n\n\nSeparating the predictors from the responses\n\nx_pred &lt;- n_cascades[,1:46]\nnames(x_pred)\n\n [1] \"STANDPLOT_CN\" \"CC\"           \"SDI\"          \"FPAG\"         \"LAT\"          \"LON\"          \"ELEV\"         \"ASPECT\"       \"SLOPE\"        \"BAp\"          \"PIPO_BA\"      \"PSME_BA\"      \"ABAM_BA\"      \"TSME_BA\"      \"ABGR_BA\"      \"PICO_BA\"      \"LALY_BA\"      \"PIAL_BA\"      \"PIEN_BA\"      \"ABLA_BA\"      \"LAOC_BA\"      \"THPL_BA\"      \"ALRU2_BA\"     \"TSHE_BA\"      \"TABR2_BA\"     \"CHNO_BA\"      \"POBAT_BA\"     \"ABPR_BA\"      \"BEPA_BA\"      \"PREM_BA\"      \"CONU4_BA\"     \"POTR5_BA\"     \"PIMO3_BA\"     \"ACGL_BA\"      \"FRLA_BA\"      \"ACMA3_BA\"     \"2TREE_BA\"     \"ALRH2_BA\"     \"QUGA4_BA\"     \"PRVI_BA\"      \"MAFU_BA\"      \"PISI_BA\"      \"ABCO_BA\"      \"JUHI_BA\"      \"ARME_BA\"      \"BEOC2_BA\"    \n\ny_resp &lt;- n_cascades[, c(1, 47:ncol(n_cascades))]\n\n# x |&gt; str()\n\n\nnames(y_resp)\n\n [1] \"STANDPLOT_CN\" \"PIPO_TD\"      \"ABLA_TD\"      \"TSME_TD\"      \"PSME_TD\"      \"ABGR_TD\"      \"LALY_TD\"      \"PIEN_TD\"      \"PICO_TD\"      \"LAOC_TD\"      \"ACGL_TD\"      \"TABR2_TD\"     \"CHNO_TD\"      \"ABAM_TD\"      \"THPL_TD\"      \"TSHE_TD\"      \"BEPA_TD\"      \"PREM_TD\"      \"POTR5_TD\"     \"PIAL_TD\"      \"ALRU2_TD\"     \"ABPR_TD\"      \"PIMO3_TD\"     \"PRVI_TD\"      \"2TB_TD\"       \"ACMA3_TD\"     \"CONU4_TD\"     \"QUGA4_TD\"     \"MAFU_TD\"      \"ABCO_TD\"      \"PSMA_TD\"      \"ALRH2_TD\"     \"POBAT_TD\"     \"BEOC2_TD\"     \"PRPE2_TD\"     \"CHLA_TD\"      \"PISI_TD\"     \n\n\nThis is where I am not sure what to do.\n\nI can either run this as the full set of x and y, or try and select the overstory species by the seedlings.\nRF will not take factors with empty classes, so at the least I have to split up the FPAGs into F.P.A.G.\nShould also remove the empty tree categories.\n\nThere is also the issue of stands that have overstory, but not under. If there is no regeneration, then those stands should probably go into the probability of regeneration part of the model and not the regeneration after deciding if regen is to happen.\nI would like to model the probability of regeneration in this model as well. In fact, I could just run the RF for that first. I was considering a logit, but RF would be faster to try.\nHow should I deal with the empty As and Gs. NAs would be the best way to deal with them, but I do not know how RF will take that. I could give them unique codes, but then I am adding data. I guess I can leave them as empty characters. That feels wrong, but I can’t think of a reason why it wouldn’t work the same. For now I will leave them as empties.\n\nx_pred &lt;- x_pred |&gt; mutate(\n  f = str_sub(FPAG, 1, 1),\n  p = str_sub(FPAG, 2, 2),\n  a = str_sub(FPAG, 3, 3),\n  g = str_sub(FPAG, 4, 4),\n) |&gt; select(-FPAG)\n\n\nNC largest BA spp\n\nt &lt;- x_pred  |&gt; select_if(is.numeric)\nt &lt;- t[, colSums(t) != 0]\n\nt2 &lt;- sapply(t[,9:ncol(t)], sum)\nt2 &lt;- t2 |&gt; sort(decreasing = T)\nt2\n\n      PSME_BA       ABAM_BA       TSHE_BA       THPL_BA       TSME_BA       ABLA_BA       PIPO_BA       PICO_BA       PIEN_BA       ABGR_BA       CHNO_BA      ALRU2_BA       PIAL_BA       LAOC_BA      ACMA3_BA       LALY_BA      PIMO3_BA       ABPR_BA      POBAT_BA       ACGL_BA       PISI_BA      TABR2_BA      POTR5_BA       BEPA_BA       PREM_BA      ALRH2_BA       MAFU_BA      CONU4_BA       PRVI_BA      2TREE_BA \n26739.7932824 20532.4595711 19284.3462117  8513.0268588  7399.8409280  5252.8166352  4870.9300874  2940.4700282  2830.3465026  2489.4660372  1328.7801453  1245.0262140   573.6183870   531.6589495   438.1439843   363.7744168   287.4134388   272.5000457   251.0438668   146.7487189   133.5668888    91.8866365    85.8487632    49.0018027    19.7650810     2.6586163     2.3550373     2.2109185     1.3901262     0.6909745 \n\n\n\nMost prevelant by stand\n\nj &lt;- 5\nj &lt;- NULL\n# rm(j)\n\nimps &lt;- c()\nimps_err &lt;- c()\n# for (j in 1:length(li_env)) {\nfor (j in 1:50) { \n  data &lt;- get(li_env[j])\n  cns &lt;- data |&gt; select(STANDPLOT_CN) |&gt; rownames_to_column(\"id\")\n  data &lt;- data |&gt; select(-STANDPLOT_CN)\n  \n  \n  # refs &lt;- rownames(data[1:nrow(data) - 1,])\n  refs &lt;- rownames(data[1:(nrow(data)*.75),])\n\n  x &lt;- data |&gt; select(CC, BA, SDI, ELEVFT, SLOPE, ASPECT, PHYSCLCD)\n  \n  yfull &lt;- data |&gt; select(any_of(names_y))\n  y &lt;- yfull #[refs,]\n  y &lt;- y |&gt; relocate(total_TD, .after = last_col())\n  \n  y_vars &lt;- names(y)\n  b &lt;- y_vars[!y_vars %in% \"total_TD\"]\n  \n  # loop to find the 3 columns with the most TPA\n  for (i in 1:2) {\n    \n    c_value &lt;- str_c(\"largest_\", i)\n    \n    y &lt;- y %&gt;%\n      rowwise() %&gt;%\n      mutate(!!c_value := n_largest(c_across(all_of(b)), i)) |&gt;\n      ungroup()\n  }\n  # Setting spp names to the largest columns\n  y$max_spp1 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_1[x])][1])\n  y$max_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][1])\n  y$alt_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][2])\n  # y$max_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][1])\n  # y$alt_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][2])\n  \n  y &lt;- y |&gt; mutate(\n    max_spp2 = if_else(largest_1 == largest_2, alt_spp2, max_spp2),\n    # max_spp3 = if_else(largest_2 == largest_3, alt_spp3, max_spp3)\n    ) |&gt; select(-c(alt_spp2))#, alt_spp3\n  \n  yfull &lt;- y |&gt; mutate(\n    max_spp1 = ifelse(largest_1 == 0, \"zero\", max_spp1),\n    max_spp2 = ifelse(largest_2 == 0, \"zero\", max_spp2),\n    # max_spp3 = ifelse(largest_3 == 0, \"zero\", max_spp3)\n    )\n  \n  y &lt;- yfull[, y_vars] #refs\n  \n  vars_yrf &lt;- c(\"total_TD\")\n  vars_yrf &lt;- append(vars_yrf, names(yfull)[!names(yfull) %in% y_vars])\n  \n  yrf &lt;- yfull[, vars_yrf]#refs\n  \n  \n  x$PHYSCLCD &lt;- factor(x$PHYSCLCD)\n  \n  yrf$max_spp1 &lt;- factor(yrf$max_spp1)\n  yrf$max_spp2 &lt;- factor(yrf$max_spp2)\n  # yrf$max_spp3 &lt;- factor(yrf$max_spp3)\n  yrf &lt;- droplevels(yrf)\n  # str(yrf)\n  \n  \n  cns$id &lt;- as.integer(cns$id)\n  \n  x &lt;- as.data.frame(x)\n  yrf &lt;- as.data.frame(yrf)\n  y &lt;- as.data.frame(y)\n  \n  x2 &lt;- x |&gt; rowid_to_column(\"id\")\n  x2 &lt;- left_join(x2, cns, by = \"id\") |&gt; select(-id)\n  x &lt;- x2 |&gt; column_to_rownames(\"STANDPLOT_CN\")\n  \n  yrf2 &lt;- yrf |&gt; rowid_to_column(\"id\")\n  yrf2 &lt;- left_join(yrf2, cns, by = \"id\") |&gt; select(-id)\n  yrf &lt;- yrf2 |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\n  y &lt;- y |&gt; rowid_to_column(\"id\")\n  y &lt;- left_join(y, cns, by = \"id\") |&gt; select(-id)\n  y &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n  save(y, file = str_c(\"imps_0417/y_\", j, \".Rdata\"))\n  \n  # tryCatch({\n  #   rf_yai &lt;- yai(x = x, y = yrf, method = \"randomForest\", k = k, bootstrap = T)\n  #   \n  #   assign(rf_i, rf_yai)\n  #   imps &lt;- append(imps, rf_i)\n  #   \n  #   save(rf_i, file = str_c(\"imps_0417/\",rf_i, \".Rdata\"))\n  #   \n  #   }, error = function(cond){cat(\n  #     \"ERROR \",conditionMessage(cond), \"_\",li_env[j], \"_\"\n  #     )})\n  \n  rf_yai &lt;- yai(x = x, y = yrf, method = \"randomForest\", k = k, bootstrap = T)\n  save(rf_yai, file = str_c(\"imps_0417/\", str_c(\"rf_\", li_env[j]), \".Rdata\"))\n  \n  \n  rf_i &lt;- str_c(\"rf_\", li_env[j])\n  imps &lt;- append(imps, rf_i)\n}\n\nSeedlings in decreasing order\n\nt &lt;- y_resp  |&gt; select_if(is.numeric)\nt &lt;- t[, colSums(t) != 0]\n\nty &lt;- sapply(t[,1:ncol(t)], sum)\nty &lt;- ty |&gt; sort(decreasing = T)\n\nb &lt;- names(ty)\nb\n\n [1] \"ABAM_TD\"  \"TSHE_TD\"  \"ABLA_TD\"  \"PSME_TD\"  \"PIEN_TD\"  \"ABGR_TD\"  \"TSME_TD\"  \"PICO_TD\"  \"THPL_TD\"  \"LAOC_TD\"  \"CHNO_TD\"  \"TABR2_TD\" \"PIPO_TD\"  \"PIAL_TD\"  \"POTR5_TD\" \"PIMO3_TD\" \"LALY_TD\"  \"PREM_TD\"  \"ACMA3_TD\" \"PRVI_TD\"  \"ACGL_TD\"  \"ALRU2_TD\" \"BEPA_TD\"  \"ABPR_TD\"  \"POBAT_TD\" \"2TB_TD\"   \"PSMA_TD\"  \"ALRH2_TD\" \"PISI_TD\" \n\n\nN.Cascades drops from 35 to 28 columns after removing empty Seedling categories.\n\nn_largest &lt;- function(x = b, n) {\n  \n  # In descending order, prevelance\n  x1 &lt;- sort(x, decreasing = TRUE)\n  # Select the nth most prevelant. \n  x1[n]\n}\n\n\n# response &lt;-  y\n\ny &lt;- y_resp |&gt; select(-STANDPLOT_CN)\nb &lt;- names(y)\n\nfor (i in 1:3) {\n    \n    c_value &lt;- str_c(\"largest_\", i)\n    \n    y &lt;- y %&gt;%\n      rowwise() %&gt;%\n      mutate(!!c_value := n_largest(c_across(all_of(b)), i)) |&gt;\n      ungroup()\n}\n\n\n\n\nAdd species names for largest spp counts\n\n# Setting spp names to the largest columns\ny$max_spp1 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_1[x])][1])\ny$max_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][1])\ny$alt_spp2 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_2[x])][2])\ny$max_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][1])\ny$alt_spp3 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_3[x])][2])\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = if_else(largest_1 == largest_2, alt_spp2, max_spp2),\n  max_spp3 = if_else(largest_2 == largest_3, alt_spp3, max_spp3)\n  ) |&gt; select(-c(alt_spp2, alt_spp3))#, alt_spp3\n\nyfull &lt;- y |&gt; mutate(\n  max_spp1 = ifelse(largest_1 == 0, \"zero\", max_spp1),\n  max_spp2 = ifelse(largest_2 == 0, \"zero\", max_spp2),\n  max_spp3 = ifelse(largest_3 == 0, \"zero\", max_spp3)\n  )\n\nyfull$STANDPLOT_CN &lt;- y_resp$STANDPLOT_CN\n\nyfull &lt;- yfull |&gt; relocate(STANDPLOT_CN)\n\nyfull |&gt; filter(STANDPLOT_CN == \"22954484010497_4\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nPIPO_TD\nABLA_TD\nTSME_TD\nPSME_TD\nABGR_TD\nLALY_TD\nPIEN_TD\nPICO_TD\nLAOC_TD\nACGL_TD\nTABR2_TD\nCHNO_TD\nABAM_TD\nTHPL_TD\nTSHE_TD\nBEPA_TD\nPREM_TD\nPOTR5_TD\nPIAL_TD\nALRU2_TD\nABPR_TD\nPIMO3_TD\nPRVI_TD\n2TB_TD\nACMA3_TD\nCONU4_TD\nQUGA4_TD\nMAFU_TD\nABCO_TD\nPSMA_TD\nALRH2_TD\nPOBAT_TD\nBEOC2_TD\nPRPE2_TD\nCHLA_TD\nPISI_TD\nlargest_1\nlargest_2\nlargest_3\nmax_spp1\nmax_spp2\nmax_spp3\n\n\n\n\n22954484010497_4\n0\n0\n74.96528\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8321.146\n0\n374.8264\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8321.146\n374.8264\n74.96528\nABAM_TD\nTSHE_TD\nTSME_TD\n\n\n\n\n\nyfull[1:5, 36:41]\n\n\n\n\n\nCHLA_TD\nPISI_TD\nlargest_1\nlargest_2\nlargest_3\nmax_spp1\n\n\n\n\n0\n0\n0.0000\n0\n0\nzero\n\n\n0\n0\n0.0000\n0\n0\nzero\n\n\n0\n0\n0.0000\n0\n0\nzero\n\n\n0\n0\n0.0000\n0\n0\nzero\n\n\n0\n0\n149.9306\n0\n0\nPIPO_TD\n\n\n\n\n\n\n\nyfull &lt;- yfull |&gt; mutate(\n  total_TD = rowSums(yfull[grep(\"_TD\", names(yfull))])\n)\n\n\n\n\nN.Cascades data\nyfull  |&gt; filter(total_TD &gt; 0) |&gt; group_by(max_spp1) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_1))\n  ) |&gt; arrange(desc(sum_tpa)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp1,-sum_tpa), y = sum_tpa, fill = max_spp1) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N trees in largest_spp in N.C. above zero\"\n  )\nyfull |&gt; filter(total_TD &gt; 0)  |&gt; group_by(max_spp1) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_1))\n  ) |&gt; arrange(desc(n)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp1,-n), y = n, fill = max_spp1) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N Plots in largest_spp in N.C. above zero\"\n  )\n\n\n\n\n\n\n\n\n\n\nIn N.Cascades, there ABAM and TSHE, then another between ABLA and PSME.\nThere are two ways I can think about this. One is which species has the most trees. The other is which species is most often the largest species.\n\nSpp 2\nyfull |&gt; filter(total_TD &gt; 0)  |&gt; group_by(max_spp2) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_2))\n  ) |&gt; arrange(desc(sum_tpa)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp2,-sum_tpa), y = sum_tpa, fill = max_spp2) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N trees in largest_spp2 in N.C. above zero\"\n  )\nyfull |&gt; filter(total_TD &gt; 0) |&gt; group_by(max_spp2) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_2))\n  ) |&gt; arrange(desc(n)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp2,-n), y = n, fill = max_spp2) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N Plots in largest_spp2 in N.C. above zero\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nSpp 3\nyfull |&gt; filter(total_TD &gt; 0)  |&gt; group_by(max_spp3) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_3))\n  ) |&gt; arrange(desc(sum_tpa)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp3,-sum_tpa), y = sum_tpa, fill = max_spp3) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N trees in largest_spp3 in N.C. above zero\"\n  )\nyfull |&gt; filter(total_TD &gt; 0) |&gt; group_by(max_spp3) |&gt; \n  summarise(\n    n = n(), \n    sum_tpa = round(sum(largest_3))\n  ) |&gt; arrange(desc(n)) |&gt; \n  ggplot() + \n  aes(x = fct_reorder(max_spp3,-n), y = n, fill = max_spp3) +\n  geom_col(show.legend = FALSE) + \n  scale_x_discrete(guide = guide_axis(angle = 45)) + \n  labs(\n    title = \"N Plots in largest_spp3 in N.C. above zero\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nAll species in the max two\n\nspp1 &lt;- unique(yfull$max_spp1)\nspp2 &lt;- unique(yfull$max_spp2)\n\n\nspp1 |&gt; sort()\n\n [1] \"ABAM_TD\"  \"ABGR_TD\"  \"ABLA_TD\"  \"ACGL_TD\"  \"ACMA3_TD\" \"ALRH2_TD\" \"ALRU2_TD\" \"BEPA_TD\"  \"CHNO_TD\"  \"LALY_TD\"  \"LAOC_TD\"  \"PIAL_TD\"  \"PICO_TD\"  \"PIEN_TD\"  \"PIMO3_TD\" \"PIPO_TD\"  \"POBAT_TD\" \"POTR5_TD\" \"PREM_TD\"  \"PRVI_TD\"  \"PSMA_TD\"  \"PSME_TD\"  \"TABR2_TD\" \"THPL_TD\"  \"TSHE_TD\"  \"TSME_TD\"  \"zero\"    \n\n\n\nspp2 |&gt; sort()\n\n [1] \"2TB_TD\"   \"ABAM_TD\"  \"ABGR_TD\"  \"ABLA_TD\"  \"ABPR_TD\"  \"ACGL_TD\"  \"ACMA3_TD\" \"ALRU2_TD\" \"CHNO_TD\"  \"LALY_TD\"  \"LAOC_TD\"  \"PIAL_TD\"  \"PICO_TD\"  \"PIEN_TD\"  \"PIMO3_TD\" \"PIPO_TD\"  \"POBAT_TD\" \"POTR5_TD\" \"PREM_TD\"  \"PRVI_TD\"  \"PSME_TD\"  \"TABR2_TD\" \"THPL_TD\"  \"TSHE_TD\"  \"TSME_TD\"  \"zero\"    \n\n\n\nspp12 &lt;- append(spp1, spp2) |&gt; unique()\nspp12\n\n [1] \"zero\"     \"PIPO_TD\"  \"ABLA_TD\"  \"PSME_TD\"  \"ABGR_TD\"  \"LALY_TD\"  \"PIEN_TD\"  \"TABR2_TD\" \"ABAM_TD\"  \"TSME_TD\"  \"TSHE_TD\"  \"BEPA_TD\"  \"POTR5_TD\" \"LAOC_TD\"  \"ACGL_TD\"  \"PIAL_TD\"  \"PICO_TD\"  \"THPL_TD\"  \"CHNO_TD\"  \"ACMA3_TD\" \"ALRU2_TD\" \"PIMO3_TD\" \"PSMA_TD\"  \"PREM_TD\"  \"ALRH2_TD\" \"PRVI_TD\"  \"POBAT_TD\" \"2TB_TD\"   \"ABPR_TD\" \n\n\nNames of columns where the overstory matches species in understory\n\nregen_species &lt;- str_replace_all(spp12, \"_TD\", \"_BA\")\nregen_species &lt;- regen_species[2:29]\nregen_species\n\n [1] \"PIPO_BA\"  \"ABLA_BA\"  \"PSME_BA\"  \"ABGR_BA\"  \"LALY_BA\"  \"PIEN_BA\"  \"TABR2_BA\" \"ABAM_BA\"  \"TSME_BA\"  \"TSHE_BA\"  \"BEPA_BA\"  \"POTR5_BA\" \"LAOC_BA\"  \"ACGL_BA\"  \"PIAL_BA\"  \"PICO_BA\"  \"THPL_BA\"  \"CHNO_BA\"  \"ACMA3_BA\" \"ALRU2_BA\" \"PIMO3_BA\" \"PSMA_BA\"  \"PREM_BA\"  \"ALRH2_BA\" \"PRVI_BA\"  \"POBAT_BA\" \"2TB_BA\"   \"ABPR_BA\" \n\n\n\noverstory &lt;- names(x_pred)\noverstory &lt;- overstory[10:45]\n\n\nOverstory not in regen\n\noverstory[!(overstory %in% regen_species)] |&gt; sort()\n\n [1] \"2TREE_BA\" \"ABCO_BA\"  \"ARME_BA\"  \"BEOC2_BA\" \"CONU4_BA\" \"FRLA_BA\"  \"JUHI_BA\"  \"MAFU_BA\"  \"PISI_BA\"  \"QUGA4_BA\"\n\n\n\nnames(x_pred)\n\n [1] \"STANDPLOT_CN\" \"CC\"           \"SDI\"          \"LAT\"          \"LON\"          \"ELEV\"         \"ASPECT\"       \"SLOPE\"        \"BAp\"          \"PIPO_BA\"      \"PSME_BA\"      \"ABAM_BA\"      \"TSME_BA\"      \"ABGR_BA\"      \"PICO_BA\"      \"LALY_BA\"      \"PIAL_BA\"      \"PIEN_BA\"      \"ABLA_BA\"      \"LAOC_BA\"      \"THPL_BA\"      \"ALRU2_BA\"     \"TSHE_BA\"      \"TABR2_BA\"     \"CHNO_BA\"      \"POBAT_BA\"     \"ABPR_BA\"      \"BEPA_BA\"      \"PREM_BA\"      \"CONU4_BA\"     \"POTR5_BA\"     \"PIMO3_BA\"     \"ACGL_BA\"      \"FRLA_BA\"      \"ACMA3_BA\"     \"2TREE_BA\"     \"ALRH2_BA\"     \"QUGA4_BA\"     \"PRVI_BA\"      \"MAFU_BA\"      \"PISI_BA\"      \"ABCO_BA\"      \"JUHI_BA\"      \"ARME_BA\"      \"BEOC2_BA\"     \"f\"            \"p\"            \"a\"            \"g\"           \n\n\n\n\nRegen species not in overstory\n\nregen_species[!(regen_species %in% overstory)] |&gt; sort()\n\n[1] \"2TB_BA\"  \"PSMA_BA\"\n\n\nI am pretty sure that 2TB and 2 TREE are the same, but I need to go back and find out where the names were introduced. PSMA is the only species that is not present in the overstory, but is in the understory.\nFrom the FIA.REF_SPECIES 2Tree is an unknown live tree, and 2TB is unknown dead tree.\n\nnames(x_pred) |&gt; sort()\n\n [1] \"2TREE_BA\"     \"a\"            \"ABAM_BA\"      \"ABCO_BA\"      \"ABGR_BA\"      \"ABLA_BA\"      \"ABPR_BA\"      \"ACGL_BA\"      \"ACMA3_BA\"     \"ALRH2_BA\"     \"ALRU2_BA\"     \"ARME_BA\"      \"ASPECT\"       \"BAp\"          \"BEOC2_BA\"     \"BEPA_BA\"      \"CC\"           \"CHNO_BA\"      \"CONU4_BA\"     \"ELEV\"         \"f\"            \"FRLA_BA\"      \"g\"            \"JUHI_BA\"      \"LALY_BA\"      \"LAOC_BA\"      \"LAT\"          \"LON\"          \"MAFU_BA\"      \"p\"            \"PIAL_BA\"      \"PICO_BA\"      \"PIEN_BA\"      \"PIMO3_BA\"     \"PIPO_BA\"      \"PISI_BA\"      \"POBAT_BA\"     \"POTR5_BA\"     \"PREM_BA\"      \"PRVI_BA\"      \"PSME_BA\"      \"QUGA4_BA\"     \"SDI\"          \"SLOPE\"        \"STANDPLOT_CN\" \"TABR2_BA\"     \"THPL_BA\"      \"TSHE_BA\"      \"TSME_BA\"     \n\n\n\nyfull_above0 &lt;- yfull |&gt; filter(largest_1 &gt; 0)\n\n\nhist(log(yfull$total_TD + .1))\n\n\n\n\n\n\n\nhist(log(yfull_above0$total_TD))\n\n\n\n\n\n\n\n\n\n\n\n\nRF Test\nThis test is on the North Cascades. I have removed all subplots that do not have seedlings. There were 1498 subplots available for imputation.\nI had tried to run the model with everything that I could, but there were issues. yaImpute, flags an error if there are “empty classes”. These do not actually have to be empty. I think, it errs if the subset taken for imputation, doesn’t contain all of the classes. So, there needs to be enough factors in each class to ensure that we get at least one of each after the random sample is taken. To fix this, I grouped the least common seedling species into a group named other.\nThe y variables for this imputation were the seedlings TPAs of the largest two species, and their names, plus the total TPA for the subplot.\nAs for the X variables, most were included. The main list was CC, SDI, lat, lon, elevation, aspect, slope, FPAG, and BA of the stand. The X variables also included the species BA per acre of every species present in the Ecoregion. While troubleshooting the issue, I removed A & G from FPAG in the X variables list. This may not have been necessary, but there were empty spaces in those columns as FPAGs do not need to have more than 2 letters.\n\nyfull_above0 &lt;- yfull |&gt; filter(largest_1 &gt; 0)\n\nCNs_wRegen &lt;- yfull_above0 |&gt; select(STANDPLOT_CN)\n\nx_abovr_zero &lt;- left_join(CNs_wRegen, x_pred, join_by(STANDPLOT_CN))\n\n\nx &lt;- x_abovr_zero |&gt; select(-c(a,g))\n\nx$f &lt;- factor(x$f)\nx$p &lt;- factor(x$p)\n##|&gt; select(STANf##|&gt; select(STANDPLOT_CN, CC, SDI, LAT, LON, ELEV, ASPECT, SLOPE, BAp)\n\n\ny &lt;- yfull_above0 |&gt; select(STANDPLOT_CN, max_spp1, max_spp2, largest_1, largest_2, total_TD)\n\ny_vars &lt;- names(y)\n# y_vars &lt;- y_vars[c(1:3, 5:6, 8)]\n\n\n\n# y$max_spp3 &lt;- factor(y$max_spp3)\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n# str(yrf)\n\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n\n# y &lt;- y |&gt; select(max_spp1, largest_1, total_TD)\n# y &lt;- y |&gt; select(max_spp1, largest_1, total_TD)\n# y &lt;- y |&gt; select(max_spp1)\n# y &lt;- y |&gt; select(-max_spp2)\n\nspp2_list &lt;- y |&gt; group_by(max_spp2) |&gt; summarise(\n  n = n()\n) |&gt; arrange(desc(n))\n\nspp2_list &lt;- spp2_list$max_spp2[1:10]\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = ifelse(\n    max_spp2 %in% spp2_list, max_spp2, \"Other\"\n  )\n)\n\n\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = ifelse(max_spp2 == \"2TB_TD\", \"Other\", max_spp2), \n  max_spp2 = ifelse(max_spp2 == \"TABR2_TD\", \"TABR_TD\", max_spp2),\n  max_spp2 = factor(max_spp2)\n  )\n\n\n\n\n# y$max_spp2 &lt;- droplevels(\n#   y$max_spp2\n# )\n\n\ny$max_spp1 &lt;- factor(y$max_spp1)\n# y$max_spp2 &lt;- factor(y$max_spp2)\n\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# save(rf_yai, file = str_c(\"imp_12AUG24_kitchenSink\", \".Rdata\"))\nload(str_c(\"./data/imp_12AUG24_kitchenSink\", \".Rdata\"))\n\nyaImpute may have rejected the data because:\n\nI had y$spp2 &lt;- factor(y$spp2). That was the last thing I removed and it worked.\nThere was a variable name with a number at the front.\nThere was a variable name with a number in it.\n\nsave(rf_yai, file = str_c(“imp_12AUG24_kitchenSink”, “.Rdata”)) is the test run. It has all of the BA and other preds, but it is missing AG from FPAG. I thought they could be causing issues, even though they worked last time.\nIt was largest 1 & 2 with max spp 1 & 2, pluys total TD for the in the response variables. I had originally wanted to use all of the TDs and run a kitchen sink, but I kept removing things to find the no empty classes error.\n\n# rf_dia_i &lt;- impute(rf_dia, ancillaryData = y)\n\nrf_imp_test &lt;- impute(rf_yai)\n\nrf_imp_test |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlargest_1\nlargest_2\ntotal_TD\nlargest_1.o\nlargest_2.o\ntotal_TD.o\nmax_spp1\nmax_spp2\nmax_spp1.o\nmax_spp2.o\nCC\nSDI\nLAT\nLON\nELEV\nASPECT\nSLOPE\nBAp\nPIPO_BA\nPSME_BA\nABAM_BA\nTSME_BA\nABGR_BA\nPICO_BA\nLALY_BA\nPIAL_BA\nPIEN_BA\nABLA_BA\nLAOC_BA\nTHPL_BA\nALRU2_BA\nTSHE_BA\nTABR2_BA\nCHNO_BA\nPOBAT_BA\nABPR_BA\nBEPA_BA\nPREM_BA\nCONU4_BA\nPOTR5_BA\nPIMO3_BA\nACGL_BA\nFRLA_BA\nACMA3_BA\n2TREE_BA\nALRH2_BA\nQUGA4_BA\nPRVI_BA\nMAFU_BA\nPISI_BA\nABCO_BA\nJUHI_BA\nARME_BA\nBEOC2_BA\nCC.o\nSDI.o\nLAT.o\nLON.o\nELEV.o\nASPECT.o\nSLOPE.o\nBAp.o\nPIPO_BA.o\nPSME_BA.o\nABAM_BA.o\nTSME_BA.o\nABGR_BA.o\nPICO_BA.o\nLALY_BA.o\nPIAL_BA.o\nPIEN_BA.o\nABLA_BA.o\nLAOC_BA.o\nTHPL_BA.o\nALRU2_BA.o\nTSHE_BA.o\nTABR2_BA.o\nCHNO_BA.o\nPOBAT_BA.o\nABPR_BA.o\nBEPA_BA.o\nPREM_BA.o\nCONU4_BA.o\nPOTR5_BA.o\nPIMO3_BA.o\nACGL_BA.o\nFRLA_BA.o\nACMA3_BA.o\n2TREE_BA.o\nALRH2_BA.o\nQUGA4_BA.o\nPRVI_BA.o\nMAFU_BA.o\nPISI_BA.o\nABCO_BA.o\nJUHI_BA.o\nARME_BA.o\nBEOC2_BA.o\nf\np\nf.o\np.o\n\n\n\n\n12965290010497_2\n74.96528\n0.00000\n74.96528\n149.9306\n0.00000\n149.9306\nPIPO_TD\nzero\nPIPO_TD\nzero\n13\n56\n47.86905\n-120.3692\n3700\n124\n76\n26.37535\n8.144228\n18.22629\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n50\n47.58130\n-120.3399\n3900\n338\n55\n20.00980\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nC\nD\nC\nD\n\n\n12965572010497_4\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nABLA_TD\nTSME_TD\nABLA_TD\nTSME_TD\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n9\n48\n47.70658\n-120.8548\n5700\n10\n92\n16.70329\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nNA\nNA\nC\nA\n\n\n12965572010497_4.1\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nABLA_TD\nTSME_TD\nABLA_TD\nTSME_TD\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n12965572010497_4.2\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nABLA_TD\nTSME_TD\nABLA_TD\nTSME_TD\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n12967289010497_1\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nPSME_TD\nOther\nPSME_TD\nOther\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n10\n29\n47.89837\n-120.7647\n3100\n44\n11\n9.36495\n4.438248\n4.914173\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nNA\nNA\nC\nH\n\n\n12967289010497_1.1\n149.93057\n74.96528\n224.89585\n149.9306\n74.96528\n224.8958\nPSME_TD\nOther\nPSME_TD\nOther\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\n\nyaiRFsummary(rf_yai)\n\n$forestAttributes\n          ntree      error         errtag levels           type\nmax_spp1    100 0.14753004 OOB error rate     26 classification\nmax_spp2    100 0.17757009 OOB error rate     11 classification\nlargest_1   100 0.03070761 OOB error rate      9 classification\nlargest_2   100 0.01802403 OOB error rate      5 classification\ntotal_TD    100 0.03671562 OOB error rate      9 classification\n\n$scaledImportance\n               LAT    SLOPE   ASPECT     ELEV       BAp        CC      SDI      LON        p   ABAM_BA   PSME_BA   TSME_BA    LAOC_BA   TSHE_BA    THPL_BA    PIEN_BA    CHNO_BA   ABLA_BA     PICO_BA     LALY_BA     PIPO_BA     ABGR_BA   ALRU2_BA    POTR5_BA     PIAL_BA   TABR2_BA    ABPR_BA    BEPA_BA    PREM_BA   PIMO3_BA   POBAT_BA    ACGL_BA   ACMA3_BA   ALRH2_BA    PISI_BA   CONU4_BA    FRLA_BA  X2TREE_BA   QUGA4_BA    PRVI_BA    MAFU_BA    ABCO_BA    JUHI_BA    ARME_BA   BEOC2_BA          f\nmax_spp1  1.886434 1.908383 1.544237 2.039500 1.2869105 1.2314988 1.352466 1.181532 1.222890 1.1056029 1.4212306 0.4195763 -0.1927788 0.4572209 0.31763874 0.12261980  0.1380445 1.1285294  0.02742589 -0.49238436  0.05938241  0.71570070 -0.2029551 -0.55929722 -0.42053094 -0.2633207 -0.6480805 -0.5373594 -0.2930134 -0.3065770 -0.4286893 -0.8638314 -0.6096870 -0.6691755 -0.9077920 -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865 -1.1064865\nmax_spp2  1.951273 1.486317 1.700475 2.085381 1.6983424 0.8386649 1.333268 1.261891 1.242192 1.3873572 0.9027010 0.8489556  0.1732437 0.8300933 0.84452069 0.06676832  0.4099475 0.3980530  0.21830887  0.09865958 -0.17805724 -0.25671356 -0.3483885 -0.38646503  0.08889864 -0.4676166 -0.6348843 -0.5789315 -0.5407506 -0.6014126 -0.8350485 -0.6829718 -0.8919843 -0.8919843 -1.2651333 -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245 -1.0277245\nlargest_1 1.467530 1.798198 1.788797 1.221523 1.4914917 1.6978601 2.294734 1.274945 1.002970 0.9259416 0.8493907 0.9160998  0.7742442 0.9173073 0.59693668 0.26656286 -0.2619733 0.1836692 -0.13333801  0.46427082 -0.03144414 -0.21310064 -0.7970988  0.30010681 -0.48757395 -0.5511371 -0.6782559 -0.6782559 -0.6782559 -1.1636682 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048 -0.9099048\nlargest_2 1.612400 1.828659 1.688561 1.542356 0.9627016 1.3761607 1.133497 1.786748 1.122981 1.0250171 0.9872816 0.8179355  1.5516180 0.7512885 0.03252221 0.91215222  0.9641114 0.1054708  0.30322914 -0.23215716 -0.31626789 -0.02516966 -0.1584863 -0.93376092 -0.35964632 -0.5175546 -0.6531424 -0.6531424 -0.9337609 -0.7814275 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609 -0.9337609\ntotal_TD  1.815650 1.607982 1.337713 1.019399 1.8260383 1.5149478 2.162988 1.309831 1.166335 1.0197390 1.0300102 1.1098218  0.7692446 0.7541445 0.42938802 0.89879711  0.1858237 0.1701539  0.15106901 -0.08994616 -0.12157674 -0.38979658 -0.5303385 -0.09297562 -0.72657536 -0.5006878 -0.6252034 -0.7195198 -0.9433336 -0.8934134 -0.7195198 -0.9433336 -0.9433336 -0.9433336 -0.7195198 -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336 -0.9433336\n\n\n\ny |&gt; names()\n\n[1] \"max_spp1\"  \"max_spp2\"  \"largest_1\" \"largest_2\" \"total_TD\" \n\n\n\nrmsd(rf_imp_test)\n\n\n\n\n\n\nrmsd\n\n\n\n\nlargest_1\n1937.0187421\n\n\nlargest_2\n356.2059431\n\n\ntotal_TD\n2108.0367868\n\n\nmax_spp1\nNA\n\n\nmax_spp2\nNA\n\n\nCC\n9.6888996\n\n\nSDI\n37.7549532\n\n\nLAT\n0.2750110\n\n\nLON\n0.1854097\n\n\nELEV\n517.9428139\n\n\nASPECT\n92.0935979\n\n\nSLOPE\n18.3773311\n\n\nBAp\n16.7350781\n\n\nPIPO_BA\n4.9701782\n\n\nPSME_BA\n9.2813717\n\n\nABAM_BA\n10.2733889\n\n\nTSME_BA\n8.9050650\n\n\nABGR_BA\n1.9153262\n\n\nPICO_BA\n5.0306778\n\n\nLALY_BA\n0.4826691\n\n\nPIAL_BA\n2.0325044\n\n\nPIEN_BA\n3.7590963\n\n\nABLA_BA\n5.2591653\n\n\nLAOC_BA\n1.2929860\n\n\nTHPL_BA\n7.3733845\n\n\nALRU2_BA\n2.2240530\n\n\nTSHE_BA\n9.3247512\n\n\nTABR2_BA\n0.7791583\n\n\nCHNO_BA\n5.3585955\n\n\nPOBAT_BA\n0.8564162\n\n\nABPR_BA\n2.0909229\n\n\nBEPA_BA\n0.0000000\n\n\nPREM_BA\n0.0561761\n\n\nCONU4_BA\n0.0000000\n\n\nPOTR5_BA\n2.3387268\n\n\nPIMO3_BA\n0.7827043\n\n\nACGL_BA\n1.0548997\n\n\nFRLA_BA\n0.0000000\n\n\nACMA3_BA\n0.6466991\n\n\n2TREE_BA\n0.0000000\n\n\nALRH2_BA\n0.1124475\n\n\nQUGA4_BA\n0.0000000\n\n\nPRVI_BA\n0.0000000\n\n\nMAFU_BA\n0.0000000\n\n\nPISI_BA\n0.6206748\n\n\nABCO_BA\n0.0000000\n\n\nJUHI_BA\n0.0000000\n\n\nARME_BA\n0.0000000\n\n\nBEOC2_BA\n0.0000000\n\n\nf\nNA\n\n\np\nNA\n\n\n\n\n\n\n\n\nancillary data\n\ny_ancil &lt;- yfull_above0\n\ny_ancil &lt;- y_ancil |&gt; as.data.frame()\n\nrf_imp_ancillary &lt;- impute(rf_yai, ancillaryData = y_ancil)\n\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\nWarning in mean.default(newX[, i], ...): argument is not numeric or logical: returning NA\n\n\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm = na.rm): NAs introduced by coercion\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm = na.rm): NAs introduced by coercion\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm = na.rm): NAs introduced by coercion\nWarning in var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm = na.rm): NAs introduced by coercion\n\n\n\nVar imp\n\nx |&gt; names()\n\n [1] \"CC\"       \"SDI\"      \"LAT\"      \"LON\"      \"ELEV\"     \"ASPECT\"   \"SLOPE\"    \"BAp\"      \"PIPO_BA\"  \"PSME_BA\"  \"ABAM_BA\"  \"TSME_BA\"  \"ABGR_BA\"  \"PICO_BA\"  \"LALY_BA\"  \"PIAL_BA\"  \"PIEN_BA\"  \"ABLA_BA\"  \"LAOC_BA\"  \"THPL_BA\"  \"ALRU2_BA\" \"TSHE_BA\"  \"TABR2_BA\" \"CHNO_BA\"  \"POBAT_BA\" \"ABPR_BA\"  \"BEPA_BA\"  \"PREM_BA\"  \"CONU4_BA\" \"POTR5_BA\" \"PIMO3_BA\" \"ACGL_BA\"  \"FRLA_BA\"  \"ACMA3_BA\" \"2TREE_BA\" \"ALRH2_BA\" \"QUGA4_BA\" \"PRVI_BA\"  \"MAFU_BA\"  \"PISI_BA\"  \"ABCO_BA\"  \"JUHI_BA\"  \"ARME_BA\"  \"BEOC2_BA\" \"f\"        \"p\"       \n\n\n\nyaiVarImp(rf_yai)\n\n\n\n\n\n\n\n\n\n\n\nRegen or Not\nI am planning on running RF here to see how it does just picking out if there are seedlings present on the subplot.\n\nyfull_above0 &lt;- yfull |&gt; filter(largest_1 &gt; 0)\n\nCNs_wRegen &lt;- yfull_above0 |&gt; select(STANDPLOT_CN)\n\nx_abovr_zero &lt;- left_join(CNs_wRegen, x_pred, join_by(STANDPLOT_CN))\n\n\nx &lt;- x_abovr_zero |&gt; select(-c(a,g))\n\nx$f &lt;- factor(x$f)\nx$p &lt;- factor(x$p)\n##|&gt; select(STANf##|&gt; select(STANDPLOT_CN, CC, SDI, LAT, LON, ELEV, ASPECT, SLOPE, BAp)\n\n\ny &lt;- yfull_above0 |&gt; select(STANDPLOT_CN, max_spp1, max_spp2, largest_1, largest_2, total_TD)\n\ny_vars &lt;- names(y)\n# y_vars &lt;- y_vars[c(1:3, 5:6, 8)]\n\n\n\n# y$max_spp3 &lt;- factor(y$max_spp3)\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n# str(yrf)\n\n\nx &lt;- as.data.frame(x)\ny &lt;- as.data.frame(y)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\n\ny &lt;- droplevels(y)\nx &lt;- droplevels(x)\n\n\n# y &lt;- y |&gt; select(max_spp1, largest_1, total_TD)\n# y &lt;- y |&gt; select(max_spp1, largest_1, total_TD)\n# y &lt;- y |&gt; select(max_spp1)\n# y &lt;- y |&gt; select(-max_spp2)\n\nspp2_list &lt;- y |&gt; group_by(max_spp2) |&gt; summarise(\n  n=n()\n) |&gt; arrange(desc(n))\n\nspp2_list &lt;- spp2_list$max_spp2[1:10]\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = ifelse(\n    max_spp2 %in% spp2_list, max_spp2, \"Other\"\n  )\n)\n\n\n\ny &lt;- y |&gt; mutate(\n  max_spp2 = ifelse(max_spp2 == \"2TB_TD\", \"Other\", max_spp2), \n  max_spp2 = ifelse(max_spp2 == \"TABR2_TD\", \"TABR_TD\", max_spp2),\n  max_spp2 = factor(max_spp2)\n  )\n\n\n\n\n# y$max_spp2 &lt;- droplevels(\n#   y$max_spp2\n# )\n\n\n# y$max_spp1 &lt;- factor(y$max_spp1)\n# y$max_spp2 &lt;- factor(y$max_spp2)\n\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# save(rf_yai, file = str_c(\"data/imp_12AUG24_kitchenSink\", \".Rdata\"))\n\n\n\nSeedling imp\nRun the imputation on the seedling TPAs of the top species in a given ecoregion.\n\n# imp_data\n\nx &lt;- imp_data[, c(1:47)]\nxfp &lt;-  x |&gt; mutate(\n  f = str_sub(FPAG, 1, 1), \n  p = str_sub(FPAG, 2, 2), \n  f = factor(f), \n  p = factor(p)\n) |&gt; select(STANDPLOT_CN, f,p)\n\nx &lt;- x |&gt; select(-FPAG) |&gt; filter(EcoRegion == \"M242D\") |&gt; \n  select(-EcoRegion) |&gt; drop_na()\ncns &lt;- x |&gt; select(STANDPLOT_CN)\n\nx &lt;- x |&gt; column_to_rownames(\"STANDPLOT_CN\")\nx &lt;- x[, colSums(x) != 0]\n\nxfp &lt;- left_join(cns, xfp)\n\nJoining with `by = join_by(STANDPLOT_CN)`\n\nx$f &lt;- xfp$f\nx$p &lt;- xfp$p\n\n\ny &lt;- imp_data[,c(1, 48:ncol(imp_data))] |&gt; drop_na()\ny &lt;- left_join(cns, y, join_by(STANDPLOT_CN))\n\ny &lt;- y |&gt; column_to_rownames(\"STANDPLOT_CN\")\ny &lt;- y[, colSums(y) != 0]\n\nb &lt;- names(y)\n\nfor (i in 1) {\n    \n    c_value &lt;- str_c(\"largest_\", i)\n    \n    y &lt;- y %&gt;%\n      rowwise() %&gt;%\n      mutate(!!c_value := n_largest(c_across(all_of(b)), i)) |&gt;\n      ungroup()\n}\n\n # Setting spp names to the largest columns\ny$max_spp1 &lt;- sapply(1:nrow(y), function(x) colnames(y)[which(y[x, b] == y$largest_1[x])][1])\n\n\ny &lt;- y |&gt; mutate(\n  max_spp1 = ifelse(largest_1 == 0, \"zero\", max_spp1),\n  max_spp1 = factor(max_spp1)\n  # max_spp2 = ifelse(largest_2 == 0, \"zero\", max_spp2),\n  # max_spp3 = ifelse(largest_3 == 0, \"zero\", max_spp3)\n  )\n\ny &lt;- as.data.frame(y)\nrownames(y) &lt;- cns$STANDPLOT_CN\n\n\nstr(y)\n\n'data.frame':   2739 obs. of  31 variables:\n $ PIPO_TD  : num  0 0 0 0 150 ...\n $ ABLA_TD  : num  0 0 0 0 0 ...\n $ TSME_TD  : num  0 0 0 0 0 ...\n $ PSME_TD  : num  0 0 0 0 0 ...\n $ ABGR_TD  : num  0 0 0 0 0 ...\n $ LALY_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIEN_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PICO_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ LAOC_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ACGL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ TABR2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ CHNO_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ABAM_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ THPL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ TSHE_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ BEPA_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PREM_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ POTR5_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIAL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ALRU2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ABPR_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIMO3_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PRVI_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ 2TB_TD   : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ACMA3_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PSMA_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ALRH2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ POBAT_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PISI_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ largest_1: num  0 0 0 0 150 ...\n $ max_spp1 : Factor w/ 27 levels \"ABAM_TD\",\"ABGR_TD\",..: 27 27 27 27 16 3 22 22 2 22 ...\n\nlevels(y$max_spp1)\n\n [1] \"ABAM_TD\"  \"ABGR_TD\"  \"ABLA_TD\"  \"ACGL_TD\"  \"ACMA3_TD\" \"ALRH2_TD\" \"ALRU2_TD\" \"BEPA_TD\"  \"CHNO_TD\"  \"LALY_TD\"  \"LAOC_TD\"  \"PIAL_TD\"  \"PICO_TD\"  \"PIEN_TD\"  \"PIMO3_TD\" \"PIPO_TD\"  \"POBAT_TD\" \"POTR5_TD\" \"PREM_TD\"  \"PRVI_TD\"  \"PSMA_TD\"  \"PSME_TD\"  \"TABR2_TD\" \"THPL_TD\"  \"TSHE_TD\"  \"TSME_TD\"  \"zero\"    \n\n\n\n# rf_yai &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# save(rf_yai, file = str_c(\"imp_12AUG24_kitchenSink\", \".Rdata\"))\n\n# rf_seedling_TD &lt;- yai(x = x, y = y, method = \"randomForest\", k = 1, bootstrap = T)\n# rm(list = ls())\nload(\"./data/imp_12AUG24_kitchenSink.Rdata\")\n\nrf_seedling_TD &lt;- rf_yai\nrm(rf_yai)\n\n\nstr(y)\n\n'data.frame':   2739 obs. of  31 variables:\n $ PIPO_TD  : num  0 0 0 0 150 ...\n $ ABLA_TD  : num  0 0 0 0 0 ...\n $ TSME_TD  : num  0 0 0 0 0 ...\n $ PSME_TD  : num  0 0 0 0 0 ...\n $ ABGR_TD  : num  0 0 0 0 0 ...\n $ LALY_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIEN_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PICO_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ LAOC_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ACGL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ TABR2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ CHNO_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ABAM_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ THPL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ TSHE_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ BEPA_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PREM_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ POTR5_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIAL_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ALRU2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ABPR_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PIMO3_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PRVI_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ 2TB_TD   : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ACMA3_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PSMA_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ ALRH2_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ POBAT_TD : num  0 0 0 0 0 0 0 0 0 0 ...\n $ PISI_TD  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ largest_1: num  0 0 0 0 150 ...\n $ max_spp1 : Factor w/ 27 levels \"ABAM_TD\",\"ABGR_TD\",..: 27 27 27 27 16 3 22 22 2 22 ...\n\n\n\n# test.rf &lt;- randomForest(x = x, y = y, mtry = 3, \n#                          importance = TRUE, na.action = na.omit) \n\n\n# max(y)/300\n\npLAY WITH N-TREE AND SEE WHERE THERE ARE DIMINISHING RETURNS.\nEnd\n\n\nscratch\n“C:_Notes.Rdata”\n\n# load(clean_paths(r\"(C:\\RxFire\\Regen\\Regen_Notes\\trf.Rdata)\"))\n\n# impute(trf)\n\n\n# print(trf)\n\n\n\nNotes\nsprintf for loops and hyper-parameter tests.\n\nmore trees for rare or common,",
    "crumbs": [
      "Models",
      "4 RF Ecos"
    ]
  },
  {
    "objectID": "6_distributions.html",
    "href": "6_distributions.html",
    "title": "6 Histos",
    "section": "",
    "text": "The following graphs are organized by Density, Log transformation, then raw. Each set shows two sets of histograms, one that contains the excess zeroes and one that doesn’t. This was done to see the distributions when zeroes dominate the graphs. In the graphs containing zeroes, it is impossible to see how they compare where zeroes are present for all but a few species.\nI put the variables that I created first, total TD and rare TD. Total TD is the sum of all TPAs and rare is the sum of those species that were removed to run yaImpute. They were the rarest species in the list of species that had the largest or second largest tpa per subplot. I experimented with the number of species to include and cut the list when I could get yai() to run most of the time.\nI went back and filtered the test set to N. Cascades. Disregard any further warnings about that.\nCheck the filtration and see if I updated the database after Missoula. I don’t think I did.\nLibraries\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and acces\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \n                                                   \n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\nFunctions\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\nCreated on\n[1] \"2024-08-27 14:59:44 PDT\"\nLast updated on\n[1] \"2024-10-09 14:01:35 PDT\"",
    "crumbs": [
      "Plots",
      "6 Histos"
    ]
  },
  {
    "objectID": "6_distributions.html#logx-1-with-zeroes",
    "href": "6_distributions.html#logx-1-with-zeroes",
    "title": "6 Histos",
    "section": "Log(x + 1) With zeroes",
    "text": "Log(x + 1) With zeroes\nThe Imputed v Observed histograms tend to line up most closely. Only total TD is noticeably different. There are more zeroes in the imputed data for total and more tpas on the lower end.\nImputed v the test set are also surprisingly close. This match up doesn’t appear to bias toward Imputed having more or less across the board. Sometimes imputed is higher, and other times not.\nSince imputed vs observed are closely matched, Observed v the test set have the same characteristics.\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}",
    "crumbs": [
      "Plots",
      "6 Histos"
    ]
  },
  {
    "objectID": "6_distributions.html#logx-without-zeroes",
    "href": "6_distributions.html#logx-without-zeroes",
    "title": "6 Histos",
    "section": "Log(x) Without Zeroes",
    "text": "Log(x) Without Zeroes\nFor this set, I focused on the non-zero values.\nImputed values are higher on the lower end than observed. APBR was not imputed and PISI was apparently not present.\nImputed vs. the test set are not wildly different, and don’t appear at glance to be biased. There are per species differences in the densities, but overall either one is over or under the other at various places. The shape of these histograms are comparable.\nI probably didn’t need all three graphs. Observed and imputed line up well, so the observed vs test set figures are similar to the imputed vs. test set ones.\n\nCode\ni &lt;- 1\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  t &lt;- t |&gt; filter(x &gt; 0)\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}",
    "crumbs": [
      "Plots",
      "6 Histos"
    ]
  },
  {
    "objectID": "6_distributions.html#raw-density-graphs",
    "href": "6_distributions.html#raw-density-graphs",
    "title": "6 Histos",
    "section": "Raw Density Graphs",
    "text": "Raw Density Graphs\n\nx With zeroes\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx Without Zeroes\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  t &lt;- t |&gt; filter(x &gt; 0)\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       aes(y = after_stat(density)),\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}",
    "crumbs": [
      "Plots",
      "6 Histos"
    ]
  },
  {
    "objectID": "6_distributions.html#log-transformation-graphs",
    "href": "6_distributions.html#log-transformation-graphs",
    "title": "6 Histos",
    "section": "Log transformation graphs",
    "text": "Log transformation graphs\n\nLog(x) Without Zeroes\n\nCode\ni &lt;- 1\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  t &lt;- t |&gt; filter(x &gt; 0)\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x), fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlog(x + 1) with zeroes\nThe imputed values contain many more zeroes than the observed.\nIn fact, it looks like there are just more plots in the imputed\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(log(x + 1), fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}",
    "crumbs": [
      "Plots",
      "6 Histos"
    ]
  },
  {
    "objectID": "6_distributions.html#raw-graphs",
    "href": "6_distributions.html#raw-graphs",
    "title": "6 Histos",
    "section": "Raw Graphs",
    "text": "Raw Graphs\n\nx Without Zeroes\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  t &lt;- t |&gt; filter(x &gt; 0)\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx With zeroes\n\nCode\n# i &lt;- 2\n\nfor (i in 1:length(spp_list)) {  ## length(spp_list)\n  a &lt;- rf_tds |&gt; select(contains(spp_list[i])) |&gt; names()\n  \n  t &lt;- rf_tds |&gt; select(a[1]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(\n      source = \"RF_Imputed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  t2 &lt;- rf_tds |&gt; select(a[2]) |&gt;\n    rename(x = str_c(spp_list[i], \".o\")) |&gt; \n    mutate(source = \"RF_Observed\") |&gt; \n    rownames_to_column(\"STANDPLOT_CN\")\n  \n  \n  t3 &lt;- raw_tds |&gt; select(STANDPLOT_CN, spp_list[i]) |&gt; \n    rename(x = str_c(spp_list[i])) |&gt; \n    mutate(source = \"test_set\")\n  \n  \n  t &lt;- add_row(t, t2)\n  t &lt;- add_row(t, t3) |&gt; drop_na()\n  \n  p1 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"RF_Observed\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5,\n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p2 &lt;- t |&gt; filter(source == \"RF_Imputed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  p3 &lt;- t |&gt; filter(source == \"RF_Observed\" | source == \"test_set\") |&gt; \n    ggplot(aes(x, fill = source)) + \n     geom_histogram(\n       alpha = 0.5, \n       position = 'identity', \n       bins = 30) + \n    labs(title = spp_list[i]) + \n    theme(legend.position = \"inside\", legend.position.inside = c(0.9, 0.9))\n  \n  print(p1)\n  print(p2)\n  print(p3)\n    \n}",
    "crumbs": [
      "Plots",
      "6 Histos"
    ]
  },
  {
    "objectID": "8_RF_Spp_Groups.html",
    "href": "8_RF_Spp_Groups.html",
    "title": "8 RF Spp Groups",
    "section": "",
    "text": "To run RF with the species grouped by species group code instead of species code, I will need to pull the imputation data before it is widened into seedling densities, convert the codes, then widen the data. I will need to do the same for the BAs. That work was first done in 3_rf_prep.\nLibraries\n\n\nCode\nrm(list = ls())                                                      \ngc()                                                                                 \n\n# Data tidying and access\nlibrary(tidyverse, quietly = T)       # Easy to read syntax and data manipulation                   \nlibrary(RSQLite)                      # Access SQLite dbs   \nlibrary(magrittr)                     # Pipes and math functions    \n# library(readxl)                     # Read xlsx \n# library(writexl)                    # write xlsx     \nlibrary(BAMMtools)                    # Natural Breaks\nlibrary(fedmatch)                     # Clean strings\nlibrary(janitor)                      # Clean headers\n\n# yaImpute and related                           \nlibrary(yaImpute)                     # RF imputation     \nlibrary(vegan)                        # Something to do the yaImpute \nlibrary(randomForest)                 # RF package that yaImpute uses                                   \n                                                     \n# plots and tables                          \n# library(esquisse)                     # Quick data visualization   \nlibrary(knitr)                        # Better html tables\n# library(DT)                           # Data tables for Java script tables in HTML\n                                                   \nlibrary(kableExtra)                   # Better html tables, change sizes\n# library(feather)                      # Faster data retrieval    \n\n# Geography\n# library(sf)                           # Simple Features/vector data\n# library(terra)                        # Raster functions\n# library(spatstat)                     # Spatial stats\n\n\nlibrary(tcltk)                        # Fix file paths\n\n# No sci-notation. \noptions(scipen = 999)\noptions(width = 125)\n\n\nFunctions\n\n\nCode\nclean_mem &lt;- function() {\n  x &lt;- ls(envir = .GlobalEnv)\n  # ls()[!(ls() %in% keep)]\n  rm(list = x[!(x %in% keep)], envir = .GlobalEnv)\n  gc()\n}\n\nclean_na_cols &lt;- function(df){\n  df &lt;- df[, colSums(is.na(df)) &lt; nrow(df)]\n}\n\n# path &lt;- r\"(C:\\RxFire\\Regen\\FVS\\regen_080724_1644\\regen_080724_1644.db)\"\nclean_paths &lt;- function(path) {\n  str_replace_all(path, \"\\\\\\\\\", \"/\")\n}\n\ndb_list &lt;- function(df, CN_col){\n  name &lt;- NULL\n  name &lt;- df |&gt; select({{CN_col}})\n  name &lt;- name |&gt; mutate(CN_col = str_c(\"'\", {{CN_col}}, \"'\")) \n  name &lt;- str_flatten_comma(name$CN_col)\n  # name &lt;- str_flatten_comma(name[, CN_col])\n  name\n}\n\nnas_to_zeroes &lt;- function(df){\n  df &lt;- df |&gt; mutate_all(~replace(., is.na(.), 0))\n  df\n}\n\nkeep &lt;- c(\"keep\", \"clean_mem\", \"clean_na_cols\", \"clean_paths\", \"db_list\", \"nas_to_zeroes\")\n\n\n\nCreated on\n\n\n[1] \"2024-09-04 08:18:09 PDT\"\n\n\nLast updated on\n\n\n[1] \"2024-10-09 14:02:36 PDT\"",
    "crumbs": [
      "Models",
      "8 RF Spp Groups"
    ]
  },
  {
    "objectID": "8_RF_Spp_Groups.html#ba-wider",
    "href": "8_RF_Spp_Groups.html#ba-wider",
    "title": "8 RF Spp Groups",
    "section": "BA wider",
    "text": "BA wider\n\nba_trees &lt;- trees_L |&gt; group_by(STANDPLOT_CN, grp_abbr) |&gt; \n  summarise(\n    n = n(), \n    BA = sum(BAac),\n    .groups = \"drop\"\n    )\n\nn_distinct(ba_trees$STANDPLOT_CN)\n\n[1] 5912\n\nba_wide &lt;- ba_trees |&gt; select(-n) |&gt; pivot_wider(names_from = grp_abbr, \n                 values_from = BA,\n                 values_fill = 0,\n                 names_glue = \"{grp_abbr}_{'BA'}\") \n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nPIPO_BA\nPSME_BA\nABIES_BA\nSOFT_BA\nPICO_BA\nPIEN_BA\nLAOC_BA\nTHPL_BA\nALNU_BA\nTSHE_BA\nPOPL_BA\nHARD_BA\nPIMO3_BA\nACGL_BA\nQUERC_BA\n\n\n\n\n12964449010497_1\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\ny &lt;- preds |&gt; select(STANDPLOT_CN, EcoRegion) \nba_wide &lt;- left_join(ba_wide, y, join_by(STANDPLOT_CN))\nba_wide &lt;- ba_wide |&gt; relocate(EcoRegion, .after = STANDPLOT_CN)\n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nEcoRegion\nPIPO_BA\nPSME_BA\nABIES_BA\nSOFT_BA\nPICO_BA\nPIEN_BA\nLAOC_BA\nTHPL_BA\nALNU_BA\nTSHE_BA\nPOPL_BA\nHARD_BA\nPIMO3_BA\nACGL_BA\nQUERC_BA\n\n\n\n\n12964449010497_1\nM242D\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\nM242D\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\nM242D\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\nM242D\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\nM242D\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\nM242D\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nba_wide &lt;- left_join(ba_wide, preds, join_by(STANDPLOT_CN, EcoRegion)) |&gt; \n  relocate(STANDPLOT_CN, CC, SDI, FPAG, EcoRegion, LAT, LON, ELEV, Northing, Easting, SLOPE, BAp) |&gt; \n  select(-c(Tpa, STAND_CN))\n\nba_wide |&gt; head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTANDPLOT_CN\nCC\nSDI\nFPAG\nEcoRegion\nLAT\nLON\nELEV\nNorthing\nEasting\nSLOPE\nBAp\nPIPO_BA\nPSME_BA\nABIES_BA\nSOFT_BA\nPICO_BA\nPIEN_BA\nLAOC_BA\nTHPL_BA\nALNU_BA\nTSHE_BA\nPOPL_BA\nHARD_BA\nPIMO3_BA\nACGL_BA\nQUERC_BA\n\n\n\n\n12964449010497_1\n13\n49\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n-0.9961947\n0.0871557\n72\n35.052090\n25.694288\n9.356814\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_3\n4\n10\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n-0.9876883\n0.1564345\n62\n5.396815\n3.348215\n2.048447\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964449010497_4\n10\n31\nCDS6\nM242D\n47.41590\n-120.6538\n3300\n0.3420201\n0.9396926\n76\n18.791683\n0.000000\n18.791151\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12964657010497_1\n22\n69\nCDS6\nM242D\n47.40076\n-120.4951\n2300\n0.9986295\n-0.0523360\n58\n36.032566\n0.000000\n29.532336\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965290010497_2\n9\n50\nCDS6\nM242D\n47.58130\n-120.3399\n3900\n0.9271839\n-0.3746066\n55\n20.009798\n6.341620\n11.117666\n0.000000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n12965572010497_4\n9\n48\nCAS3\nM242D\n47.70658\n-120.8548\n5700\n0.9848078\n0.1736482\n92\n16.703291\n0.000000\n0.000000\n1.562676\n15.12788\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nba_wide |&gt; nrow()\n\n[1] 5912\n\n\nThis is good. All that is left, is to join the large trees and seedlings together. Then, clean up the zeroes. Afterwards, I can run RF.",
    "crumbs": [
      "Models",
      "8 RF Spp Groups"
    ]
  },
  {
    "objectID": "8_RF_Spp_Groups.html#error",
    "href": "8_RF_Spp_Groups.html#error",
    "title": "8 RF Spp Groups",
    "section": "Error",
    "text": "Error\nLoading the rf run from page 5 done with seedlings not as factors\n\nload(str_c(\"data/RF_26AUG24_1seedlings\", \".Rdata\"))\n\nrf_5_seeds &lt;- rf_yai\n\n\nsummary_seeds &lt;- rf_5_seeds |&gt; yaiRFsummary()\nsummary_groups_class &lt;- rf_groups_class |&gt; yaiRFsummary()\nsummary_groups_reg &lt;- rf_groups_reg |&gt; yaiRFsummary()\n\n\nsummary_groups_class$forestAttributes\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nPIPO_TD\n50\n0.0040404\nOOB error rate\n5\nclassification\n\n\nABIES_TD\n50\n0.0491582\nOOB error rate\n11\nclassification\n\n\nSOFT_TD\n50\n0.0397306\nOOB error rate\n11\nclassification\n\n\nPSME_TD\n50\n0.0013468\nOOB error rate\n4\nclassification\n\n\nPIEN_TD\n50\n0.0000000\nOOB error rate\n2\nclassification\n\n\nPICO_TD\n50\n0.0040404\nOOB error rate\n7\nclassification\n\n\nLAOC_TD\n50\n0.0013468\nOOB error rate\n5\nclassification\n\n\nACGL_TD\n50\n0.0047138\nOOB error rate\n6\nclassification\n\n\nTHPL_TD\n50\n0.0101010\nOOB error rate\n7\nclassification\n\n\nTSHE_TD\n50\n0.0114478\nOOB error rate\n7\nclassification\n\n\nHARD_TD\n50\n0.0107744\nOOB error rate\n10\nclassification\n\n\nPOPL_TD\n50\n0.0020202\nOOB error rate\n4\nclassification\n\n\nALNU_TD\n50\n0.0033670\nOOB error rate\n4\nclassification\n\n\nPIMO3_TD\n50\n0.0026936\nOOB error rate\n4\nclassification\n\n\nmax_spp1\n50\n0.1292929\nOOB error rate\n14\nclassification\n\n\nmax_spp2\n50\n0.1407407\nOOB error rate\n15\nclassification\n\n\ntotal_TD\n50\n0.0370370\nOOB error rate\n8\nclassification\n\n\n\n\n\n\n\nsummary_groups_reg$forestAttributes\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nPIPO_TD\n50\n55.8100000\n%var explained\nNA\nregression\n\n\nABIES_TD\n50\n78.9400000\n%var explained\nNA\nregression\n\n\nSOFT_TD\n50\n77.1800000\n%var explained\nNA\nregression\n\n\nPSME_TD\n50\n0.3000000\n%var explained\nNA\nregression\n\n\nPIEN_TD\n50\n90.0300000\n%var explained\nNA\nregression\n\n\nPICO_TD\n50\n39.5700000\n%var explained\nNA\nregression\n\n\nLAOC_TD\n50\n63.5900000\n%var explained\nNA\nregression\n\n\nACGL_TD\n50\n77.0500000\n%var explained\nNA\nregression\n\n\nTHPL_TD\n50\n28.5700000\n%var explained\nNA\nregression\n\n\nTSHE_TD\n50\n60.3500000\n%var explained\nNA\nregression\n\n\nHARD_TD\n50\n27.6300000\n%var explained\nNA\nregression\n\n\nPOPL_TD\n50\n54.5600000\n%var explained\nNA\nregression\n\n\nALNU_TD\n50\n90.2000000\n%var explained\nNA\nregression\n\n\nPIMO3_TD\n50\n15.2400000\n%var explained\nNA\nregression\n\n\nmax_spp1\n50\n0.0936027\nOOB error rate\n14\nclassification\n\n\nmax_spp2\n50\n0.1454545\nOOB error rate\n15\nclassification\n\n\ntotal_TD\n50\n75.7800000\n%var explained\nNA\nregression\n\n\n\n\n\n\n\nsummary_seeds$forestAttributes\n\n\n\n\n\n\nntree\nerror\nerrtag\nlevels\ntype\n\n\n\n\nmax_spp1\n50\n0.1241656\nOOB error rate\n7\nclassification\n\n\nmax_spp2\n50\n0.1615487\nOOB error rate\n13\nclassification\n\n\nABLA_TD\n50\n0.0233645\nOOB error rate\n7\nclassification\n\n\nTSME_TD\n50\n0.0246996\nOOB error rate\n9\nclassification\n\n\nPSME_TD\n50\n0.0040053\nOOB error rate\n4\nclassification\n\n\nABGR_TD\n50\n0.0066756\nOOB error rate\n5\nclassification\n\n\nABAM_TD\n50\n0.0333778\nOOB error rate\n9\nclassification\n\n\nTSHE_TD\n50\n0.0120160\nOOB error rate\n7\nclassification\n\n\nABPR_TD\n50\n0.0000000\nOOB error rate\n2\nclassification\n\n\nOther_TD\n50\n0.0000000\nOOB error rate\n2\nclassification\n\n\nPISI_TD\n50\n0.0000000\nOOB error rate\n2\nclassification\n\n\nlargest_1\n50\n0.0267023\nOOB error rate\n8\nclassification\n\n\nlargest_2\n50\n0.0193591\nOOB error rate\n6\nclassification\n\n\ntotal_TD\n50\n0.0393858\nOOB error rate\n8\nclassification\n\n\nrare_TD\n50\n0.0033378\nOOB error rate\n6\nclassification",
    "crumbs": [
      "Models",
      "8 RF Spp Groups"
    ]
  },
  {
    "objectID": "8_RF_Spp_Groups.html#imputation",
    "href": "8_RF_Spp_Groups.html#imputation",
    "title": "8 RF Spp Groups",
    "section": "Imputation",
    "text": "Imputation\n\nrf_imp_seeds &lt;- impute(rf_5_seeds)\nrf_imp_seeds &lt;- rf_imp_seeds |&gt; \n  drop_na() |&gt; \n  select(order(colnames(rf_imp_seeds))) |&gt; \n  select(contains(\"TD\"))\n\nrf_imp_seeds |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_TD\nABAM_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nOther_TD\nOther_TD.o\nPISI_TD\nPISI_TD.o\nPSME_TD\nPSME_TD.o\nrare_TD\nrare_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965856010497_1\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n74.96528\n149.93057\n0.00000\n149.93057\n74.96528\n0\n0\n0.0000\n0.0000\n\n\n12967289010497_1\n0.0000\n0.00000\n74.96528\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n149.93057\n0.00000\n74.96528\n74.96528\n224.89585\n0\n0\n0.0000\n0.0000\n\n\n12967289010497_2\n0.0000\n0.00000\n0.00000\n224.89585\n0\n0.00000\n0\n0\n0\n0\n0\n0\n149.9306\n0.00000\n74.96528\n0.00000\n224.89585\n224.89585\n0\n0\n0.0000\n0.0000\n\n\n12967289010497_3\n0.0000\n0.00000\n0.00000\n74.96528\n0\n0.00000\n0\n0\n0\n0\n0\n0\n149.9306\n0.00000\n74.96528\n0.00000\n224.89585\n74.96528\n0\n0\n0.0000\n0.0000\n\n\n12970163010497_1\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n149.9306\n74.96528\n0.00000\n0.00000\n149.93057\n74.96528\n0\n0\n0.0000\n0.0000\n\n\n12970308010497_3\n0.0000\n0.00000\n0.00000\n0.00000\n0\n74.96528\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n224.89585\n524.75698\n224.89585\n599.72226\n0\n0\n0.0000\n0.0000\n\n\n12988512010497_1\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n74.96528\n524.75698\n74.96528\n524.75698\n0\n0\n0.0000\n0.0000\n\n\n12988512010497_3\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n524.75698\n74.96528\n524.75698\n74.96528\n0\n0\n0.0000\n0.0000\n\n\n12990036010497_1\n449.7917\n374.82641\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0.00000\n0.00000\n899.58339\n524.75698\n0\n0\n449.7917\n149.9306\n\n\n12990036010497_3\n374.8264\n74.96528\n0.00000\n0.00000\n0\n0.00000\n0\n0\n0\n0\n0\n0\n0.0000\n0.00000\n0.00000\n0.00000\n524.75698\n74.96528\n0\n0\n149.9306\n0.0000\n\n\n\n\n\n\n\nrf_imp_groups_class &lt;- impute(rf_groups_class)\nrf_imp_groups_class &lt;- rf_imp_groups_class |&gt; \n  drop_na() |&gt; \n  select(order(colnames(rf_imp_groups_class))) |&gt; \n  select(contains(\"TD\"))\n\nrf_imp_groups_class |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABIES_TD\nABIES_TD.o\nACGL_TD\nACGL_TD.o\nALNU_TD\nALNU_TD.o\nHARD_TD\nHARD_TD.o\nLAOC_TD\nLAOC_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPOPL_TD\nPOPL_TD.o\nPSME_TD\nPSME_TD.o\nSOFT_TD\nSOFT_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\n\n\n\n\n12965290010497_2\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0.00000\n0\n74.96528\n149.93057\n0\n0\n149.9306\n0.00000\n0.00000\n0.00000\n0\n0\n224.89585\n149.93057\n0\n0\n\n\n12965572010497_4\n449.79170\n149.93057\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0.00000\n0\n0.00000\n0.00000\n0\n0\n0.0000\n0.00000\n74.96528\n74.96528\n0\n0\n524.75698\n224.89585\n0\n0\n\n\n12966246010497_1\n224.89585\n74.96528\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0.00000\n0\n0.00000\n0.00000\n0\n0\n0.0000\n0.00000\n0.00000\n0.00000\n0\n0\n224.89585\n74.96528\n0\n0\n\n\n12967289010497_1\n74.96528\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0.00000\n0\n0.00000\n74.96528\n0\n0\n0.0000\n149.93057\n0.00000\n0.00000\n0\n0\n74.96528\n224.89585\n0\n0\n\n\n12967289010497_3\n0.00000\n74.96528\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0.00000\n0\n74.96528\n0.00000\n0\n0\n149.9306\n0.00000\n0.00000\n0.00000\n0\n0\n224.89585\n74.96528\n0\n0\n\n\n12969073010497_1\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n149.9306\n0\n0\n0.0000\n0.00000\n0\n0.00000\n0.00000\n0\n0\n0.0000\n149.93057\n0.00000\n0.00000\n0\n0\n149.93057\n149.93057\n0\n0\n\n\n12970163010497_1\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n74.96528\n0\n0.00000\n0.00000\n0\n0\n299.8611\n74.96528\n0.00000\n0.00000\n0\n0\n374.82641\n74.96528\n0\n0\n\n\n12970308010497_3\n74.96528\n74.96528\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0.00000\n0\n0.00000\n0.00000\n0\n0\n0.0000\n0.00000\n74.96528\n524.75698\n0\n0\n149.93056\n599.72226\n0\n0\n\n\n12970308010497_4\n224.89585\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n149.9306\n0.00000\n0\n0.00000\n0.00000\n0\n0\n0.0000\n0.00000\n149.93057\n0.00000\n0\n0\n374.82641\n149.93057\n0\n0\n\n\n12988512010497_1\n0.00000\n0.00000\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0.0000\n0.00000\n0\n0.00000\n0.00000\n0\n0\n0.0000\n0.00000\n299.86113\n524.75698\n0\n0\n299.86113\n524.75698\n0\n0\n\n\n\n\n\n\n\nrf_imp_groups_reg &lt;- impute(rf_groups_reg)\n\nrf_imp_groups_reg &lt;- rf_imp_groups_reg |&gt; \n  drop_na() |&gt; \n  select(order(colnames(rf_imp_groups_reg))) |&gt; \n  select(contains(\"TD\"))\n\nrf_imp_groups_reg |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABIES_TD\nABIES_TD.o\nACGL_TD\nACGL_TD.o\nALNU_TD\nALNU_TD.o\nHARD_TD\nHARD_TD.o\nLAOC_TD\nLAOC_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPOPL_TD\nPOPL_TD.o\nPSME_TD\nPSME_TD.o\nSOFT_TD\nSOFT_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\n\n\n\n\n12965572010497_4\n449.79170\n149.93057\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0.00000\n0\n0\n0.00000\n0.00000\n74.96528\n74.96528\n0\n0\n524.75698\n224.89585\n0\n0\n\n\n12965856010497_1\n0.00000\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0.00000\n0\n0\n74.96528\n74.96528\n0.00000\n0.00000\n0\n0\n74.96528\n74.96528\n0\n0\n\n\n12965856010497_4\n0.00000\n0.00000\n149.9306\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0.00000\n0\n0\n0.00000\n299.86113\n0.00000\n0.00000\n0\n0\n149.93057\n299.86113\n0\n0\n\n\n12966246010497_1\n599.72226\n74.96528\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0.00000\n0\n0\n0.00000\n0.00000\n0.00000\n0.00000\n0\n0\n599.72226\n74.96528\n0\n0\n\n\n12967289010497_1\n0.00000\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n74.96528\n0\n0\n74.96528\n149.93057\n74.96528\n0.00000\n0\n0\n149.93056\n224.89585\n0\n0\n\n\n12970308010497_2\n449.79170\n74.96528\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0.00000\n0\n0\n0.00000\n0.00000\n0.00000\n74.96528\n0\n0\n449.79170\n149.93056\n0\n0\n\n\n12970308010497_4\n74.96528\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n149.9306\n0\n0\n0\n0.00000\n0\n0\n0.00000\n0.00000\n0.00000\n0.00000\n0\n0\n74.96528\n149.93057\n0\n0\n\n\n12988512010497_3\n0.00000\n0.00000\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0.00000\n0\n0\n0.00000\n0.00000\n524.75698\n74.96528\n0\n0\n524.75698\n74.96528\n0\n0\n\n\n12990036010497_1\n449.79170\n374.82641\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0.00000\n0\n0\n0.00000\n0.00000\n449.79170\n149.93057\n0\n0\n899.58339\n524.75698\n0\n0\n\n\n12990036010497_4\n374.82641\n449.79170\n0.0000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0.00000\n0\n0\n0.00000\n0.00000\n149.93057\n449.79170\n0\n0\n524.75698\n899.58339\n0\n0\n\n\n\n\n\n\n\nIntegers\n\nrf_imp_seeds_int &lt;- (rf_imp_seeds/74.96528)\n\nrf_imp_seeds_int |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABAM_TD\nABAM_TD.o\nABGR_TD\nABGR_TD.o\nABLA_TD\nABLA_TD.o\nABPR_TD\nABPR_TD.o\nOther_TD\nOther_TD.o\nPISI_TD\nPISI_TD.o\nPSME_TD\nPSME_TD.o\nrare_TD\nrare_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\nTSME_TD\nTSME_TD.o\n\n\n\n\n12965856010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n2\n0\n2\n1\n0\n0\n0\n0\n\n\n12967289010497_1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n1\n1\n3\n0\n0\n0\n0\n\n\n12967289010497_2\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n1\n0\n3\n3\n0\n0\n0\n0\n\n\n12967289010497_3\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n1\n0\n3\n1\n0\n0\n0\n0\n\n\n12970163010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n1\n0\n0\n2\n1\n0\n0\n0\n0\n\n\n12970308010497_3\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n3\n7\n3\n8\n0\n0\n0\n0\n\n\n12988512010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n7\n1\n7\n0\n0\n0\n0\n\n\n12988512010497_3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n1\n7\n1\n0\n0\n0\n0\n\n\n12990036010497_1\n6\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n7\n0\n0\n6\n2\n\n\n12990036010497_3\n5\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n1\n0\n0\n2\n0\n\n\n\n\n\n\n\nrf_imp_groups_class_int &lt;- (rf_imp_groups_class/74.96528)\n\nrf_imp_groups_class_int |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABIES_TD\nABIES_TD.o\nACGL_TD\nACGL_TD.o\nALNU_TD\nALNU_TD.o\nHARD_TD\nHARD_TD.o\nLAOC_TD\nLAOC_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPOPL_TD\nPOPL_TD.o\nPSME_TD\nPSME_TD.o\nSOFT_TD\nSOFT_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\n\n\n\n\n12965290010497_2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n2\n0\n0\n2\n0\n0\n0\n0\n0\n3\n2\n0\n0\n\n\n12965572010497_4\n6\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n7\n3\n0\n0\n\n\n12966246010497_1\n3\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n1\n0\n0\n\n\n12967289010497_1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n2\n0\n0\n0\n0\n1\n3\n0\n0\n\n\n12967289010497_3\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n2\n0\n0\n0\n0\n0\n3\n1\n0\n0\n\n\n12969073010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n2\n2\n0\n0\n\n\n12970163010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n4\n1\n0\n0\n0\n0\n5\n1\n0\n0\n\n\n12970308010497_3\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n7\n0\n0\n2\n8\n0\n0\n\n\n12970308010497_4\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n5\n2\n0\n0\n\n\n12988512010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n7\n0\n0\n4\n7\n0\n0\n\n\n\n\n\n\n\nrf_imp_groups_reg_int &lt;- (rf_imp_groups_reg/74.96528)\n\nrf_imp_groups_reg_int |&gt; head(n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABIES_TD\nABIES_TD.o\nACGL_TD\nACGL_TD.o\nALNU_TD\nALNU_TD.o\nHARD_TD\nHARD_TD.o\nLAOC_TD\nLAOC_TD.o\nPICO_TD\nPICO_TD.o\nPIEN_TD\nPIEN_TD.o\nPIMO3_TD\nPIMO3_TD.o\nPIPO_TD\nPIPO_TD.o\nPOPL_TD\nPOPL_TD.o\nPSME_TD\nPSME_TD.o\nSOFT_TD\nSOFT_TD.o\nTHPL_TD\nTHPL_TD.o\ntotal_TD\ntotal_TD.o\nTSHE_TD\nTSHE_TD.o\n\n\n\n\n12965572010497_4\n6\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n7\n3\n0\n0\n\n\n12965856010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n1\n1\n0\n0\n\n\n12965856010497_4\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n2\n4\n0\n0\n\n\n12966246010497_1\n8\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8\n1\n0\n0\n\n\n12967289010497_1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n2\n1\n0\n0\n0\n2\n3\n0\n0\n\n\n12970308010497_2\n6\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n6\n2\n0\n0\n\n\n12970308010497_4\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n2\n0\n0\n\n\n12988512010497_3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n1\n0\n0\n7\n1\n0\n0\n\n\n12990036010497_1\n6\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n2\n0\n0\n12\n7\n0\n0\n\n\n12990036010497_4\n5\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n6\n0\n0\n7\n12\n0\n0\n\n\n\n\n\n\n\nTrying to figure out which is better\nI ran out of time.\n\nclass_ab.i = rf_imp_groups_class_int$ABIES_TD\nclass_ab.i &lt;- class_ab.i[1:500]\n\n\n\nreg_ab.i = rf_imp_groups_reg_int$ABIES_TD\nreg_ab.i &lt;- reg_ab.i[1:500]\n\nab.o = rf_imp_groups_reg_int$ABIES_TD.o\nab.o &lt;- ab.o[1:500]\n\ntest &lt;- data.frame(\n  class_ab.i = class_ab.i,\n  reg_ab.i = reg_ab.i,\n  ab.o = ab.o\n)\n\ntest &lt;- test |&gt; mutate(\n  sq_diff_class = (class_ab.i - ab.o)^2,\n  sq_diff_reg = (reg_ab.i - ab.o)^2,\n  mean.o = mean(ab.o)\n)\n\nplot(test$ab.o, test$class_ab.i)\n\n\n\n\n\n\n\nplot(test$ab.o, test$reg_ab.i)\n\n\n\n\n\n\n\nsum(test$sq_diff_class) |&gt; sqrt()\n\n[1] 378.0132\n\nsum(test$sq_diff_reg) |&gt; sqrt()\n\n[1] 249.878\n\n\n\nx1 &lt;- 8\ny1 &lt;- 200\n\n\ntest |&gt; ggplot() + \n  aes(x = log(class_ab.i + 1)) + \n  geom_histogram(bins = 30) + \n  lims(\n    x = c(-1,x1),\n    y = c(0,y1)\n  )\n\n\n\n\n\n\n\ntest |&gt; ggplot() + \n  aes(x = log(reg_ab.i + 1)) + \n  geom_histogram(bins = 30) + \n  lims(\n    x = c(0,x1), \n    y = c(0,y1)\n  )\n\n\n\n\n\n\n\ntest |&gt; ggplot() + \n  aes(x = log(ab.o + 1)) + \n  geom_histogram(bins = 30) + \n  lims(\n    x = c(0,x1), \n    y = c(0,y1)\n  )\n\n\n\n\n\n\n\n\n\nspp_list &lt;- rf_imp_groups_reg_int |&gt; names()\n\n\n\n\nRMSD\nrmsd(rf_imp_seeds_int)\nrmsd(rf_imp_groups_class_int)\nrmsd(rf_imp_groups_reg_int)\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABAM_TD\n10.6992159\n\n\nABGR_TD\n8.2966218\n\n\nABLA_TD\n3.9530731\n\n\nABPR_TD\n0.1690309\n\n\nOther_TD\n0.0000000\n\n\nPISI_TD\n0.0422577\n\n\nPSME_TD\n8.7391773\n\n\nrare_TD\n10.0676288\n\n\ntotal_TD\n21.6947170\n\n\nTSHE_TD\n7.8262382\n\n\nTSME_TD\n1.9128327\n\n\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABIES_TD\n12.6872141\n\n\nACGL_TD\n0.3570778\n\n\nALNU_TD\n0.1538812\n\n\nHARD_TD\n0.6721090\n\n\nLAOC_TD\n1.0027286\n\n\nPICO_TD\n3.4962901\n\n\nPIEN_TD\n13.7168880\n\n\nPIMO3_TD\n0.2001821\n\n\nPIPO_TD\n0.4093622\n\n\nPOPL_TD\n0.4331442\n\n\nPSME_TD\n1.6535000\n\n\nSOFT_TD\n3.4656788\n\n\nTHPL_TD\n2.1711807\n\n\ntotal_TD\n21.3286375\n\n\nTSHE_TD\n5.8297024\n\n\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABIES_TD\n11.5093887\n\n\nACGL_TD\n0.2331715\n\n\nALNU_TD\n0.1461480\n\n\nHARD_TD\n0.7808385\n\n\nLAOC_TD\n7.5406989\n\n\nPICO_TD\n5.6293270\n\n\nPIEN_TD\n0.9922026\n\n\nPIMO3_TD\n0.8337540\n\n\nPIPO_TD\n0.7118962\n\n\nPOPL_TD\n0.3146889\n\n\nPSME_TD\n8.9033650\n\n\nSOFT_TD\n2.3304653\n\n\nTHPL_TD\n1.6190613\n\n\ntotal_TD\n20.9631213\n\n\nTSHE_TD\n7.1672125\n\n\n\n\n\n\nrmsd(rf_imp_seeds)\nrmsd(rf_imp_groups_class)\nrmsd(rf_imp_groups_reg)\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABAM_TD\n802.069719\n\n\nABGR_TD\n621.958575\n\n\nABLA_TD\n296.343230\n\n\nABPR_TD\n12.671446\n\n\nOther_TD\n0.000000\n\n\nPISI_TD\n3.167861\n\n\nPSME_TD\n655.134871\n\n\nrare_TD\n754.722611\n\n\ntotal_TD\n1626.350533\n\n\nTSHE_TD\n586.696136\n\n\nTSME_TD\n143.396037\n\n\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABIES_TD\n951.10056\n\n\nACGL_TD\n26.76844\n\n\nALNU_TD\n11.53575\n\n\nHARD_TD\n50.38484\n\n\nLAOC_TD\n75.16983\n\n\nPICO_TD\n262.10037\n\n\nPIEN_TD\n1028.29035\n\n\nPIMO3_TD\n15.00671\n\n\nPIPO_TD\n30.68795\n\n\nPOPL_TD\n32.47077\n\n\nPSME_TD\n123.95509\n\n\nSOFT_TD\n259.80558\n\n\nTHPL_TD\n162.76317\n\n\ntotal_TD\n1598.90728\n\n\nTSHE_TD\n437.02527\n\n\n\n\n\n\n\n\n\nrmsd\n\n\n\n\nABIES_TD\n862.80455\n\n\nACGL_TD\n17.47976\n\n\nALNU_TD\n10.95602\n\n\nHARD_TD\n58.53578\n\n\nLAOC_TD\n565.29060\n\n\nPICO_TD\n422.00407\n\n\nPIEN_TD\n74.38075\n\n\nPIMO3_TD\n62.50260\n\n\nPIPO_TD\n53.36750\n\n\nPOPL_TD\n23.59074\n\n\nPSME_TD\n667.44325\n\n\nSOFT_TD\n174.70398\n\n\nTHPL_TD\n121.37338\n\n\ntotal_TD\n1571.50626\n\n\nTSHE_TD\n537.29209",
    "crumbs": [
      "Models",
      "8 RF Spp Groups"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This page is left blank on purpose."
  }
]